{"version":3,"file":"sim-DAjnRksT.chunk.js","sources":["../../../ui/rogue/assassination/presets.ts","../../../ui/rogue/assassination/sim.ts"],"sourcesContent":["import * as PresetUtils from '../../core/preset_utils';\nimport { Conjured, Consumes, Flask, Food, Glyphs, Potions } from '../../core/proto/common';\nimport { AssassinationRogue_Options as RogueOptions, RogueMajorGlyph, RogueOptions_PoisonImbue, RoguePrimeGlyph } from '../../core/proto/rogue';\nimport { SavedTalents } from '../../core/proto/ui';\nimport MutilateApl from './apls/mutilate.apl.json';\nimport P1AssassinationGear from './gear_sets/p1_assassination.gear.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nexport const P1_PRESET_ASSASSINATION = PresetUtils.makePresetGear('P1 Assassination', P1AssassinationGear);\n\nexport const ROTATION_PRESET_MUTILATE = PresetUtils.makePresetAPLRotation('Assassination', MutilateApl);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/cata/talent-calc and copy the numbers in the url.\n\nexport const AssassinationTalentsDefault = {\n\tname: 'Assassination 31/2/8',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '0333230013122110321-002-203003',\n\t\tglyphs: Glyphs.create({\n\t\t\tprime1: RoguePrimeGlyph.GlyphOfMutilate,\n\t\t\tprime2: RoguePrimeGlyph.GlyphOfBackstab,\n\t\t\tprime3: RoguePrimeGlyph.GlyphOfRupture,\n\t\t\tmajor1: RogueMajorGlyph.GlyphOfFeint,\n\t\t\tmajor2: RogueMajorGlyph.GlyphOfTricksOfTheTrade,\n\t\t\tmajor3: RogueMajorGlyph.GlyphOfSprint,\n\t\t}),\n\t}),\n};\n\nexport const DefaultOptions = RogueOptions.create({\n\tclassOptions: {\n\t\tmhImbue: RogueOptions_PoisonImbue.DeadlyPoison,\n\t\tohImbue: RogueOptions_PoisonImbue.InstantPoison,\n\t\tthImbue: RogueOptions_PoisonImbue.DeadlyPoison,\n\t\tapplyPoisonsManually: false,\n\t\tstartingOverkillDuration: 20,\n\t\tvanishBreakTime: 0.1,\n\t},\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.PotionOfSpeed,\n\tprepopPotion: Potions.PotionOfSpeed,\n\tdefaultConjured: Conjured.ConjuredRogueThistleTea,\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodMegaMammothMeal,\n});\n","import * as BuffDebuffInputs from '../../core/components/inputs/buffs_debuffs';\nimport { IndividualSimUI, registerSpecConfig } from '../../core/individual_sim_ui';\nimport { Player } from '../../core/player';\nimport { PlayerClasses } from '../../core/player_classes';\nimport { APLRotation } from '../../core/proto/apl';\nimport {\n\tDebuffs,\n\tFaction,\n\tIndividualBuffs,\n\tItemSlot,\n\tPartyBuffs,\n\tPseudoStat,\n\tRace,\n\tRaidBuffs,\n\tSpec,\n\tStat,\n\tTristateEffect,\n} from '../../core/proto/common';\nimport { RogueOptions_PoisonImbue } from '../../core/proto/rogue';\nimport { Stats } from '../../core/proto_utils/stats';\nimport * as RogueInputs from '../inputs';\n// import * as SinInputs from './inputs';\nimport * as Presets from './presets';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecAssassinationRogue, {\n\tcssClass: 'assassination-rogue-sim-ui',\n\tcssScheme: PlayerClasses.getCssClass(PlayerClasses.Rogue),\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: ['Rotations are not fully optimized, especially for non-standard setups.'],\n\t// warnings: [\n\t// \t(simUI: IndividualSimUI<Spec.SpecAssassinationRogue>) => {\n\t// \t\treturn {\n\t// \t\t\tupdateOn: simUI.sim.encounter.changeEmitter,\n\t// \t\t\tgetContent: () => {\n\t// \t\t\t\tlet hasNoArmor = false;\n\t// \t\t\t\tfor (const target of simUI.sim.encounter.targets) {\n\t// \t\t\t\t\tif (new Stats(target.stats).getStat(Stat.StatArmor) <= 0) {\n\t// \t\t\t\t\t\thasNoArmor = true;\n\t// \t\t\t\t\t\tbreak;\n\t// \t\t\t\t\t}\n\t// \t\t\t\t}\n\t// \t\t\t\tif (hasNoArmor) {\n\t// \t\t\t\t\treturn 'One or more targets have no armor. Check advanced encounter settings.';\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\treturn '';\n\t// \t\t\t\t}\n\t// \t\t\t},\n\t// \t\t};\n\t// \t},\n\t// \t(simUI: IndividualSimUI<Spec.SpecAssassinationRogue>) => {\n\t// \t\treturn {\n\t// \t\t\tupdateOn: simUI.player.changeEmitter,\n\t// \t\t\tgetContent: () => {\n\t// \t\t\t\tif (\n\t// \t\t\t\t\tsimUI.player.getTalents().mutilate &&\n\t// \t\t\t\t\t(simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponType != WeaponType.WeaponTypeDagger ||\n\t// \t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponType != WeaponType.WeaponTypeDagger)\n\t// \t\t\t\t) {\n\t// \t\t\t\t\treturn '\"Mutilate\" talent selected, but daggers not equipped in both hands.';\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\treturn '';\n\t// \t\t\t\t}\n\t// \t\t\t},\n\t// \t\t};\n\t// \t},\n\t// \t(simUI: IndividualSimUI<Spec.SpecAssassinationRogue>) => {\n\t// \t\treturn {\n\t// \t\t\tupdateOn: simUI.player.changeEmitter,\n\t// \t\t\tgetContent: () => {\n\t// \t\t\t\tif (simUI.player.getTalents().hackAndSlash) {\n\t// \t\t\t\t\tif (\n\t// \t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponType == WeaponType.WeaponTypeSword ||\n\t// \t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponType == WeaponType.WeaponTypeAxe ||\n\t// \t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponType == WeaponType.WeaponTypeSword ||\n\t// \t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponType == WeaponType.WeaponTypeAxe\n\t// \t\t\t\t\t) {\n\t// \t\t\t\t\t\treturn '';\n\t// \t\t\t\t\t} else {\n\t// \t\t\t\t\t\treturn '\"Hack and Slash\" talent selected, but swords or axes not equipped.';\n\t// \t\t\t\t\t}\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\treturn '';\n\t// \t\t\t\t}\n\t// \t\t\t},\n\t// \t\t};\n\t// \t},\n\t// \t(simUI: IndividualSimUI<Spec.SpecAssassinationRogue>) => {\n\t// \t\treturn {\n\t// \t\t\tupdateOn: simUI.player.changeEmitter,\n\t// \t\t\tgetContent: () => {\n\t// \t\t\t\tif (simUI.player.getTalents().closeQuartersCombat) {\n\t// \t\t\t\t\tif (\n\t// \t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponType == WeaponType.WeaponTypeFist ||\n\t// \t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponType == WeaponType.WeaponTypeDagger ||\n\t// \t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponType == WeaponType.WeaponTypeFist ||\n\t// \t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponType == WeaponType.WeaponTypeDagger\n\t// \t\t\t\t\t) {\n\t// \t\t\t\t\t\treturn '';\n\t// \t\t\t\t\t} else {\n\t// \t\t\t\t\t\treturn '\"Close Quarters Combat\" talent selected, but fists or daggers not equipped.';\n\t// \t\t\t\t\t}\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\treturn '';\n\t// \t\t\t\t}\n\t// \t\t\t},\n\t// \t\t};\n\t// \t},\n\t// \t(simUI: IndividualSimUI<Spec.SpecAssassinationRogue>) => {\n\t// \t\treturn {\n\t// \t\t\tupdateOn: simUI.player.changeEmitter,\n\t// \t\t\tgetContent: () => {\n\t// \t\t\t\tif (simUI.player.getTalents().maceSpecialization) {\n\t// \t\t\t\t\tif (\n\t// \t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponType == WeaponType.WeaponTypeMace ||\n\t// \t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponType == WeaponType.WeaponTypeMace\n\t// \t\t\t\t\t) {\n\t// \t\t\t\t\t\treturn '';\n\t// \t\t\t\t\t} else {\n\t// \t\t\t\t\t\treturn '\"Mace Specialization\" talent selected, but maces not equipped.';\n\t// \t\t\t\t\t}\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\treturn '';\n\t// \t\t\t\t}\n\t// \t\t\t},\n\t// \t\t};\n\t// \t},\n\t// \t(simUI: IndividualSimUI<Spec.SpecAssassinationRogue>) => {\n\t// \t\treturn {\n\t// \t\t\tupdateOn: simUI.player.changeEmitter,\n\t// \t\t\tgetContent: () => {\n\t// \t\t\t\tconst mhWeaponSpeed = simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponSpeed;\n\t// \t\t\t\tconst ohWeaponSpeed = simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponSpeed;\n\t// \t\t\t\tconst mhImbue = simUI.player.getSpecOptions().classOptions!.mhImbue;\n\t// \t\t\t\tconst ohImbue = simUI.player.getSpecOptions().classOptions!.ohImbue;\n\t// \t\t\t\tif (\n\t// \t\t\t\t\ttypeof mhWeaponSpeed == 'undefined' ||\n\t// \t\t\t\t\ttypeof ohWeaponSpeed == 'undefined' ||\n\t// \t\t\t\t\t!simUI.player.getSpecOptions().classOptions!.applyPoisonsManually\n\t// \t\t\t\t) {\n\t// \t\t\t\t\treturn '';\n\t// \t\t\t\t}\n\t// \t\t\t\tif (mhWeaponSpeed < ohWeaponSpeed && ohImbue == RogueOptions_PoisonImbue.DeadlyPoison) {\n\t// \t\t\t\t\treturn 'Deadly poison applied to slower (off hand) weapon.';\n\t// \t\t\t\t}\n\t// \t\t\t\tif (ohWeaponSpeed < mhWeaponSpeed && mhImbue == RogueOptions_PoisonImbue.DeadlyPoison) {\n\t// \t\t\t\t\treturn 'Deadly poison applied to slower (main hand) weapon.';\n\t// \t\t\t\t}\n\t// \t\t\t\treturn '';\n\t// \t\t\t},\n\t// \t\t};\n\t// \t},\n\t// ],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatAgility,\n\t\tStat.StatStrength,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatMastery,\n\t\tStat.StatExpertise,\n\t],\n\tepPseudoStats: [PseudoStat.PseudoStatMainHandDps, PseudoStat.PseudoStatOffHandDps],\n\t// Reference stat against which to calculate EP.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatAgility,\n\t\tStat.StatStrength,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatSpellHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatMastery,\n\t\tStat.StatExpertise,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.P1_PRESET_ASSASSINATION.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap(\n\t\t\t{\n\t\t\t\t[Stat.StatAgility]: 1.86,\n\t\t\t\t[Stat.StatStrength]: 1.14,\n\t\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t\t[Stat.StatSpellCrit]: 0.28,\n\t\t\t\t[Stat.StatSpellHit]: 0.08,\n\t\t\t\t[Stat.StatMeleeHit]: 1.39,\n\t\t\t\t[Stat.StatMeleeCrit]: 1.32,\n\t\t\t\t[Stat.StatMeleeHaste]: 1.48,\n\t\t\t\t[Stat.StatMastery]: 0.84,\n\t\t\t\t[Stat.StatExpertise]: 0.98,\n\t\t\t},\n\t\t\t{\n\t\t\t\t[PseudoStat.PseudoStatMainHandDps]: 2.94,\n\t\t\t\t[PseudoStat.PseudoStatOffHandDps]: 2.45,\n\t\t\t},\n\t\t),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.AssassinationTalentsDefault.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: RaidBuffs.create({\n\t\t\tarcaneBrilliance: true,\n\t\t\tbloodlust: true,\n\t\t\tmarkOfTheWild: true,\n\t\t\ticyTalons: true,\n\t\t\tmoonkinForm: true,\n\t\t\tleaderOfThePack: true,\n\t\t\tpowerWordFortitude: true,\n\t\t\tstrengthOfEarthTotem: true,\n\t\t\ttrueshotAura: true,\n\t\t\twrathOfAirTotem: true,\n\t\t\tdemonicPact: true,\n\t\t\tblessingOfKings: true,\n\t\t\tblessingOfMight: true,\n\t\t\tcommunion: true,\n\t\t}),\n\t\tpartyBuffs: PartyBuffs.create({}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t}),\n\t\tdebuffs: Debuffs.create({\n\t\t\tmangle: true,\n\t\t\tsunderArmor: true,\n\t\t\tearthAndMoon: true,\n\t\t\tbloodFrenzy: true,\n\t\t\tshadowAndFlame: true,\n\t\t}),\n\t},\n\n\tplayerInputs: {\n\t\tinputs: [RogueInputs.ApplyPoisonsManually()],\n\t},\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [RogueInputs.MainHandImbue(), RogueInputs.OffHandImbue(), RogueInputs.ThrownImbue()],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.CritBuff,\n\t\tBuffDebuffInputs.SpellCritDebuff,\n\t\tBuffDebuffInputs.SpellDamageDebuff,\n\t\tBuffDebuffInputs.MajorArmorDebuff,\n\t],\n\texcludeBuffDebuffInputs: [],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\t// RogueInputs.StartingOverkillDuration(),\n\t\t\t// RogueInputs.VanishBreakTime(),\n\t\t\t// RogueInputs.AssumeBleedActive(),\n\t\t\t// OtherInputs.TankAssignment,\n\t\t\t// OtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [Presets.AssassinationTalentsDefault],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\tPresets.ROTATION_PRESET_MUTILATE,\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.P1_PRESET_ASSASSINATION,\n\t\t],\n\t},\n\n\tautoRotation: (player: Player<Spec.SpecAssassinationRogue>): APLRotation => {\n\t\tconst numTargets = player.sim.encounter.targets.length;\n\t\tif (numTargets >= 5) {\n\t\t\treturn Presets.ROTATION_PRESET_MUTILATE.rotation.rotation!;\n\t\t} else {\n\t\t\treturn Presets.ROTATION_PRESET_MUTILATE.rotation.rotation!;\n\t\t}\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecAssassinationRogue,\n\t\t\ttalents: Presets.AssassinationTalentsDefault.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.P1_PRESET_ASSASSINATION.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.P1_PRESET_ASSASSINATION.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class AssassinationRogueSimUI extends IndividualSimUI<Spec.SpecAssassinationRogue> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecAssassinationRogue>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t\tthis.player.changeEmitter.on(c => {\n\t\t\tconst options = this.player.getSpecOptions();\n\t\t\tconst encounter = this.sim.encounter;\n\t\t\tif (!options.classOptions!.applyPoisonsManually) {\n\t\t\t\tconst mhWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponSpeed;\n\t\t\t\tconst ohWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponSpeed;\n\t\t\t\tif (typeof mhWeaponSpeed == 'undefined' || typeof ohWeaponSpeed == 'undefined') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (encounter.targets.length > 3) {\n\t\t\t\t\toptions.classOptions!.mhImbue = RogueOptions_PoisonImbue.InstantPoison;\n\t\t\t\t\toptions.classOptions!.ohImbue = RogueOptions_PoisonImbue.InstantPoison;\n\t\t\t\t} else {\n\t\t\t\t\tif (mhWeaponSpeed <= ohWeaponSpeed) {\n\t\t\t\t\t\toptions.classOptions!.mhImbue = RogueOptions_PoisonImbue.DeadlyPoison;\n\t\t\t\t\t\toptions.classOptions!.ohImbue = RogueOptions_PoisonImbue.InstantPoison;\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions.classOptions!.mhImbue = RogueOptions_PoisonImbue.InstantPoison;\n\t\t\t\t\t\toptions.classOptions!.ohImbue = RogueOptions_PoisonImbue.DeadlyPoison;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.player.setSpecOptions(c, options);\n\t\t});\n\t\tthis.sim.encounter.changeEmitter.on(c => {\n\t\t\tconst options = this.player.getSpecOptions();\n\t\t\tconst encounter = this.sim.encounter;\n\t\t\tif (!options.classOptions!.applyPoisonsManually) {\n\t\t\t\tconst mhWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponSpeed;\n\t\t\t\tconst ohWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponSpeed;\n\t\t\t\tif (typeof mhWeaponSpeed == 'undefined' || typeof ohWeaponSpeed == 'undefined') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (encounter.targets.length > 3) {\n\t\t\t\t\toptions.classOptions!.mhImbue = RogueOptions_PoisonImbue.InstantPoison;\n\t\t\t\t\toptions.classOptions!.ohImbue = RogueOptions_PoisonImbue.InstantPoison;\n\t\t\t\t} else {\n\t\t\t\t\tif (mhWeaponSpeed <= ohWeaponSpeed) {\n\t\t\t\t\t\toptions.classOptions!.mhImbue = RogueOptions_PoisonImbue.DeadlyPoison;\n\t\t\t\t\t\toptions.classOptions!.ohImbue = RogueOptions_PoisonImbue.InstantPoison;\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions.classOptions!.mhImbue = RogueOptions_PoisonImbue.InstantPoison;\n\t\t\t\t\t\toptions.classOptions!.ohImbue = RogueOptions_PoisonImbue.DeadlyPoison;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.player.setSpecOptions(c, options);\n\t\t});\n\t}\n}\n"],"names":["P1_PRESET_ASSASSINATION","PresetUtils.makePresetGear","ROTATION_PRESET_MUTILATE","PresetUtils.makePresetAPLRotation","MutilateApl","AssassinationTalentsDefault","name","data","SavedTalents","create","talentsString","glyphs","Glyphs","prime1","RoguePrimeGlyph","GlyphOfMutilate","prime2","GlyphOfBackstab","prime3","GlyphOfRupture","major1","RogueMajorGlyph","GlyphOfFeint","major2","GlyphOfTricksOfTheTrade","major3","GlyphOfSprint","DefaultOptions","RogueOptions","classOptions","mhImbue","RogueOptions_PoisonImbue","DeadlyPoison","ohImbue","InstantPoison","thImbue","applyPoisonsManually","startingOverkillDuration","vanishBreakTime","DefaultConsumes","Consumes","defaultPotion","Potions","PotionOfSpeed","prepopPotion","defaultConjured","Conjured","ConjuredRogueThistleTea","flask","Flask","FlaskOfEndlessRage","food","Food","FoodMegaMammothMeal","SPEC_CONFIG","registerSpecConfig","Spec","SpecAssassinationRogue","cssClass","cssScheme","PlayerClasses","getCssClass","Rogue","knownIssues","epStats","Stat","StatAgility","StatStrength","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatSpellHit","StatSpellCrit","StatMeleeHaste","StatMastery","StatExpertise","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","StatStamina","defaults","gear","Presets.P1_PRESET_ASSASSINATION","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","talents","Presets.AssassinationTalentsDefault","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","arcaneBrilliance","bloodlust","markOfTheWild","icyTalons","moonkinForm","leaderOfThePack","powerWordFortitude","strengthOfEarthTotem","trueshotAura","wrathOfAirTotem","demonicPact","blessingOfKings","blessingOfMight","communion","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","debuffs","Debuffs","mangle","sunderArmor","earthAndMoon","bloodFrenzy","shadowAndFlame","playerInputs","inputs","RogueInputs.ApplyPoisonsManually","playerIconInputs","RogueInputs.MainHandImbue","RogueInputs.OffHandImbue","RogueInputs.ThrownImbue","includeBuffDebuffInputs","BuffDebuffInputs.CritBuff","BuffDebuffInputs.SpellCritDebuff","BuffDebuffInputs.SpellDamageDebuff","BuffDebuffInputs.MajorArmorDebuff","excludeBuffDebuffInputs","otherInputs","encounterPicker","showExecuteProportion","presets","rotations","Presets.ROTATION_PRESET_MUTILATE","autoRotation","player","sim","encounter","targets","length","rotation","raidSimPresets","spec","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceHuman","Horde","RaceOrc","defaultGear","AssassinationRogueSimUI","IndividualSimUI","constructor","parentElem","super","this","changeEmitter","on","c","options","getSpecOptions","mhWeaponSpeed","getGear","getEquippedItem","ItemSlot","ItemSlotMainHand","item","weaponSpeed","ohWeaponSpeed","ItemSlotOffHand","setSpecOptions"],"mappings":"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"}