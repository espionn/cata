{"version":3,"file":"sim-DI3dmUDz.chunk.js","sources":["../../../ui/hunter/survival/inputs.ts","../../../ui/hunter/survival/presets.ts","../../../ui/hunter/survival/sim.ts"],"sourcesContent":["import * as InputHelpers from '../../core/components/input_helpers.js';\nimport { Player } from '../../core/player.js';\nimport { RotationType, Spec } from '../../core/proto/common.js';\nimport { HunterStingType } from '../../core/proto/hunter';\nimport { TypedEvent } from '../../core/typed_event.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const SniperTrainingUptime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecSurvivalHunter>({\n\tfieldName: 'sniperTrainingUptime',\n\tlabel: 'ST Uptime (%)',\n\tlabelTooltip: 'Uptime for the Sniper Training talent, as a percent of the fight duration.',\n\tpercent: true,\n\tshowWhen: (player: Player<Spec.SpecSurvivalHunter>) => player.getTalents().sniperTraining > 0,\n\tchangeEmitter: (player: Player<Spec.SpecSurvivalHunter>) => TypedEvent.onAny([player.specOptionsChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const SVRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecSurvivalHunter, RotationType>({\n\t\t\tfieldName: 'type',\n\t\t\tlabel: 'Type',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Single Target', value: RotationType.SingleTarget },\n\t\t\t\t{ name: 'AOE', value: RotationType.Aoe },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecSurvivalHunter, HunterStingType>({\n\t\t\tfieldName: 'sting',\n\t\t\tlabel: 'Sting',\n\t\t\tlabelTooltip: 'Maintains the selected Sting on the primary target.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'None', value: HunterStingType.NoSting },\n\t\t\t\t{ name: 'Serpent Sting', value: HunterStingType.SerpentSting },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecSurvivalHunter>) => player.getSimpleRotation().type == RotationType.SingleTarget,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecSurvivalHunter>({\n\t\t\tfieldName: 'trapWeave',\n\t\t\tlabel: 'Trap Weave',\n\t\t\tlabelTooltip: 'Uses Explosive Trap at appropriate times. Note that selecting this will disable Black Arrow because they share a CD.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecSurvivalHunter>({\n\t\t\tfieldName: 'multiDotSerpentSting',\n\t\t\tlabel: 'Multi-Dot Serpent Sting',\n\t\t\tlabelTooltip: 'Casts Serpent Sting on multiple targets',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecSurvivalHunter>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t],\n};\n","import * as PresetUtils from '../../core/preset_utils';\nimport { Consumes, Flask, Food, Glyphs, PetFood, Potions, RotationType, Spec } from '../../core/proto/common';\nimport {\n\tHunterMajorGlyph as MajorGlyph,\n\tHunterMinorGlyph as MinorGlyph,\n\tHunterOptions_Ammo as Ammo,\n\tHunterOptions_PetType as PetType,\n\tHunterPrimeGlyph as PrimeGlyph,\n\tHunterStingType,\n\tSurvivalHunter_Options as HunterOptions,\n\tSurvivalHunter_Rotation as HunterRotation,\n} from '../../core/proto/hunter';\nimport { SavedTalents } from '../../core/proto/ui';\nimport { ferocityDefault } from '../../core/talents/hunter_pet';\nimport AoeApl from './apls/aoe.apl.json';\nimport SvApl from './apls/sv.apl.json';\nimport SvAdvApl from './apls/sv_advanced.apl.json';\nimport P1SVGear from './gear_sets/p1_sv.gear.json';\nimport PreraidSVGear from './gear_sets/preraid_sv.gear.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nexport const SV_PRERAID_PRESET = PresetUtils.makePresetGear('SV PreRaid Preset', PreraidSVGear);\nexport const SV_P1_PRESET = PresetUtils.makePresetGear('SV P1 Preset', P1SVGear);\nexport const DefaultSimpleRotation = HunterRotation.create({\n\ttype: RotationType.SingleTarget,\n\tsting: HunterStingType.SerpentSting,\n\tmultiDotSerpentSting: true,\n});\n\nexport const ROTATION_PRESET_SIMPLE_DEFAULT = PresetUtils.makePresetSimpleRotation('Simple Default', Spec.SpecSurvivalHunter, DefaultSimpleRotation);\nexport const ROTATION_PRESET_SV = PresetUtils.makePresetAPLRotation('SV', SvApl);\nexport const ROTATION_PRESET_SV_ADVANCED = PresetUtils.makePresetAPLRotation('SV (Advanced)', SvAdvApl);\nexport const ROTATION_PRESET_AOE = PresetUtils.makePresetAPLRotation('AOE', AoeApl);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\n\nexport const SurvivalTalents = {\n\tname: 'Survival',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '03-2302-23203003023022121311',\n\t\tglyphs: Glyphs.create({\n\t\t\tprime1: PrimeGlyph.GlyphOfExplosiveShot,\n\t\t\tprime2: PrimeGlyph.GlyphOfKillShot,\n\t\t\tprime3: PrimeGlyph.GlyphOfSerpentSting,\n\t\t}),\n\t}),\n};\n\nexport const SVDefaultOptions = HunterOptions.create({\n\tclassOptions: {\n\t\tuseHuntersMark: true,\n\t\tpetType: PetType.Wolf,\n\t\tpetTalents: ferocityDefault,\n\t\tpetUptime: 1,\n\t},\n\tsniperTrainingUptime: 0.9,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.PotionOfTheTolvir,\n\tprepopPotion: Potions.PotionOfTheTolvir,\n\tflask: Flask.FlaskOfTheWinds,\n\tfood: Food.FoodFishFeast,\n});\n","import * as BuffDebuffInputs from '../../core/components/inputs/buffs_debuffs';\nimport * as OtherInputs from '../../core/components/other_inputs';\nimport * as Mechanics from '../../core/constants/mechanics';\nimport { IndividualSimUI, registerSpecConfig } from '../../core/individual_sim_ui';\nimport { Player } from '../../core/player';\nimport { PlayerClasses } from '../../core/player_classes';\nimport { APLAction, APLListItem, APLRotation } from '../../core/proto/apl';\nimport {\n\tCooldowns,\n\tDebuffs,\n\tFaction,\n\tIndividualBuffs,\n\tItemSlot,\n\tPartyBuffs,\n\tPseudoStat,\n\tRace,\n\tRaidBuffs,\n\tRangedWeaponType,\n\tRotationType,\n\tSpec,\n\tStat,\n\tTristateEffect,\n} from '../../core/proto/common';\nimport { HunterStingType, SurvivalHunter_Rotation } from '../../core/proto/hunter';\nimport * as AplUtils from '../../core/proto_utils/apl_utils';\nimport { Stats } from '../../core/proto_utils/stats';\nimport * as HunterInputs from '../inputs';\nimport * as SVInputs from './inputs';\nimport * as Presets from './presets';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecSurvivalHunter, {\n\tcssClass: 'survival-hunter-sim-ui',\n\tcssScheme: PlayerClasses.getCssClass(PlayerClasses.Hunter),\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [],\n\twarnings: [],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [Stat.StatStamina, Stat.StatAgility, Stat.StatRangedAttackPower, Stat.StatMeleeHit, Stat.StatMeleeCrit, Stat.StatMeleeHaste, Stat.StatMastery],\n\tepPseudoStats: [PseudoStat.PseudoStatRangedDps],\n\t// Reference stat against which to calculate EP.\n\tepReferenceStat: Stat.StatRangedAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatAgility,\n\t\tStat.StatRangedAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatMastery,\n\t],\n\tmodifyDisplayStats: (player: Player<Spec.SpecSurvivalHunter>) => {\n\t\tlet stats = new Stats();\n\t\t//stats = stats.addStat(Stat.StatMeleeCrit, player.getTalents().lethalShots * 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\n\t\tconst rangedWeapon = player.getEquippedItem(ItemSlot.ItemSlotRanged);\n\t\tif (rangedWeapon?.enchant?.effectId == 3608) {\n\t\t\tstats = stats.addStat(Stat.StatMeleeCrit, 40);\n\t\t}\n\t\tif (player.getRace() == Race.RaceDwarf && rangedWeapon?.item.rangedWeaponType == RangedWeaponType.RangedWeaponTypeGun) {\n\t\t\tstats = stats.addStat(Stat.StatMeleeCrit, 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\t\t}\n\t\tif (player.getRace() == Race.RaceTroll && rangedWeapon?.item.rangedWeaponType == RangedWeaponType.RangedWeaponTypeBow) {\n\t\t\tstats = stats.addStat(Stat.StatMeleeCrit, 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\t\t}\n\n\t\treturn {\n\t\t\ttalents: stats,\n\t\t};\n\t},\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.SV_P1_PRESET.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap(\n\t\t\t{\n\t\t\t\t[Stat.StatStamina]: 0.5,\n\t\t\t\t[Stat.StatAgility]: 2.65,\n\t\t\t\t[Stat.StatIntellect]: 1.1,\n\t\t\t\t[Stat.StatRangedAttackPower]: 1.0,\n\t\t\t\t[Stat.StatMeleeHit]: 2,\n\t\t\t\t[Stat.StatMeleeCrit]: 1.5,\n\t\t\t\t[Stat.StatMeleeHaste]: 1.39,\n\t\t\t\t[Stat.StatMastery]: 1.32,\n\t\t\t},\n\t\t\t{\n\t\t\t\t[PseudoStat.PseudoStatRangedDps]: 6.32,\n\t\t\t},\n\t\t),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.SurvivalTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.SVDefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: RaidBuffs.create({\n\t\t\tarcaneBrilliance: true,\n\t\t\tbloodlust: true,\n\t\t\tmarkOfTheWild: true,\n\t\t\ticyTalons: true,\n\t\t\tmoonkinForm: true,\n\t\t\tleaderOfThePack: true,\n\t\t\tpowerWordFortitude: true,\n\t\t\tstrengthOfEarthTotem: true,\n\t\t\ttrueshotAura: true,\n\t\t\twrathOfAirTotem: true,\n\t\t\tdemonicPact: true,\n\t\t\tblessingOfKings: true,\n\t\t\tblessingOfMight: true,\n\t\t\tcommunion: true,\n\t\t}),\n\t\tpartyBuffs: PartyBuffs.create({}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tvampiricTouch: true,\n\t\t}),\n\t\tdebuffs: Debuffs.create({\n\t\t\tsunderArmor: true,\n\t\t\tcurseOfElements: true,\n\t\t\tsavageCombat: true,\n\t\t\tbloodFrenzy: true,\n\t\t}),\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [HunterInputs.PetTypeInput()],\n\t// Inputs to include in the 'Rotation' section on the settings tab.\n\trotationInputs: SVInputs.SVRotationConfig,\n\tpetConsumeInputs: [],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [BuffDebuffInputs.StaminaBuff, BuffDebuffInputs.SpellDamageDebuff, BuffDebuffInputs.MajorArmorDebuff],\n\texcludeBuffDebuffInputs: [],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tHunterInputs.PetUptime(),\n\t\t\tHunterInputs.TimeToTrapWeaveMs(),\n\t\t\tSVInputs.SniperTrainingUptime,\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\tOtherInputs.DarkIntentUptime\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [Presets.SurvivalTalents],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [Presets.ROTATION_PRESET_SIMPLE_DEFAULT, Presets.ROTATION_PRESET_SV, Presets.ROTATION_PRESET_SV_ADVANCED, Presets.ROTATION_PRESET_AOE],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [Presets.SV_PRERAID_PRESET, Presets.SV_P1_PRESET],\n\t},\n\n\tautoRotation: (player: Player<Spec.SpecSurvivalHunter>): APLRotation => {\n\t\tconst numTargets = player.sim.encounter.targets.length;\n\t\tif (numTargets >= 4) {\n\t\t\treturn Presets.ROTATION_PRESET_AOE.rotation.rotation!;\n\t\t} else {\n\t\t\treturn Presets.ROTATION_PRESET_SV.rotation.rotation!;\n\t\t}\n\t},\n\n\tsimpleRotation: (player: Player<Spec.SpecSurvivalHunter>, simple: SurvivalHunter_Rotation, cooldowns: Cooldowns): APLRotation => {\n\t\tconst [prepullActions, actions] = AplUtils.standardCooldownDefaults(cooldowns);\n\n\t\tconst serpentSting = APLAction.fromJsonString(\n\t\t\t`{\"condition\":{\"cmp\":{\"op\":\"OpGt\",\"lhs\":{\"remainingTime\":{}},\"rhs\":{\"const\":{\"val\":\"6s\"}}}},\"multidot\":{\"spellId\":{\"spellId\":49001},\"maxDots\":${\n\t\t\t\tsimple.multiDotSerpentSting ? 3 : 1\n\t\t\t},\"maxOverlap\":{\"const\":{\"val\":\"0ms\"}}}}`,\n\t\t);\n\t\tconst scorpidSting = APLAction.fromJsonString(\n\t\t\t`{\"condition\":{\"auraShouldRefresh\":{\"auraId\":{\"spellId\":3043},\"maxOverlap\":{\"const\":{\"val\":\"0ms\"}}}},\"castSpell\":{\"spellId\":{\"spellId\":3043}}}`,\n\t\t);\n\t\tconst trapWeave = APLAction.fromJsonString(\n\t\t\t`{\"condition\":{\"not\":{\"val\":{\"dotIsActive\":{\"spellId\":{\"spellId\":49067}}}}},\"castSpell\":{\"spellId\":{\"tag\":1,\"spellId\":49067}}}`,\n\t\t);\n\t\tconst volley = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":58434}}}`);\n\t\tconst killShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":61006}}}`);\n\t\tconst aimedShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":49050}}}`);\n\t\tconst multiShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":49048}}}`);\n\t\tconst steadyShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":49052}}}`);\n\t\tconst blackArrow = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":63672}}}`);\n\t\tconst explosiveShot4 = APLAction.fromJsonString(\n\t\t\t`{\"condition\":{\"not\":{\"val\":{\"dotIsActive\":{\"spellId\":{\"spellId\":60053}}}}},\"castSpell\":{\"spellId\":{\"spellId\":60053}}}`,\n\t\t);\n\t\tconst explosiveShot3 = APLAction.fromJsonString(\n\t\t\t`{\"condition\":{\"dotIsActive\":{\"spellId\":{\"spellId\":60053}}},\"castSpell\":{\"spellId\":{\"spellId\":60052}}}`,\n\t\t);\n\t\t//const arcaneShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":49045}}}`);\n\n\t\tif (simple.type == RotationType.Aoe) {\n\t\t\tactions.push(\n\t\t\t\t...([\n\t\t\t\t\tsimple.sting == HunterStingType.ScorpidSting ? scorpidSting : null,\n\t\t\t\t\tsimple.sting == HunterStingType.SerpentSting ? serpentSting : null,\n\t\t\t\t\tsimple.trapWeave ? trapWeave : null,\n\t\t\t\t\tvolley,\n\t\t\t\t].filter(a => a) as Array<APLAction>),\n\t\t\t);\n\t\t} else {\n\t\t\t// SV\n\t\t\tactions.push(\n\t\t\t\t...([\n\t\t\t\t\tkillShot,\n\t\t\t\t\texplosiveShot4,\n\t\t\t\t\tsimple.allowExplosiveShotDownrank ? explosiveShot3 : null,\n\t\t\t\t\tsimple.trapWeave ? trapWeave : null,\n\t\t\t\t\tsimple.sting == HunterStingType.ScorpidSting ? scorpidSting : null,\n\t\t\t\t\tsimple.sting == HunterStingType.SerpentSting ? serpentSting : null,\n\t\t\t\t\tblackArrow,\n\t\t\t\t\taimedShot,\n\t\t\t\t\tmultiShot,\n\t\t\t\t\tsteadyShot,\n\t\t\t\t].filter(a => a) as Array<APLAction>),\n\t\t\t);\n\t\t}\n\n\t\treturn APLRotation.create({\n\t\t\tprepullActions: prepullActions,\n\t\t\tpriorityList: actions.map(action =>\n\t\t\t\tAPLListItem.create({\n\t\t\t\t\taction: action,\n\t\t\t\t}),\n\t\t\t),\n\t\t});\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecSurvivalHunter,\n\t\t\ttalents: Presets.SurvivalTalents.data,\n\t\t\tspecOptions: Presets.SVDefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.SV_P1_PRESET.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.SV_P1_PRESET.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class SurvivalHunterSimUI extends IndividualSimUI<Spec.SpecSurvivalHunter> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecSurvivalHunter>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["SniperTrainingUptime","InputHelpers.makeSpecOptionsNumberInput","fieldName","label","labelTooltip","percent","showWhen","player","getTalents","sniperTraining","changeEmitter","TypedEvent","onAny","specOptionsChangeEmitter","talentsChangeEmitter","SVRotationConfig","inputs","InputHelpers.makeRotationEnumInput","values","name","value","RotationType","SingleTarget","Aoe","HunterStingType","NoSting","SerpentSting","getSimpleRotation","type","InputHelpers.makeRotationBooleanInput","rotationChangeEmitter","SV_PRERAID_PRESET","PresetUtils.makePresetGear","SV_P1_PRESET","P1SVGear","DefaultSimpleRotation","HunterRotation","create","sting","multiDotSerpentSting","ROTATION_PRESET_SIMPLE_DEFAULT","PresetUtils.makePresetSimpleRotation","Spec","SpecSurvivalHunter","ROTATION_PRESET_SV","PresetUtils.makePresetAPLRotation","SvApl","ROTATION_PRESET_SV_ADVANCED","SvAdvApl","ROTATION_PRESET_AOE","AoeApl","SurvivalTalents","data","SavedTalents","talentsString","glyphs","Glyphs","prime1","PrimeGlyph","GlyphOfExplosiveShot","prime2","GlyphOfKillShot","prime3","GlyphOfSerpentSting","SVDefaultOptions","HunterOptions","classOptions","useHuntersMark","petType","PetType","Wolf","petTalents","ferocityDefault","petUptime","sniperTrainingUptime","DefaultConsumes","Consumes","defaultPotion","Potions","PotionOfTheTolvir","prepopPotion","flask","Flask","FlaskOfTheWinds","food","Food","FoodFishFeast","SPEC_CONFIG","registerSpecConfig","cssClass","cssScheme","PlayerClasses","getCssClass","Hunter","knownIssues","warnings","epStats","Stat","StatStamina","StatAgility","StatRangedAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatMastery","epPseudoStats","PseudoStat","PseudoStatRangedDps","epReferenceStat","displayStats","StatHealth","modifyDisplayStats","stats","Stats","rangedWeapon","getEquippedItem","ItemSlot","ItemSlotRanged","enchant","effectId","addStat","getRace","Race","RaceDwarf","item","rangedWeaponType","RangedWeaponType","RangedWeaponTypeGun","Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE","RaceTroll","RangedWeaponTypeBow","talents","defaults","gear","Presets.SV_P1_PRESET","epWeights","fromMap","StatIntellect","consumes","Presets.DefaultConsumes","Presets.SurvivalTalents","specOptions","Presets.SVDefaultOptions","raidBuffs","RaidBuffs","arcaneBrilliance","bloodlust","markOfTheWild","icyTalons","moonkinForm","leaderOfThePack","powerWordFortitude","strengthOfEarthTotem","trueshotAura","wrathOfAirTotem","demonicPact","blessingOfKings","blessingOfMight","communion","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","vampiricTouch","debuffs","Debuffs","sunderArmor","curseOfElements","savageCombat","bloodFrenzy","playerIconInputs","HunterInputs.PetTypeInput","rotationInputs","SVInputs.SVRotationConfig","petConsumeInputs","includeBuffDebuffInputs","BuffDebuffInputs.StaminaBuff","BuffDebuffInputs.SpellDamageDebuff","BuffDebuffInputs.MajorArmorDebuff","excludeBuffDebuffInputs","otherInputs","HunterInputs.PetUptime","HunterInputs.TimeToTrapWeaveMs","SVInputs.SniperTrainingUptime","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","OtherInputs.DarkIntentUptime","encounterPicker","showExecuteProportion","presets","rotations","Presets.ROTATION_PRESET_SIMPLE_DEFAULT","Presets.ROTATION_PRESET_SV","Presets.ROTATION_PRESET_SV_ADVANCED","Presets.ROTATION_PRESET_AOE","Presets.SV_PRERAID_PRESET","autoRotation","sim","encounter","targets","length","rotation","simpleRotation","simple","cooldowns","prepullActions","actions","AplUtils.standardCooldownDefaults","serpentSting","APLAction","fromJsonString","scorpidSting","trapWeave","volley","killShot","aimedShot","multiShot","steadyShot","blackArrow","explosiveShot4","explosiveShot3","push","ScorpidSting","filter","a","allowExplosiveShotDownrank","APLRotation","priorityList","map","action","APLListItem","raidSimPresets","spec","defaultFactionRaces","Faction","Unknown","RaceUnknown","Alliance","RaceNightElf","Horde","defaultGear","SurvivalHunterSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}