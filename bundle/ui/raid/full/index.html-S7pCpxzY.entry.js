import{T as t}from"../../../index-DsOHg7BP.chunk.js";/* empty css                           */import{S as e,a as s,R as i,b as r,C as a,c as n,T as o,m as l,F as c,r as h,d,e as m,p,f as u,E as g,g as f,h as y,i as P,j as E,P as S,k,I,l as b,U as D,n as v,o as w,q as C,s as T,G as R,t as U,u as x,B as A,v as L,w as O,x as F,y as j,A as M,z as $,D as B,H}from"../../../detailed_results-BMSIvwql.chunk.js";import{g as W,I as N,E as V,a as q,M as J,P as K,b as G,c as z,B as _,d as X,e as Q,f as Z,C as Y,h as tt,i as et,j as st,k as it,S as rt,r as at}from"../../../preset_utils-BI4Zd4bY.chunk.js";import{B as nt}from"../../../sim-OR1s1z0u.chunk.js";import{F as ot}from"../../../sim-BsgKnWQF.chunk.js";import{U as lt}from"../../../sim-BEMzROm1.chunk.js";import{B as ct}from"../../../sim-DcZ3zSuH.chunk.js";import{F as ht}from"../../../sim-CWeOXBK6.chunk.js";import{R as dt}from"../../../sim-7cmemts2.chunk.js";import{B as mt}from"../../../sim-BXQuzoQS.chunk.js";import{M as pt}from"../../../sim-G-JOA58v.chunk.js";import{S as ut}from"../../../sim-DI3dmUDz.chunk.js";import{A as gt}from"../../../sim-pQCosGXH.chunk.js";import{F as ft}from"../../../sim-BfVX2wFT.chunk.js";import{F as yt}from"../../../sim-HHNmlO8d.chunk.js";import{H as Pt}from"../../../sim-D3VOQoVX.chunk.js";import{P as Et}from"../../../sim-BDkzIggo.chunk.js";import{R as St}from"../../../sim-B0J5NnIx.chunk.js";import{D as kt}from"../../../sim-JynL3c3a.chunk.js";import{H as It}from"../../../sim-CbRasuYS.chunk.js";import{S as bt}from"../../../sim-YjX_q5rc.chunk.js";import{A as Dt}from"../../../sim-DAjnRksT.chunk.js";import{C as vt}from"../../../sim-mJBHw2Uc.chunk.js";import{S as wt}from"../../../sim-FEarFZn3.chunk.js";import{E as Ct}from"../../../sim-gqqk2UiF.chunk.js";import{E as Tt}from"../../../sim-DdwC-V0w.chunk.js";import{R as Rt}from"../../../sim-BlIElynQ.chunk.js";import{A as Ut}from"../../../sim-CaH9qoe-.chunk.js";import{D as xt}from"../../../sim-Dh8J61Dy.chunk.js";import{D as At}from"../../../sim-ExGZ8gbW.chunk.js";import{A as Lt}from"../../../sim-BdL1Q9r3.chunk.js";import{F as Ot}from"../../../sim-CXl4t_Dr.chunk.js";import{P as Ft}from"../../../sim-C6q9Dai4.chunk.js";import"../../../inputs-BUFP-jtN.chunk.js";import"../../../apl_utils-YVupLIXZ.chunk.js";import"../../../inputs-BgOPpQxo.chunk.js";import"../../../inputs-DlON7Lc4.chunk.js";import"../../../inputs-C0vOje3m.chunk.js";import"../../../inputs-B0VPvBmh.chunk.js";import"../../../inputs-B99wk-HU.chunk.js";import"../../../inputs-CZLToEzm.chunk.js";import"../../../inputs-Dtkm9A1w.chunk.js";import"../../../inputs-CLkV5ght.chunk.js";const jt={[e.SpecBloodDeathKnight]:(t,e)=>new nt(t,e),[e.SpecFrostDeathKnight]:(t,e)=>new ot(t,e),[e.SpecUnholyDeathKnight]:(t,e)=>new lt(t,e),[e.SpecBalanceDruid]:(t,e)=>new ct(t,e),[e.SpecFeralDruid]:(t,e)=>new ht(t,e),[e.SpecRestorationDruid]:(t,e)=>new dt(t,e),[e.SpecBeastMasteryHunter]:(t,e)=>new mt(t,e),[e.SpecMarksmanshipHunter]:(t,e)=>new pt(t,e),[e.SpecSurvivalHunter]:(t,e)=>new ut(t,e),[e.SpecArcaneMage]:(t,e)=>new gt(t,e),[e.SpecFireMage]:(t,e)=>new ft(t,e),[e.SpecFrostMage]:(t,e)=>new yt(t,e),[e.SpecHolyPaladin]:(t,e)=>new Pt(t,e),[e.SpecProtectionPaladin]:(t,e)=>new Et(t,e),[e.SpecRetributionPaladin]:(t,e)=>new St(t,e),[e.SpecDisciplinePriest]:(t,e)=>new kt(t,e),[e.SpecHolyPriest]:(t,e)=>new It(t,e),[e.SpecShadowPriest]:(t,e)=>new bt(t,e),[e.SpecAssassinationRogue]:(t,e)=>new Dt(t,e),[e.SpecCombatRogue]:(t,e)=>new vt(t,e),[e.SpecSubtletyRogue]:(t,e)=>new wt(t,e),[e.SpecElementalShaman]:(t,e)=>new Ct(t,e),[e.SpecEnhancementShaman]:(t,e)=>new Tt(t,e),[e.SpecRestorationShaman]:(t,e)=>new Rt(t,e),[e.SpecAfflictionWarlock]:(t,e)=>new Ut(t,e),[e.SpecDemonologyWarlock]:(t,e)=>new xt(t,e),[e.SpecDestructionWarlock]:(t,e)=>new At(t,e),[e.SpecArmsWarrior]:(t,e)=>new Lt(t,e),[e.SpecFuryWarrior]:(t,e)=>new Ot(t,e),[e.SpecProtectionWarrior]:(t,e)=>new Ft(t,e)},Mt=s.naturalOrder.map((t=>Object.values(t.specs))).flat().map((t=>W(t.specID))).map((t=>t.raidSimPresets)).flat(),$t=[...new Set(Mt.map((t=>t.spec)))];class Bt extends N{constructor(t,e){super(t,e,"JSON Import",!0),this.simUI=e,this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t"}onImport(t){const e=n.fromJsonString(t,{ignoreUnknownFields:!0});this.simUI.fromProto(o.nextEventID(),e),this.close()}}class Ht extends V{constructor(t,e){super(t,e,{title:"JSON Export",allowDownload:!0}),this.simUI=e,this.init()}getData(){return JSON.stringify(n.toJson(this.simUI.toProto()),null,2)}}class Wt extends N{constructor(t,e){super(t,e,"WCL Import",!1),this.queryCounter=0,this.token="",this.simUI=e,this.textElem.classList.add("small-textarea"),this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImports the entire raid from a WCL report.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else the first fight in the report will be used.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tThe following are imported directly from the report:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Player Name</li>\n\t\t\t\t\t<li>Equipment (items, enchants, and gems)</li>\n\t\t\t\t\t<li>Faction (Alliance / Horde)</li>\n\t\t\t\t\t<li>Encounter: If the import link has a fight ID we try to match with a preset Encounter. Note that many Encounters are still unimplemented.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not available directly from the report data, but we try to infer them:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Talents: Log data only gives us the tree summary (e.g. '51/20/0') so we match this with the closest preset talent build.</li>\n\t\t\t\t\t<li>Glyphs: Glyphs are absent from log data, but we pair them with the inferred Talents.</li>\n\t\t\t\t\t<li>Race: Inferred from Race-specific abilties used in any fight if possible, or defaults to Spec-specific Race.</li>\n\t\t\t\t\t<li>Professions: Inferred from profession-locked items/enchants/gems.</li>\n\t\t\t\t\t<li>Buff assignments (Innervate, Unholy Frenzy, etc): Inferred from casts.</li>\n\t\t\t\t\t<li>Party Composition: Inferred from party-only effects, such as Prayer of Healing, or Vampiric Touch.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not imported, and instead use spec-specific defaults:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Rotation / Spec-specific options</li>\n\t\t\t\t\t<li>Consumes</li>\n\t\t\t\t\t<li>Paladin Blessings</li>\n\t\t\t\t</ul>\n\t\t\t</p>\n\t\t"}async getWCLBearerToken(){if(""==this.token){const t=await fetch("https://classic.warcraftlogs.com/oauth/token",{method:"POST",headers:{Authorization:"Basic "+btoa("963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3")},body:new URLSearchParams({grant_type:"client_credentials"})}),e=await t.json();this.token=e.access_token}return this.token}async queryWCL(t){const e={"Content-Type":"application/json",Authorization:`Bearer ${await this.getWCLBearerToken()}`,Accept:"application/json"},s=`https://classic.warcraftlogs.com/api/v2/client?query=${t}`;this.queryCounter++;const i=await fetch(encodeURI(s),{method:"GET",headers:e}),r=await i.json();if(r?.errors?.length){const e=r.errors.map((t=>t.message)).join("\n");throw new Error(`GraphQL error: ${e}\n\nQuery: ${t}`)}return console.debug(`WCL query: ${t}\n\nResult: ${JSON.stringify(r)}`),r}async parseURL(t){const e=t.match(/classic\.warcraftlogs\.com\/reports\/([a-zA-Z0-9:]+)\/?(#.*fight=((\d+)|(last)))?/);if(!e)throw new Error(`Invalid WCL URL ${t}, must look like "classic.warcraftlogs.com/reports/XXXX"`);const s={reportID:e[1],fightID:""};if(e[2]&&e[3]&&"last"!=e[3])s.fightID=e[3];else{const t=`{\n\t\t\t\treportData {\n\t\t\t\t\treport(code: "${s.reportID}") {\n\t\t\t\t\t\tfights(killType: Kills, translate: true) {\n\t\t\t\t\t\t\tid, name\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}`,i=(await this.queryWCL(t)).data.reportData.report.fights;"last"==e[3]?s.fightID=String(i[i.length-1].id):s.fightID=String(i[0].id)}return console.debug(`Importing WCL report: ${JSON.stringify(s)}`),s}async getRateLimit(){return(await this.queryWCL("{\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }")).data.rateLimitData}async onImport(t){this.importButton.disabled=!0,this.rootElem.style.cursor="wait";try{await this.doImport(t)}catch(e){console.error(e),alert("Failed import from WCL: "+e)}this.importButton.disabled=!1,this.rootElem.style.removeProperty("cursor")}async doImport(t){if(!t.length)throw new Error("No import link provided!");const e=await this.parseURL(t);await this.getRateLimit();const s=`{\n\t\t\treportData {\n\t\t\t\treport(code: "${e.reportID}") {\n\t\t\t\t\tguild {\n\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t}\n\t\t\t\t\tplayerDetails: table(fightIDs: [${e.fightID}], dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\tcombatantInfoEvents: events(fightIDs: [${e.fightID}], dataType:CombatantInfo, limit: 50) { data }\n\t\t\t\t\tfights(fightIDs: [${e.fightID}]) {\n\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t}\n\n\t\t\t\t\treportCastEvents: events(dataType:Casts, endTime: 99999999, filterExpression: "${[qt,Jt].flat().map((t=>t.id)).map((t=>`ability.id = ${t}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightCastEvents: events(fightIDs: [${e.fightID}], dataType:Casts, filterExpression: "${[Kt].flat().map((t=>t.id)).map((t=>`ability.id = ${t}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightHealEvents: events(fightIDs: [${e.fightID}], dataType:Healing, filterExpression: "${[Gt,zt].flat().map((t=>t.id)).map((t=>`ability.id = ${t}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tmanaTideTotem: events(fightIDs: [${e.fightID}], dataType:Resources, filterExpression: "ability.id = 39609", limit: 100) { data }\n\t\t\t\t}\n\t\t\t}\n\t\t}`,i=(await this.queryWCL(s)).data.reportData.report,r=i.playerDetails.data.entries;o.freezeAllAndDo((()=>{const t=o.nextEventID(),e=r.map((e=>new Nt(e,this.simUI,t)));this.inferRace(t,i,e),this.inferProfessions(t,i,e),this.inferAssignments(t,i,e),this.inferPartyComposition(t,i,e);const s=e.filter((t=>t.player.getClass()==a.ClassPaladin)).length,c=n.create({encounter:this.getEncounterProto(i),raid:this.getRaidProto(e),blessings:l(s)});this.simUI.clearRaid(t),this.simUI.fromProto(t,c)})),this.close()}inferRace(t,e,s){s.forEach((e=>e.player.setRace(t,i.RaceUnknown)));let r=e.guild?.faction?.id||this.simUI.raidPicker?.getCurrentFaction()||c.Horde;e.combatantInfoEvents.data.forEach((e=>{e.auras.filter((t=>28878==t.ability)).forEach((e=>{const a=s.find((t=>t.id==e.source));a&&a.player.getRace()!=i.RaceDraenei&&(console.log(`Inferring player ${a.name} has race ${h.get(i.RaceDraenei)} from Heroic Presence aura event`),a.player.setRace(t,i.RaceDraenei),r=c.Alliance)}))}));const a=d(e.reportCastEvents.data,(t=>String(t.abilityGameID)));qt.forEach((e=>{(a[e.id]||[]).forEach((i=>{const a=s.find((t=>t.id==i.sourceID));a&&(console.log(`Inferring player ${a.name} has race ${h.get(e.race)} from ${e.name} event`),a.player.setRace(t,e.race),r=m[e.race])}))})),s.forEach((e=>{e.player.getRace()==i.RaceUnknown&&e.player.setRace(t,e.preset.defaultFactionRaces[r])}))}inferProfessions(t,e,s){const i=d(e.reportCastEvents.data,(t=>String(t.abilityGameID)));Jt.forEach((t=>{(i[t.id]||[]).forEach((e=>{const i=s.find((t=>t.id==e.sourceID));i&&!i.inferredProfessions.includes(t.profession)&&(console.log(`Inferring player ${i.name} has profession ${p.get(t.profession)} from ${t.name} event`),i.inferredProfessions.push(t.profession))}))})),s.forEach((e=>{let s=u(e.inferredProfessions.concat(e.player.getGear().getProfessionRequirements()));0==s.length?s=[r.Engineering,r.Jewelcrafting]:1==s.length&&(s[0]!=r.Engineering?s.push(r.Engineering):s.push(r.Jewelcrafting)),e.player.setProfessions(t,s)}))}inferAssignments(t,e,s){const i=d(e.fightCastEvents.data,(t=>String(t.abilityGameID)));Kt.forEach((e=>{(i[e.id]||[]).forEach((i=>{const r=s.find((t=>t.id==i.sourceID)),a=s.find((t=>t.id==i.targetID));if(r&&a&&r.player.getClass()==e.class){const s=e.applyFunc(r.player,a.toUnitReference());r.player.setSpecOptions(t,s),console.log(`Inferring player ${r.name} is targeting ${a.name} with ${e.name} from cast event`)}}))}))}inferPartyComposition(t,e,s){const i=(t,e,s)=>{(t.addPlayerInParty(e)||e.addPlayerInParty(t))&&console.log(`Inferring players ${t.name} and ${e.name} in same party from ${s} event`)},r=d(e.fightHealEvents.data,(t=>String(t.abilityGameID)));Gt.forEach((t=>{(r[t.id]||[]).forEach((e=>{const r=s.find((t=>t.id==e.sourceID)),a=s.find((t=>t.id==e.targetID));r&&a&&i(r,a,t.name)}))})),zt.forEach((t=>{const e=r[t.id]||[],a=d(e,(t=>String(t.timestamp)+String(t.sourceID)));for(const[r,n]of Object.entries(a)){const e=n.map((t=>s.find((e=>e.id==t.targetID))));for(let s=0;s<e.length;s++)for(let r=0;r<e.length;r++)s!=r&&e[s]&&e[r]&&i(e[s],e[r],t.name)}})),e.combatantInfoEvents.data.forEach((t=>{const e=s.find((e=>e.id==t.sourceID));t.auras.filter((t=>28878==t.ability)).forEach((t=>{const r=s.find((e=>e.id==t.source));r&&e&&i(r,e,"Heroic Presence")}))}));let a=s.filter((t=>t.playersInParty.length>0)),n=0;for(;a.length>0;){let t=[a[0]].concat(a[0].playersInParty),e=0;for(;t.length!=e;)e=t.length,t=u(t.map((t=>[t].concat(t.playersInParty))).flat());const s=n;n++,t.forEach(((t,e)=>{t.raidIndex=5*s+e})),a=a.filter((e=>!t.includes(e)))}const o=[...Array(40).keys()];s.filter((t=>-1==t.raidIndex)).forEach((t=>{const e=o.find((t=>!s.some((e=>e.raidIndex==t))))??-1;if(-1==e)throw new Error("Invalid next idx");t.raidIndex=e}))}getEncounterProto(t){const e=t.fights[0],s=g.create({duration:(e.endTime-e.startTime)/1e3,targets:[]}),i=this.simUI.sim.db.getAllPresetEncounters().find((t=>t.path.includes(e.name)));return i&&i.targets.length&&i.targets.map((t=>t.target)).filter((t=>void 0!==t)).forEach((t=>s.targets.push(t))),0===s.targets.length&&s.targets.push(q.defaultTargetProto()),s}getRaidProto(t){const e=f.create({parties:[...new Array(J).keys()].map((t=>y.create({players:[...new Array(5).keys()].map((t=>P.create()))})))});return t.forEach((t=>{const s=t.raidIndex%5,i=(t.raidIndex-s)/5,r=t.player.toProto();e.parties[i].players[s]=r,E(r).isTankSpec&&e.tanks.push(t.toUnitReference())})),e}}class Nt{constructor(t,e,s){this.raidIndex=-1,this.inferredProfessions=[],this.playersInParty=[],this.simUI=e,this.data=t,this.name=t.name,this.id=t.id,this.type=t.type;const i=t.icon.split("-")[1];this.fullType=this.type+i,console.log(`WCL spec: ${this.fullType}`);const a=Vt[this.fullType]??null;if(null==a)throw new Error("Player type not implemented: "+this.fullType);if(this.spec=a,this.player=new K(S.fromProto(this.spec),e.sim),this.preset=Nt.getMatchingPreset(a,t.talents),void 0===this.preset)throw new Error("Could not find matching preset: "+JSON.stringify({name:this.name,type:this.fullType,talents:t.talents}).toString());this.player.applySharedDefaults(s),this.player.setTalentsString(s,this.preset.talents.talentsString),this.player.setGlyphs(s,this.preset.talents.glyphs),this.player.setConsumes(s,this.preset.consumes),this.player.setSpecOptions(s,this.preset.specOptions),this.player.setProfessions(s,[r.Engineering,r.Jewelcrafting]),this.player.setName(s,t.name),this.player.setGear(s,e.sim.db.lookupEquipmentSpec(k.create({items:t.gear.map((t=>I.create({id:t.id,enchant:t.permanentEnchant,gems:t.gems?t.gems.map((t=>t.id)):[]})))})))}static getMatchingPreset(t,e){const s=Mt.filter((e=>e.spec==t));let i=0;if(s&&s.length>1){let t=999;s.forEach(((s,r)=>{const a=b(s.talents.talentsString),n=a.reduce(((t,s,i)=>t+Math.abs(e[i]?.guid-a[i])),0);n<t&&(i=r,t=n)}))}return s[i]}toUnitReference(){return D.create({type:v.Player,index:this.raidIndex})}addPlayerInParty(t){return t!=this&&!this.playersInParty.includes(t)&&(this.playersInParty.push(t),!0)}}const Vt={DeathKnightBlood:e.SpecBloodDeathKnight,DeathKnightFrost:e.SpecFrostDeathKnight,DeathKnightUnholy:e.SpecUnholyDeathKnight,DruidBalance:e.SpecBalanceDruid,DruidFeral:e.SpecFeralDruid,DruidRestoration:e.SpecRestorationDruid,HunterBeastMastery:e.SpecBeastMasteryHunter,HunterMarksmanship:e.SpecMarksmanshipHunter,HunterSurvival:e.SpecSurvivalHunter,MageArcane:e.SpecArcaneMage,MageFire:e.SpecFireMage,MageFrost:e.SpecFrostMage,PaladinHoly:e.SpecHolyPaladin,PaladinJusticar:e.SpecProtectionPaladin,PaladinProtection:e.SpecProtectionPaladin,PaladinRetribution:e.SpecRetributionPaladin,PriestHoly:e.SpecHolyPriest,PriestDiscipline:e.SpecDisciplinePriest,PriestShadow:e.SpecShadowPriest,RogueAssassination:e.SpecAssassinationRogue,RogueCombat:e.SpecCombatRogue,RogueSubtlety:e.SpecSubtletyRogue,ShamanElemental:e.SpecElementalShaman,ShamanEnhancement:e.SpecEnhancementShaman,ShamanRestoration:e.SpecRestorationShaman,WarlockDestruction:e.SpecDestructionWarlock,WarlockAffliction:e.SpecAfflictionWarlock,WarlockDemonology:e.SpecDemonologyWarlock,WarriorArms:e.SpecArmsWarrior,WarriorFury:e.SpecFuryWarrior,WarriorProtection:e.SpecProtectionWarrior},qt=[{id:25046,name:"Arcane Torrent (Energy)",race:i.RaceBloodElf},{id:28730,name:"Arcane Torrent (Mana)",race:i.RaceBloodElf},{id:50613,name:"Arcane Torrent (Runic Power)",race:i.RaceBloodElf},{id:26297,name:"Berserking",race:i.RaceTroll},{id:20572,name:"Blood Fury (AP)",race:i.RaceOrc},{id:33697,name:"Blood Fury (AP+SP)",race:i.RaceOrc},{id:33702,name:"Blood Fury (SP)",race:i.RaceOrc},{id:20589,name:"Escape Artist",race:i.RaceGnome},{id:20594,name:"Stoneform",race:i.RaceDwarf},{id:20549,name:"War Stomp",race:i.RaceTauren},{id:7744,name:"Will of the Forsaken",race:i.RaceUndead},{id:59752,name:"Will to Survive",race:i.RaceHuman}],Jt=[{id:55503,name:"Lifeblood",profession:r.Herbalism},{id:50305,name:"Skinning",profession:r.Skinning}],Kt=[{id:29166,name:"Innervate",class:a.ClassDruid,applyFunc:(t,e)=>{const s=t.getSpecOptions();return s.classOptions.innervateTarget=e,s}},{id:10060,name:"Power Infusion",class:a.ClassPriest,applyFunc:(t,e)=>{const s=t.getSpecOptions();return s.powerInfusionTarget=e,s}},{id:57933,name:"Tricks of the Trade",class:a.ClassRogue,applyFunc:(t,e)=>{const s=t.getSpecOptions();return s.classOptions.tricksOfTheTradeTarget=e,s}},{id:49016,name:"Unholy Frenzy",class:a.ClassDeathKnight,applyFunc:(t,e)=>{const s=t.getSpecOptions();return s.unholyFrenzyTarget=e,s}}],Gt=[{id:52042,name:"Healing Stream Totem"},{id:48076,name:"Holy Nova"},{id:48445,name:"Tranquility"},{id:15290,name:"Vampiric Embrace"}],zt=[{id:48072,name:"Prayer of Healing"}],_t=-1,Xt=Math.min(...Mt.map((t=>Math.max(...Object.keys(t.defaultGear[c.Alliance]).map((t=>parseInt(t)))))));class Qt extends w{constructor(t,e){super(t,"raid-picker-root"),this.currentDragPlayer=null,this.currentDragPlayerFromIndex=_t,this.currentDragType=1,this.currentDragParty=null,this.raidSimUI=e,this.raid=e.sim.raid;const s=document.createElement("div");s.classList.add("raid-controls"),this.rootElem.appendChild(s),this.newPlayerPicker=new ee(this.rootElem,this),new G(s,this.raidSimUI.sim.raid,{label:"Raid Size",labelTooltip:"Number of players participating in the sim.",values:[{name:"5",value:1},{name:"10",value:2},{name:"25",value:5},{name:"40",value:8}],changedEvent:t=>t.numActivePartiesChangeEmitter,getValue:t=>t.getNumActiveParties(),setValue:(t,e,s)=>{e.setNumActiveParties(t,s)}}),new G(s,this.newPlayerPicker,{label:"Default Faction",labelTooltip:"Default faction for newly-created players.",values:[{name:"Alliance",value:c.Alliance},{name:"Horde",value:c.Horde}],changedEvent:t=>this.raid.sim.factionChangeEmitter,getValue:t=>this.raid.sim.getFaction(),setValue:(t,e,s)=>{this.raid.sim.setFaction(t,s)}}),new G(s,this.newPlayerPicker,{label:"Default Gear",labelTooltip:"Newly-created players will start with approximate BIS gear from this phase.",values:[...Array(Xt).keys()].map((t=>{const e=t+1;return{name:"Phase "+e,value:e}})),changedEvent:t=>this.raid.sim.phaseChangeEmitter,getValue:t=>this.raid.sim.getPhase(),setValue:(t,e,s)=>{this.raid.sim.setPhase(t,s)}});const i=document.createElement("div");i.classList.add("parties-container"),this.rootElem.appendChild(i),this.partyPickers=this.raid.getParties().map(((t,e)=>new Zt(i,t,e,this)));const r=()=>{this.partyPickers.forEach((t=>{t.index<this.raidSimUI.sim.raid.getNumActiveParties()?t.rootElem.classList.add("active"):t.rootElem.classList.remove("active")}))};this.raidSimUI.sim.raid.numActivePartiesChangeEmitter.on(r),r(),this.rootElem.ondragend=t=>{this.clearDragPlayer(),this.clearDragParty()}}getCurrentFaction(){return this.raid.sim.getFaction()}getCurrentPhase(){return this.raid.sim.getPhase()}getPlayerPicker(t){return this.partyPickers[Math.floor(t/z)].playerPickers[t%z]}getPlayerPickers(){return[...new Array(25).keys()].map((t=>this.getPlayerPicker(t)))}setDragPlayer(t,e,s){if(this.clearDragPlayer(),this.currentDragPlayer=t,this.currentDragPlayerFromIndex=e,this.currentDragType=s,e!=_t){this.getPlayerPicker(e).rootElem.classList.add("dragfrom")}}clearDragPlayer(){if(this.currentDragPlayerFromIndex!=_t){this.getPlayerPicker(this.currentDragPlayerFromIndex).rootElem.classList.remove("dragfrom")}this.currentDragPlayer=null,this.currentDragPlayerFromIndex=_t,this.currentDragType=1}setDragParty(t){this.currentDragParty=t,t.rootElem.classList.add("dragfrom")}clearDragParty(){this.currentDragParty&&(this.currentDragParty.rootElem.classList.remove("dragfrom"),this.currentDragParty=null)}}class Zt extends w{constructor(t,e,s,i){super(t,"party-picker-root"),this.party=e,this.index=s,this.raidPicker=i,this.rootElem.setAttribute("draggable","true"),this.rootElem.innerHTML=`\n\t\t\t<div class="party-header">\n\t\t\t\t<label class="party-label form-label">Group ${s+1}</label>\n\t\t\t\t<div class="party-results">\n\t\t\t\t\t<span class="party-results-dps"></span>\n\t\t\t\t\t<span class="party-results-reference-delta"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="players-container">\n\t\t\t</div>\n\t\t`;const r=this.rootElem.getElementsByClassName("players-container")[0];this.playerPickers=[...Array(z).keys()].map((t=>new Yt(r,this,t)));const a=this.rootElem.getElementsByClassName("party-results-dps")[0],n=this.rootElem.getElementsByClassName("party-results-reference-delta")[0];this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const t=this.raidPicker.raidSimUI.getCurrentData(),e=this.raidPicker.raidSimUI.getReferenceData(),s=t?.simResult.raidMetrics.parties[this.index]?.dps.avg||0,i=e?.simResult.raidMetrics.parties[this.index]?.dps.avg||0;if(0==s&&0==i)return a.textContent="",void(n.textContent="");a.textContent=`${s.toFixed(1)} DPS`,e?C(n,i,s,1):n.textContent=""})),this.rootElem.ondragstart=t=>{t.target==this.rootElem&&(t.dataTransfer.dropEffect="move",t.dataTransfer.effectAllowed="all",this.raidPicker.setDragParty(this))};let l=0;this.rootElem.ondragenter=t=>{t.preventDefault(),this.raidPicker.currentDragParty&&(l++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=t=>{t.preventDefault(),this.raidPicker.currentDragParty&&(l--,l<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=t=>{t.preventDefault()},this.rootElem.ondrop=t=>{if(!this.raidPicker.currentDragParty)return;t.preventDefault(),l=0,this.rootElem.classList.remove("dragto");const e=o.nextEventID();o.freezeAllAndDo((()=>{const t=this.raidPicker.currentDragParty;for(let s=0;s<z;s++){const i=t.playerPickers[s],r=this.playerPickers[s],a=i.player,n=r.player;i.setPlayer(e,n,3),r.setPlayer(e,a,3)}})),this.raidPicker.clearDragParty()}}}class Yt extends w{constructor(t,e,s){super(t,"player-picker-root"),this.index=s,this.raidIndex=e.index*z+s,this.player=null,this.partyPicker=e,this.raidPicker=e.raidPicker,this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null,this.rootElem.classList.add("player"),this.partyPicker.party.compChangeEmitter.on((t=>{const e=this.partyPicker.party.getPlayer(this.index);e!=this.player&&this.setPlayer(t,e,0)})),this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const t=this.raidPicker.raidSimUI.getCurrentData(),e=this.raidPicker.raidSimUI.getReferenceData(),s=t?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0,i=e?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0;this.player&&(this.resultsElem?.classList.remove("hide"),this.dpsResultElem.textContent=`${s.toFixed(1)} DPS`,e&&C(this.referenceDeltaElem,i,s,1))}));let i=0;this.rootElem.ondragenter=t=>{t.preventDefault(),this.raidPicker.currentDragParty||(i++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=t=>{t.preventDefault(),this.raidPicker.currentDragParty||(i--,i<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=t=>t.preventDefault(),this.rootElem.ondrop=t=>{if(this.raidPicker.currentDragParty)return;const e=t.dataTransfer.getData("text/plain");t.preventDefault(),i=0,this.rootElem.classList.remove("dragto");const s=o.nextEventID();o.freezeAllAndDo((()=>{if(null==this.raidPicker.currentDragPlayer&&0==e.length)return;if(this.raidPicker.currentDragPlayerFromIndex==this.raidIndex)return void this.raidPicker.clearDragPlayer();const t=this.raidPicker.currentDragType;if(this.raidPicker.currentDragPlayerFromIndex!=_t){const e=this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);3==t?e.setPlayer(s,this.player,t):2==t&&e.setPlayer(s,null,t)}else if(null==this.raidPicker.currentDragPlayer){const t=atob(e),i=new Uint8Array(t.length);for(let e=0;e<i.length;e++)i[e]=t.charCodeAt(e);const r=P.fromBinary(i),a=new K(E(r),this.raidPicker.raidSimUI.sim);a.fromProto(s,r),this.raidPicker.currentDragPlayer=a}4==t?this.setPlayer(s,this.raidPicker.currentDragPlayer.clone(s),t):this.setPlayer(s,this.raidPicker.currentDragPlayer,t),this.raidPicker.clearDragPlayer()}))},this.update()}setPlayer(t,s,i){s!=this.player&&(o.freezeAllAndDo((()=>{this.player=s,s?(this.partyPicker.party.setPlayer(t,this.index,s),1==i&&function(t,s,i){if(s.getPlayerSpec().isTankSpec){const e=i.getTanks(),r=e.findIndex((t=>null==i.getPlayerFromUnitReference(t)));-1==r?e.length<3&&i.setTanks(t,e.concat([s.makeUnitReference()])):(e[r]=s.makeUnitReference(),i.setTanks(t,e))}if(s.getSpec()==e.SpecBalanceDruid){const e=s.getSpecOptions();e.classOptions.innervateTarget=U(s.getRaidIndex()),s.setSpecOptions(t,e)}else if(s.getSpec()==e.SpecArcaneMage){const e=s.getSpecOptions();e.focusMagicTarget=U(s.getRaidIndex()),s.setSpecOptions(t,e)}}(t,s,this.raidPicker.raid)):(this.partyPicker.party.setPlayer(t,this.index,s),this.partyPicker.party.compChangeEmitter.emit(t))})),this.update())}update(){if(null==this.player)this.rootElem.className="player-picker-root player",this.rootElem.innerHTML="",this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null;else{const t=s.getCssClass(this.player.getPlayerClass());this.rootElem.className=`player-picker-root player bg-${t}-dampened`,this.rootElem.innerHTML=`\n\t\t\t\t<div class="player-label">\n\t\t\t\t\t<img class="player-icon" src="${this.player.getSpecIcon()}" draggable="true" />\n\t\t\t\t\t<div class="player-details">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclass="player-name text-${t}"\n\t\t\t\t\t\t\ttype="text"\n\t\t\t\t\t\t\tvalue="${this.player.getName()}"\n\t\t\t\t\t\t\tspellcheck="false"\n\t\t\t\t\t\t\tmaxlength="15"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div class="player-results hide">\n\t\t\t\t\t\t\t<span class="player-results-dps"></span>\n\t\t\t\t\t\t\t<span class="player-results-reference-delta"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="player-options">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-edit"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Click to Edit"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-edit fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-copy link-warning"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="true"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Drag to Copy"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-copy fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-delete link-danger"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Click to Delete"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-times fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t`,this.labelElem=this.rootElem.querySelector(".player-label"),this.iconElem=this.rootElem.querySelector(".player-icon"),this.nameElem=this.rootElem.querySelector(".player-name"),this.resultsElem=this.rootElem.querySelector(".player-results"),this.dpsResultElem=this.rootElem.querySelector(".player-results-dps"),this.referenceDeltaElem=this.rootElem.querySelector(".player-results-reference-delta"),this.bindPlayerEvents()}}bindPlayerEvents(){this.nameElem?.addEventListener("input",(t=>{this.player?.setName(o.nextEventID(),this.nameElem?.value||"")})),this.nameElem?.addEventListener("mousedown",(t=>{this.partyPicker.rootElem.setAttribute("draggable","false")})),this.nameElem?.addEventListener("mouseup",(t=>{this.partyPicker.rootElem.setAttribute("draggable","true")}));const e="Unnamed";this.nameElem?.addEventListener("focusout",(t=>{this.nameElem&&!this.nameElem.value&&(this.nameElem.value=e,this.player?.setName(o.nextEventID(),e))}));const s=(t,e)=>{if(null!=this.player){if(t.dataTransfer.dropEffect="move",t.dataTransfer.effectAllowed="all",this.player){const e=this.player.toProto(!0);t.dataTransfer.setData("text/plain",btoa(String.fromCharCode(...P.toBinary(e))))}this.raidPicker.setDragPlayer(this.player,this.raidIndex,e)}else t.preventDefault()},i=this.rootElem.querySelector(".player-edit"),r=this.rootElem.querySelector(".player-copy"),a=this.rootElem.querySelector(".player-delete");t.getOrCreateInstance(i),t.getOrCreateInstance(r);const n=t.getOrCreateInstance(a);this.iconElem.ondragstart=t=>{t.dataTransfer.setDragImage(this.rootElem,20,20),s(t,3)},i.onclick=t=>{new te(this.player)},r.ondragstart=t=>{t.dataTransfer.setDragImage(this.rootElem,20,20),s(t,4)},a.onclick=t=>{n.hide(),this.setPlayer(o.nextEventID(),null,0)}}}class te extends _{constructor(t){super(document.body,"player-editor-modal",{closeButton:{fixed:!0},header:!1}),this.rootElem.id="playerEditorModal",this.body.insertAdjacentHTML("beforeend",'\n\t\t\t<div class="player-editor within-raid-sim"></div>\n\t\t');const e=this.rootElem.getElementsByClassName("player-editor")[0];jt[t.getSpec()](e,t)}}class ee extends w{constructor(e,i){super(e,"new-player-picker-root"),this.raidPicker=i,T(a).forEach((e=>{if(e==a.ClassUnknown)return;const i=Mt.filter((t=>S.fromProto(t.spec).classID==e));if(0==i.length)return;const n=document.createElement("div");n.classList.add("class-presets-container",`bg-${s.getCssClass(s.fromProto(e))}-dampened`),this.rootElem.appendChild(n),i.forEach((e=>{const s=S.fromProto(e.spec),i=document.createElement("fragment");i.innerHTML=`\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="true"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="${e.tooltip??S.getFullSpecName(s)}"\n\t\t\t\t\t\tdata-bs-html="true"\n\t\t\t\t\t>\n\t\t\t\t\t\t<img class="preset-picker-icon player-icon" src="${e??s.getIcon("medium")}"/>\n\t\t\t\t\t</a>\n\t\t\t\t`;const a=i.children[0];n.appendChild(a),t.getOrCreateInstance(a),a.ondragstart=t=>{const i=o.nextEventID();o.freezeAllAndDo((()=>{const a=new Image;a.src=e.iconUrl??s.getIcon("medium"),t.dataTransfer.setDragImage(a,30,30),t.dataTransfer.setData("text/plain",""),t.dataTransfer.dropEffect="copy";const n=new K(s,this.raidPicker.raid.sim);n.applySharedDefaults(i),n.setRace(i,e.defaultFactionRaces[this.raidPicker.getCurrentFaction()]),n.setTalentsString(i,e.talents.talentsString),n.setGlyphs(i,e.talents.glyphs||R.create()),n.setSpecOptions(i,e.specOptions),n.setConsumes(i,e.consumes),n.setName(i,e.defaultName??s.friendlyName),n.setProfession1(i,e.otherDefaults?.profession1||r.Engineering),n.setProfession2(i,e.otherDefaults?.profession2||r.Jewelcrafting),n.setDistanceFromTarget(i,e.otherDefaults?.distanceFromTarget||0),this.raidPicker.raid.sim.waitForInit().then((()=>{const t=Math.min(this.raidPicker.getCurrentPhase(),Xt),s=e.defaultGear[this.raidPicker.getCurrentFaction()][t];n.setGear(i,this.raidPicker.raid.sim.db.lookupEquipmentSpec(s))})),this.raidPicker.setDragPlayer(n,_t,1)}))}}))}))}}class se extends X{constructor(t,e){super(t,e,{identifier:"raid-tab",title:"Raid"}),this.simUI=e,this.rootElem.classList.add("active","show"),this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-tab-left","tab-panel-left"),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-tab-right","tab-panel-right"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.simUI.raidPicker=new Qt(this.leftPanel,this.simUI);const t=new Q(this.rightPanel,this.simUI,{label:"Raid",header:{title:"Saved Raid Groups"},storageKey:this.simUI.getSavedRaidStorageKey(),getData:t=>x.create({raid:this.simUI.sim.raid.toProto(),blessings:this.simUI.blessingsPicker.getAssignments(),faction:this.simUI.sim.getFaction(),phase:this.simUI.sim.getPhase()}),setData:(t,e,s)=>{o.freezeAllAndDo((()=>{this.simUI.sim.raid.fromProto(t,s.raid||f.create()),this.simUI.blessingsPicker.setAssignments(t,s.blessings||A.create()),s.faction&&this.simUI.sim.setFaction(t,s.faction),s.phase&&this.simUI.sim.setPhase(t,s.phase)}))},changeEmitters:[this.simUI.changeEmitter,this.simUI.sim.changeEmitter],equals:(t,e)=>x.equals(t,e),toJson:t=>x.toJson(t),fromJson:t=>x.fromJson(t)});this.simUI.sim.waitForInit().then((()=>{t.loadUserData()}))}}class ie extends L{constructor(t,e,s,i){super(t,"raid-target-picker-root",s,i),this.rootElem.classList.add("dropdown"),this.config=i,this.raid=e,this.curPlayer=this.raid.getPlayerFromUnitReference(i.getValue(s)),this.curUnitReference=this.getInputValue(),this.rootElem.innerHTML='\n\t\t\t<a\n\t\t\t\tclass="raid-target-picker-button"\n\t\t\t\thref="javascript:void(0)"\n\t\t\t\trole="button"\n\t\t\t\tdata-bs-toggle="dropdown"\n\t\t\t></a>\n\t\t\t<div class="dropdown-menu"></div>\n    ',this.buttonElem=this.rootElem.querySelector(".raid-target-picker-button"),this.dropdownElem=this.rootElem.querySelector(".dropdown-menu"),this.buttonElem.addEventListener("click",(t=>t.preventDefault())),this.currentOptions=[],this.updateOptions(o.nextEventID()),i.compChangeEmitter.on((t=>this.updateOptions(t))),this.init()}makeTargetOptions(){return[{player:null,isDropdown:!0},...this.raid.getPlayers().filter((t=>null!=t)).map((t=>({player:t,isDropdown:!0})))]}updateOptions(t){this.currentOptions=this.makeTargetOptions(),this.dropdownElem.innerHTML="",this.currentOptions.forEach((t=>this.dropdownElem.appendChild(this.makeOption(t))));const e=this.curUnitReference;this.curUnitReference=this.getInputValue(),D.equals(e,this.curUnitReference)?this.setInputValue(this.curUnitReference):this.inputChanged(t)}makeOption(t){const e=ie.makeOptionElem(t);return e.addEventListener("click",(e=>{e.preventDefault(),this.curPlayer=t.player,this.curUnitReference=this.getInputValue(),this.inputChanged(o.nextEventID())})),e}getInputElem(){return this.buttonElem}getInputValue(){return this.curPlayer?this.curPlayer.makeUnitReference():O()}setInputValue(t){this.curUnitReference=D.clone(t),this.curPlayer=this.raid.getPlayerFromUnitReference(this.curUnitReference);const e=this.currentOptions.find((t=>t.player==this.curPlayer));e&&(this.buttonElem.innerHTML=ie.makeOptionElem({player:e.player}).outerHTML)}static makeOptionElem(t){const e=t.player?s.getCssClass(t.player.getPlayerClass()):"",i=document.createElement("fragment");return i.innerHTML=`\n\t\t\t<div class="player ${e?`bg-${e}-dampened`:""}">\n\t\t\t\t<div class="player-label">\n\t\t\t\t\t${t.player?`<img class="player-icon" src="${t.player.getSpecIcon()}" draggable="false"/>`:""}\n\t\t\t\t\t<div class="player-details">\n\t\t\t\t\t\t<span class="player-name ${e?`text-${e}`:""}">\n\t\t\t\t\t\t\t${t.player?t.player.getName():"Unassigned"}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,t.isDropdown&&(i.innerHTML=`\n\t\t\t\t<a class="dropdown-option" href="javascript:void(0) role="button">${i.innerHTML}</a>\n\t\t\t`),i.children[0]}}class re extends w{constructor(t,e){super(t,"assignments-picker-root"),this.changeEmitter=new o,this.raidSimUI=e,this.innervatesPicker=new ne(this.rootElem,e),this.powerInfusionsPicker=new oe(this.rootElem,e),this.tricksOfTheTradesPicker=new le(this.rootElem,e),this.focusMagicsPicker=new ce(this.rootElem,e)}}class ae extends w{constructor(t,e){super(t,"assigned-buff-picker-root"),this.changeEmitter=new o,this.raidSimUI=e,this.targetPickers=[],this.playersContainer=document.createElement("div"),this.playersContainer.classList.add("assigned-buff-container"),this.rootElem.appendChild(this.playersContainer),this.raidSimUI.changeEmitter.on((t=>this.update())),this.update()}update(){this.playersContainer.innerHTML=`\n\t\t\t<label class="assignmented-buff-label form-label">${this.getTitle()}</label>\n\t\t`;const t=this.getSourcePlayers();0==t.length?this.rootElem.classList.add("hide"):this.rootElem.classList.remove("hide"),this.targetPickers=t.map(((t,e)=>{const s=document.createElement("div");s.classList.add("assigned-buff-player","input-inline"),this.playersContainer.appendChild(s);const i=document.createElement("div");i.classList.add("raid-target-picker-root"),i.appendChild(ie.makeOptionElem({player:t,isDropdown:!1})),s.appendChild(i);const r=document.createElement("i");r.classList.add("assigned-buff-arrow","fa","fa-arrow-right"),s.appendChild(r);const a=new ie(s,this.raidSimUI.sim.raid,t,{extraCssClasses:["assigned-buff-target-picker"],noTargetLabel:"Unassigned",compChangeEmitter:this.raidSimUI.sim.raid.compChangeEmitter,changedEvent:t=>t.specOptionsChangeEmitter,getValue:t=>this.getPlayerValue(t),setValue:(t,e,s)=>this.setPlayerValue(t,e,s)}),n={player:t,targetPicker:a,targetPlayer:this.raidSimUI.sim.raid.getPlayerFromUnitReference(a.getInputValue())};return a.changeEmitter.on((t=>{n.targetPlayer=this.raidSimUI.sim.raid.getPlayerFromUnitReference(a.getInputValue())})),n}))}}class ne extends ae{getTitle(){return"Innervate"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isClass(a.ClassDruid)))}getPlayerValue(t){return t.getSpecOptions().classOptions?.innervateTarget||O()}setPlayerValue(t,e,s){const i=e.getSpecOptions();i.classOptions.innervateTarget=s,e.setSpecOptions(t,i)}}class oe extends ae{getTitle(){return"Power Infusion"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isSpec(e.SpecDisciplinePriest)&&t.getTalents().powerInfusion))}getPlayerValue(t){return t.getSpecOptions().powerInfusionTarget||O()}setPlayerValue(t,e,s){const i=e.getSpecOptions();i.powerInfusionTarget=s,e.setSpecOptions(t,i)}}class le extends ae{getTitle(){return"Tricks of the Trade"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isClass(a.ClassRogue)))}getPlayerValue(t){return t.getSpecOptions().classOptions.tricksOfTheTradeTarget||O()}setPlayerValue(t,e,s){const i=e.getSpecOptions();i.classOptions.tricksOfTheTradeTarget=s,e.setSpecOptions(t,i)}}class ce extends ae{getTitle(){return"Focus Magic"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isSpec(e.SpecArcaneMage)))}getPlayerValue(t){return t.getSpecOptions().focusMagicTarget||O()}setPlayerValue(t,e,s){const i=e.getSpecOptions();i.focusMagicTarget=s,e.setSpecOptions(t,i)}}class he extends w{constructor(t,e){super(t,"blessings-picker-root"),this.changeEmitter=new o,this.pickers=[],this.simUI=e,this.assignments=A.clone(l(4));const i=s.naturalOrder.map((t=>Object.values(t.specs))).flat().filter((t=>$t.includes(t.specID))),r=[...Array(4).keys()];i.map((t=>{const e=document.createElement("div");e.classList.add("blessings-picker-row"),this.rootElem.appendChild(e),e.append(this.buildSpecIcon(t));const s=document.createElement("div");return s.classList.add("blessings-picker-container"),e.appendChild(s),r.forEach((e=>{this.pickers[e]||this.pickers.push([]);const i=new Z(s,this,{extraCssClasses:["blessing-picker"],numColumns:1,values:[{color:F.hexColor,value:j.BlessingUnknown},{actionId:M.fromSpellId(20217),value:j.BlessingOfKings},{actionId:M.fromSpellId(19740),value:j.BlessingOfMight}],equals:(t,e)=>t==e,zeroValue:j.BlessingUnknown,enableWhen:t=>{const s=Math.min(this.simUI.getClassCount(a.ClassPaladin),4);return e<s},changedEvent:t=>t.changeEmitter,getValue:s=>s.assignments.paladins[e]?.blessings[t.specID]||j.BlessingUnknown,setValue:(s,i,r)=>{i.assignments.paladins[e].blessings[t.specID]!=r&&(i.assignments.paladins[e].blessings[t.specID]=r,this.changeEmitter.emit(s))}});this.pickers[e].push(i)})),e})),this.updatePickers(),this.simUI.compChangeEmitter.on((t=>this.updatePickers()))}updatePickers(){for(let t=0;t<4;t++)this.pickers[t].forEach((t=>t.update()))}buildSpecIcon(e){const s=document.createElement("fragment");s.innerHTML=`\n\t\t\t<div class="blessings-picker-spec">\n\t\t\t\t<img\n\t\t\t\t\tsrc="${e.getIcon("medium")}"\n\t\t\t\t\tclass="blessings-spec-icon"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t`;const i=s.querySelector(".blessings-spec-icon");return t.getOrCreateInstance(i,{title:e.friendlyName}),s.children[0]}getAssignments(){return A.clone(this.assignments)}setAssignments(t,e){this.assignments=A.clone(e),this.changeEmitter.emit(t)}}class de extends w{constructor(t,e){super(t,"tanks-picker-root"),this.raidSimUI=e;const s=this.raidSimUI.sim.raid;for(let i=0;i<4;i++){const t=document.createElement("div");t.classList.add("tank-picker-row","input-inline"),this.rootElem.appendChild(t);const e=document.createElement("label");e.textContent=0==i?"Main Tank":`Tank ${i+1}`,e.classList.add("tank-picker-label","form-label"),t.appendChild(e),new ie(t,s,s,{extraCssClasses:["tank-picker"],noTargetLabel:"Unassigned",compChangeEmitter:s.compChangeEmitter,changedEvent:t=>t.tanksChangeEmitter,getValue:t=>t.getTanks()[i]||O(),setValue:(t,e,s)=>{const r=e.getTanks();for(let a=0;a<i;a++)r[a]||r.push(O());r[i]=s,e.setTanks(t,r)}})}}}class me extends X{constructor(t,e){super(t,e,{identifier:"raid-settings-tab",title:"Settings"}),this.column1=this.buildColumn(1,"raid-settings-col"),this.column2=this.buildColumn(2,"raid-settings-col"),this.column3=this.buildColumn(3,"raid-settings-col"),this.simUI=e,this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-settings-tab-left","tab-panel-left"),this.leftPanel.appendChild(this.column1),this.leftPanel.appendChild(this.column2),this.leftPanel.appendChild(this.column3),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-settings-tab-right","tab-panel-right","within-raid-sim-hide"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.buildEncounterSettings(),this.buildConsumesSettings(),this.buildTankSettings(),this.buildAssignmentSettings(),this.buildOtherSettings(),this.buildBlessingsPicker(),this.buildSavedDataPickers()}buildEncounterSettings(){const t=new Y(this.column1,"encounter-settings",{header:{title:"Encounter"}});new tt(t.bodyElement,this.simUI.sim.encounter,{showExecuteProportion:!0},this.simUI)}buildConsumesSettings(){const t=new Y(this.column1,"consumes-settings",{header:{title:"Consumables"}}),e=document.createElement("div");e.classList.add("consumes-container"),t.bodyElement.appendChild(e)}buildOtherSettings(){new Y(this.column2,"other-settings",{header:{title:"Other"}})}buildTankSettings(){const t=new Y(this.column2,"tanks-settings",{header:{title:"Tanks"}});new de(t.bodyElement,this.simUI)}buildAssignmentSettings(){const t=new Y(this.column2,"assignments-settings",{header:{title:"External Buffs"}});new re(t.bodyElement,this.simUI)}buildBlessingsPicker(){const t=new Y(this.column3,"blessings-settings",{header:{title:"Blessings",tooltip:et}});this.simUI.blessingsPicker=new he(t.bodyElement,this.simUI),this.simUI.blessingsPicker.changeEmitter.on((t=>this.simUI.changeEmitter.emit(t)))}buildSavedDataPickers(){const t=new Q(this.rightPanel,this.simUI.sim.encounter,{label:"Encounter",header:{title:"Saved Encounters"},storageKey:this.simUI.getSavedEncounterStorageKey(),getData:t=>$.create({encounter:t.toProto()}),setData:(t,e,s)=>e.fromProto(t,s.encounter),changeEmitters:[this.simUI.sim.encounter.changeEmitter],equals:(t,e)=>$.equals(t,e),toJson:t=>$.toJson(t),fromJson:t=>$.fromJson(t)});this.simUI.sim.waitForInit().then((()=>{t.loadUserData()}))}makeBooleanRaidIconBuffInput(t,e,s){const i=this.simUI.sim.raid;return new st(t,i,{actionId:e,states:2,changedEvent:t=>t.buffsChangeEmitter,getValue:t=>t.getBuffs()[s],setValue:(t,e,i)=>{const r=e.getBuffs();r[s]=i,e.setBuffs(t,r)}})}}const pe=[];new class extends it{constructor(t,e){super(t,new rt,{cssClass:"raid-sim-ui",cssScheme:"raid",spec:null,simStatus:at,knownIssues:(e.knownIssues||[]).concat(pe)}),this.raidSimResultsManager=null,this.raidPicker=null,this.blessingsPicker=null,this.compChangeEmitter=new o,this.changeEmitter=new o,this.referenceChangeEmitter=new o,this.config=e,this.sim.raid.compChangeEmitter.on((t=>this.compChangeEmitter.emit(t))),[this.compChangeEmitter,this.sim.changeEmitter].forEach((t=>t.on((t=>this.changeEmitter.emit(t))))),this.changeEmitter.on((()=>this.recomputeSettingsLayout())),this.sim.setModifyRaidProto((t=>this.modifyRaidProto(t))),this.sim.waitForInit().then((()=>this.loadSettings())),this.addSidebarComponents(),this.addTopbarComponents(),this.addRaidTab(),this.addSettingsTab(),this.addDetailedResultsTab()}loadSettings(){const t=o.nextEventID();o.freezeAllAndDo((()=>{let e=!1;const s=window.localStorage.getItem(this.getSettingsStorageKey());if(null!=s)try{const i=n.fromJsonString(s);this.fromProto(t,i),e=!0}catch(i){console.warn("Failed to parse saved settings: "+i)}e||this.applyDefaults(t),this.changeEmitter.on((t=>{const e=n.toJsonString(this.toProto());window.localStorage.setItem(this.getSettingsStorageKey(),e)}))}))}addSidebarComponents(){this.raidSimResultsManager=B(this),this.raidSimResultsManager.changeEmitter.on((t=>this.referenceChangeEmitter.emit(t)))}addTopbarComponents(){this.simHeader.addImportLink("JSON",(t=>new Bt(this.rootElem,this))),this.simHeader.addImportLink("WCL",(t=>new Wt(this.rootElem,this))),this.simHeader.addExportLink("JSON",(t=>new Ht(this.rootElem,this)))}addRaidTab(){new se(this.simTabContentsContainer,this)}addSettingsTab(){new me(this.simTabContentsContainer,this)}addDetailedResultsTab(){this.addTab("Results","detailed-results-tab",'\n\t\t\t<div class="detailed-results">\n\t\t\t</div>\n\t\t'),new H(this.rootElem.getElementsByClassName("detailed-results")[0],this,this.raidSimResultsManager)}recomputeSettingsLayout(){window.dispatchEvent(new Event("resize"))}modifyRaidProto(t){const e=this.getClassCount(a.ClassPaladin),s=this.blessingsPicker.getAssignments();$t.forEach((i=>{const r=t.parties.map((t=>t.players.filter((t=>t.class!=a.ClassUnknown&&E(t)==i)))).flat();s.paladins.forEach(((s,a)=>{a>=e||(s.blessings[i]==j.BlessingOfKings?r.forEach((e=>t.buffs.blessingOfKings=!0)):s.blessings[i]==j.BlessingOfMight&&r.forEach((e=>t.buffs.blessingOfMight=!0)))}))}))}getCurrentData(){return this.raidSimResultsManager?this.raidSimResultsManager.getCurrentData():null}getReferenceData(){return this.raidSimResultsManager?this.raidSimResultsManager.getReferenceData():null}getActivePlayers(){return this.sim.raid.getActivePlayers()}getClassCount(t){return this.getActivePlayers().filter((e=>e.isClass(t))).length}applyDefaults(t){o.freezeAllAndDo((()=>{this.sim.raid.fromProto(t,f.create({numActiveParties:5})),this.sim.setPhase(t,1),this.sim.encounter.applyDefaults(t),this.sim.applyDefaults(t,!0,!0),this.sim.setShowDamageMetrics(t,!0)}))}toProto(){return n.create({settings:this.sim.toProto(),raid:this.sim.raid.toProto(!0),blessings:this.blessingsPicker.getAssignments(),encounter:this.sim.encounter.toProto()})}toLink(){const t=this.toProto();t.settings=void 0;const e=n.toBinary(t),s=pako.deflate(e,{to:"string"}),i=btoa(String.fromCharCode(...s)),r=new URL(window.location.href);return r.hash=i,r.toString()}fromProto(t,e){o.freezeAllAndDo((()=>{e.settings&&this.sim.fromProto(t,e.settings),this.sim.raid.fromProto(t,e.raid||f.create()),this.sim.encounter.fromProto(t,e.encounter||g.create()),this.blessingsPicker.setAssignments(t,e.blessings||A.create())}))}clearRaid(t){this.sim.raid.clear(t)}getStorageKey(t){return"__cata_raid__"+t}getSavedRaidStorageKey(){return this.getStorageKey("__savedRaid__")}}(document.body,{});
//# sourceMappingURL=index.html-S7pCpxzY.entry.js.map
