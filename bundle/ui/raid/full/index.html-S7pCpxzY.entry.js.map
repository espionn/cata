{"version":3,"file":"index.html-S7pCpxzY.entry.js","sources":["../../../../../../ui/raid/presets.ts","../../../../../../ui/raid/import_export.ts","../../../../../../ui/raid/raid_picker.ts","../../../../../../ui/raid/raid_tab.ts","../../../../../../ui/core/components/raid_target_picker.ts","../../../../../../ui/raid/assignments_picker.ts","../../../../../../ui/raid/blessings_picker.ts","../../../../../../ui/raid/tanks_picker.ts","../../../../../../ui/raid/settings_tab.ts","../../../../../../ui/raid/raid_sim_ui.ts","../../../../../../ui/raid/full/index.ts"],"sourcesContent":["import { IndividualSimUI, IndividualSimUIConfig, RaidSimPreset } from '../core/individual_sim_ui.js';\nimport { getSpecConfig, Player } from '../core/player.js';\nimport { PlayerClasses } from '../core/player_classes';\nimport { Spec } from '../core/proto/common.js';\nimport { BloodDeathKnightSimUI } from '../death_knight/blood/sim';\nimport { FrostDeathKnightSimUI } from '../death_knight/frost/sim';\nimport { UnholyDeathKnightSimUI } from '../death_knight/unholy/sim';\nimport { BalanceDruidSimUI } from '../druid/balance/sim.js';\nimport { FeralDruidSimUI } from '../druid/feral/sim.js';\nimport { RestorationDruidSimUI } from '../druid/restoration/sim.js';\nimport { BeastMasteryHunterSimUI } from '../hunter/beast_mastery/sim';\nimport { MarksmanshipHunterSimUI } from '../hunter/marksmanship/sim';\nimport { SurvivalHunterSimUI } from '../hunter/survival/sim';\nimport { ArcaneMageSimUI } from '../mage/arcane/sim';\nimport { FireMageSimUI } from '../mage/fire/sim';\nimport { FrostMageSimUI } from '../mage/frost/sim';\nimport { HolyPaladinSimUI } from '../paladin/holy/sim.js';\nimport { ProtectionPaladinSimUI } from '../paladin/protection/sim.js';\nimport { RetributionPaladinSimUI } from '../paladin/retribution/sim.js';\nimport { DisciplinePriestSimUI } from '../priest/discipline/sim';\nimport { HolyPriestSimUI } from '../priest/holy/sim';\nimport { ShadowPriestSimUI } from '../priest/shadow/sim.js';\nimport { AssassinationRogueSimUI } from '../rogue/assassination/sim';\nimport { CombatRogueSimUI } from '../rogue/combat/sim';\nimport { SubtletyRogueSimUI } from '../rogue/subtlety/sim';\nimport { ElementalShamanSimUI } from '../shaman/elemental/sim.js';\nimport { EnhancementShamanSimUI } from '../shaman/enhancement/sim.js';\nimport { RestorationShamanSimUI } from '../shaman/restoration/sim.js';\nimport { AfflictionWarlockSimUI } from '../warlock/affliction/sim';\nimport { DemonologyWarlockSimUI } from '../warlock/demonology/sim';\nimport { DestructionWarlockSimUI } from '../warlock/destruction/sim';\nimport { ArmsWarriorSimUI } from '../warrior/arms/sim';\nimport { FuryWarriorSimUI } from '../warrior/fury/sim';\nimport { ProtectionWarriorSimUI } from '../warrior/protection/sim';\n\nexport const specSimFactories: Partial<Record<Spec, (parentElem: HTMLElement, player: Player<any>) => IndividualSimUI<any>>> = {\n\t// Death Knight\n\t[Spec.SpecBloodDeathKnight]: (parentElem: HTMLElement, player: Player<any>) => new BloodDeathKnightSimUI(parentElem, player),\n\t[Spec.SpecFrostDeathKnight]: (parentElem: HTMLElement, player: Player<any>) => new FrostDeathKnightSimUI(parentElem, player),\n\t[Spec.SpecUnholyDeathKnight]: (parentElem: HTMLElement, player: Player<any>) => new UnholyDeathKnightSimUI(parentElem, player),\n\t// Druid\n\t[Spec.SpecBalanceDruid]: (parentElem: HTMLElement, player: Player<any>) => new BalanceDruidSimUI(parentElem, player),\n\t[Spec.SpecFeralDruid]: (parentElem: HTMLElement, player: Player<any>) => new FeralDruidSimUI(parentElem, player),\n\t[Spec.SpecRestorationDruid]: (parentElem: HTMLElement, player: Player<any>) => new RestorationDruidSimUI(parentElem, player),\n\t// Hunter\n\t[Spec.SpecBeastMasteryHunter]: (parentElem: HTMLElement, player: Player<any>) => new BeastMasteryHunterSimUI(parentElem, player),\n\t[Spec.SpecMarksmanshipHunter]: (parentElem: HTMLElement, player: Player<any>) => new MarksmanshipHunterSimUI(parentElem, player),\n\t[Spec.SpecSurvivalHunter]: (parentElem: HTMLElement, player: Player<any>) => new SurvivalHunterSimUI(parentElem, player),\n\t// Mage\n\t[Spec.SpecArcaneMage]: (parentElem: HTMLElement, player: Player<any>) => new ArcaneMageSimUI(parentElem, player),\n\t[Spec.SpecFireMage]: (parentElem: HTMLElement, player: Player<any>) => new FireMageSimUI(parentElem, player),\n\t[Spec.SpecFrostMage]: (parentElem: HTMLElement, player: Player<any>) => new FrostMageSimUI(parentElem, player),\n\t// Paladin\n\t[Spec.SpecHolyPaladin]: (parentElem: HTMLElement, player: Player<any>) => new HolyPaladinSimUI(parentElem, player),\n\t[Spec.SpecProtectionPaladin]: (parentElem: HTMLElement, player: Player<any>) => new ProtectionPaladinSimUI(parentElem, player),\n\t[Spec.SpecRetributionPaladin]: (parentElem: HTMLElement, player: Player<any>) => new RetributionPaladinSimUI(parentElem, player),\n\t// Priest\n\t[Spec.SpecDisciplinePriest]: (parentElem: HTMLElement, player: Player<any>) => new DisciplinePriestSimUI(parentElem, player),\n\t[Spec.SpecHolyPriest]: (parentElem: HTMLElement, player: Player<any>) => new HolyPriestSimUI(parentElem, player),\n\t[Spec.SpecShadowPriest]: (parentElem: HTMLElement, player: Player<any>) => new ShadowPriestSimUI(parentElem, player),\n\t// Rogue\n\t[Spec.SpecAssassinationRogue]: (parentElem: HTMLElement, player: Player<any>) => new AssassinationRogueSimUI(parentElem, player),\n\t[Spec.SpecCombatRogue]: (parentElem: HTMLElement, player: Player<any>) => new CombatRogueSimUI(parentElem, player),\n\t[Spec.SpecSubtletyRogue]: (parentElem: HTMLElement, player: Player<any>) => new SubtletyRogueSimUI(parentElem, player),\n\t// Shaman\n\t[Spec.SpecElementalShaman]: (parentElem: HTMLElement, player: Player<any>) => new ElementalShamanSimUI(parentElem, player),\n\t[Spec.SpecEnhancementShaman]: (parentElem: HTMLElement, player: Player<any>) => new EnhancementShamanSimUI(parentElem, player),\n\t[Spec.SpecRestorationShaman]: (parentElem: HTMLElement, player: Player<any>) => new RestorationShamanSimUI(parentElem, player),\n\t// Warlock\n\t[Spec.SpecAfflictionWarlock]: (parentElem: HTMLElement, player: Player<any>) => new AfflictionWarlockSimUI(parentElem, player),\n\t[Spec.SpecDemonologyWarlock]: (parentElem: HTMLElement, player: Player<any>) => new DemonologyWarlockSimUI(parentElem, player),\n\t[Spec.SpecDestructionWarlock]: (parentElem: HTMLElement, player: Player<any>) => new DestructionWarlockSimUI(parentElem, player),\n\t// Warrior\n\t[Spec.SpecArmsWarrior]: (parentElem: HTMLElement, player: Player<any>) => new ArmsWarriorSimUI(parentElem, player),\n\t[Spec.SpecFuryWarrior]: (parentElem: HTMLElement, player: Player<any>) => new FuryWarriorSimUI(parentElem, player),\n\t[Spec.SpecProtectionWarrior]: (parentElem: HTMLElement, player: Player<any>) => new ProtectionWarriorSimUI(parentElem, player),\n};\n\nexport const playerPresets: Array<RaidSimPreset<any>> = PlayerClasses.naturalOrder\n\t.map(playerClass => Object.values(playerClass.specs))\n\t.flat()\n\t.map(playerSpec => getSpecConfig(playerSpec.specID))\n\t.map(config => {\n\t\tconst indSimUiConfig = config as IndividualSimUIConfig<any>;\n\t\treturn indSimUiConfig.raidSimPresets;\n\t})\n\t.flat();\n\nexport const implementedSpecs: Array<any> = [...new Set(playerPresets.map(preset => preset.spec))];\n","import { Exporter } from '../core/components/exporters';\nimport { Importer } from '../core/components/importers';\nimport { Encounter } from '../core/encounter';\nimport { RaidSimPreset } from '../core/individual_sim_ui';\nimport { Player } from '../core/player';\nimport { PlayerSpecs } from '../core/player_specs';\nimport { Party as PartyProto, Player as PlayerProto, Raid as RaidProto } from '../core/proto/api';\nimport {\n\tClass,\n\tEncounter as EncounterProto,\n\tEquipmentSpec,\n\tFaction,\n\tItemSpec,\n\tProfession,\n\tRace,\n\tSpec,\n\tTarget as TargetProto,\n\tUnitReference,\n\tUnitReference_Type,\n} from '../core/proto/common';\nimport { RaidSimSettings } from '../core/proto/ui';\nimport { professionNames, raceNames } from '../core/proto_utils/names';\nimport {\n\tDruidSpecs,\n\tgetPlayerSpecFromPlayer,\n\tgetTalentTreePoints,\n\tmakeDefaultBlessings,\n\traceToFaction,\n\tRogueSpecs,\n\tSpecOptions,\n} from '../core/proto_utils/utils';\nimport { MAX_NUM_PARTIES } from '../core/raid';\nimport { EventID, TypedEvent } from '../core/typed_event';\nimport { bucket, distinct } from '../core/utils';\nimport { playerPresets } from './presets';\nimport { RaidSimUI } from './raid_sim_ui';\n\nexport class RaidJsonImporter extends Importer {\n\tprivate readonly simUI: RaidSimUI;\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, 'JSON Import', true);\n\t\tthis.simUI = simUI;\n\n\t\tthis.descriptionElem.innerHTML = `\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t`;\n\t}\n\n\tonImport(data: string) {\n\t\tconst settings = RaidSimSettings.fromJsonString(data, { ignoreUnknownFields: true });\n\t\tthis.simUI.fromProto(TypedEvent.nextEventID(), settings);\n\t\tthis.close();\n\t}\n}\n\nexport class RaidJsonExporter extends Exporter {\n\tprivate readonly simUI: RaidSimUI;\n\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, { title: 'JSON Export', allowDownload: true });\n\t\tthis.simUI = simUI;\n\t\tthis.init();\n\t}\n\n\tgetData(): string {\n\t\treturn JSON.stringify(RaidSimSettings.toJson(this.simUI.toProto()), null, 2);\n\t}\n}\n\nexport class RaidWCLImporter extends Importer {\n\tprivate queryCounter = 0;\n\n\tprivate readonly simUI: RaidSimUI;\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, 'WCL Import', false);\n\t\tthis.simUI = simUI;\n\t\tthis.textElem.classList.add('small-textarea');\n\t\tthis.descriptionElem.innerHTML = `\n\t\t\t<p>\n\t\t\t\tImports the entire raid from a WCL report.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else the first fight in the report will be used.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tThe following are imported directly from the report:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Player Name</li>\n\t\t\t\t\t<li>Equipment (items, enchants, and gems)</li>\n\t\t\t\t\t<li>Faction (Alliance / Horde)</li>\n\t\t\t\t\t<li>Encounter: If the import link has a fight ID we try to match with a preset Encounter. Note that many Encounters are still unimplemented.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not available directly from the report data, but we try to infer them:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Talents: Log data only gives us the tree summary (e.g. '51/20/0') so we match this with the closest preset talent build.</li>\n\t\t\t\t\t<li>Glyphs: Glyphs are absent from log data, but we pair them with the inferred Talents.</li>\n\t\t\t\t\t<li>Race: Inferred from Race-specific abilties used in any fight if possible, or defaults to Spec-specific Race.</li>\n\t\t\t\t\t<li>Professions: Inferred from profession-locked items/enchants/gems.</li>\n\t\t\t\t\t<li>Buff assignments (Innervate, Unholy Frenzy, etc): Inferred from casts.</li>\n\t\t\t\t\t<li>Party Composition: Inferred from party-only effects, such as Prayer of Healing, or Vampiric Touch.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not imported, and instead use spec-specific defaults:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Rotation / Spec-specific options</li>\n\t\t\t\t\t<li>Consumes</li>\n\t\t\t\t\t<li>Paladin Blessings</li>\n\t\t\t\t</ul>\n\t\t\t</p>\n\t\t`;\n\t}\n\n\tprivate token = '';\n\tprivate async getWCLBearerToken(): Promise<string> {\n\t\tif (this.token == '') {\n\t\t\tconst response = await fetch('https://classic.warcraftlogs.com/oauth/token', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: 'Basic ' + btoa('963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3'),\n\t\t\t\t},\n\t\t\t\tbody: new URLSearchParams({\n\t\t\t\t\tgrant_type: 'client_credentials',\n\t\t\t\t}),\n\t\t\t});\n\t\t\tconst json = await response.json();\n\t\t\tthis.token = json.access_token;\n\t\t}\n\t\treturn this.token;\n\t}\n\n\tprivate async queryWCL(query: string): Promise<any> {\n\t\tconst token = await this.getWCLBearerToken();\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\tAccept: 'application/json',\n\t\t};\n\n\t\tconst queryURL = `https://classic.warcraftlogs.com/api/v2/client?query=${query}`;\n\t\tthis.queryCounter++;\n\n\t\t// Query WCL\n\t\tconst res = await fetch(encodeURI(queryURL), {\n\t\t\tmethod: 'GET',\n\t\t\theaders: headers,\n\t\t});\n\n\t\tconst result = await res.json();\n\t\tif (result?.errors?.length) {\n\t\t\tconst errorStr = result.errors.map((e: any) => e.message).join('\\n');\n\t\t\tthrow new Error(`GraphQL error: ${errorStr}\\n\\nQuery: ${query}`);\n\t\t} else {\n\t\t\tconsole.debug(`WCL query: ${query}\\n\\nResult: ${JSON.stringify(result)}`);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async parseURL(url: string): Promise<wclUrlData> {\n\t\tconst match = url.match(/classic\\.warcraftlogs\\.com\\/reports\\/([a-zA-Z0-9:]+)\\/?(#.*fight=((\\d+)|(last)))?/);\n\t\tif (!match) {\n\t\t\tthrow new Error(`Invalid WCL URL ${url}, must look like \"classic.warcraftlogs.com/reports/XXXX\"`);\n\t\t}\n\n\t\tconst urlData = {\n\t\t\treportID: match[1],\n\t\t\tfightID: '',\n\t\t};\n\n\t\t// If the URL has a Fight ID in it, use it\n\t\tif (match[2] && match[3] && match[3] != 'last') {\n\t\t\turlData.fightID = match[3];\n\t\t} else {\n\t\t\t// Make a separate query to get the corresponding ReportFights\n\t\t\tconst fightDataQuery = `{\n\t\t\t\treportData {\n\t\t\t\t\treport(code: \"${urlData.reportID}\") {\n\t\t\t\t\t\tfights(killType: Kills, translate: true) {\n\t\t\t\t\t\t\tid, name\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}`;\n\n\t\t\tconst fightData = await this.queryWCL(fightDataQuery);\n\t\t\tconst fights = fightData.data.reportData.report.fights;\n\n\t\t\tif (match[3] == 'last') {\n\t\t\t\turlData.fightID = String(fights[fights.length - 1].id);\n\t\t\t} else {\n\t\t\t\t// Default to using the first Fight\n\t\t\t\turlData.fightID = String(fights[0].id);\n\t\t\t}\n\t\t}\n\n\t\tconsole.debug(`Importing WCL report: ${JSON.stringify(urlData)}`);\n\t\treturn urlData;\n\t}\n\n\tprivate async getRateLimit(): Promise<wclRateLimitData> {\n\t\tconst query = `{\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }`;\n\t\tconst result = await this.queryWCL(query);\n\t\tconst data = result['data']['rateLimitData'] as wclRateLimitData;\n\t\treturn data;\n\t}\n\n\tasync onImport(importLink: string) {\n\t\tthis.importButton.disabled = true;\n\t\tthis.rootElem.style.cursor = 'wait';\n\t\ttry {\n\t\t\tawait this.doImport(importLink);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\talert('Failed import from WCL: ' + error);\n\t\t}\n\t\tthis.importButton.disabled = false;\n\t\tthis.rootElem.style.removeProperty('cursor');\n\t}\n\n\tasync doImport(importLink: string) {\n\t\tif (!importLink.length) {\n\t\t\tthrow new Error('No import link provided!');\n\t\t}\n\n\t\tconst urlData = await this.parseURL(importLink);\n\t\tconst _rateLimit = await this.getRateLimit();\n\n\t\t// Schema for WCL API here: https://www.warcraftlogs.com/v2-api-docs/warcraft/\n\t\t// WCL charges us 1 'point' for each subquery we issue within the request. So\n\t\t// by using filter expressions we can combine our queries together, to spend\n\t\t// fewer points.\n\t\tconst reportDataQuery = `{\n\t\t\treportData {\n\t\t\t\treport(code: \"${urlData.reportID}\") {\n\t\t\t\t\tguild {\n\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t}\n\t\t\t\t\tplayerDetails: table(fightIDs: [${urlData.fightID}], dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\tcombatantInfoEvents: events(fightIDs: [${urlData.fightID}], dataType:CombatantInfo, limit: 50) { data }\n\t\t\t\t\tfights(fightIDs: [${urlData.fightID}]) {\n\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t}\n\n\t\t\t\t\treportCastEvents: events(dataType:Casts, endTime: 99999999, filterExpression: \"${[racialSpells, professionSpells]\n\t\t\t\t\t\t.flat()\n\t\t\t\t\t\t.map(spell => spell.id)\n\t\t\t\t\t\t.map(id => `ability.id = ${id}`)\n\t\t\t\t\t\t.join(' OR ')}\", limit: 10000) { data }\n\n\t\t\t\t\tfightCastEvents: events(fightIDs: [${urlData.fightID}], dataType:Casts, filterExpression: \"${[externalCDSpells]\n\t\t\t\t\t\t.flat()\n\t\t\t\t\t\t.map(spell => spell.id)\n\t\t\t\t\t\t.map(id => `ability.id = ${id}`)\n\t\t\t\t\t\t.join(' OR ')}\", limit: 10000) { data }\n\n\t\t\t\t\tfightHealEvents: events(fightIDs: [${urlData.fightID}], dataType:Healing, filterExpression: \"${[samePartyHealingSpells, otherPartyHealingSpells]\n\t\t\t\t\t\t.flat()\n\t\t\t\t\t\t.map(spell => spell.id)\n\t\t\t\t\t\t.map(id => `ability.id = ${id}`)\n\t\t\t\t\t\t.join(' OR ')}\", limit: 10000) { data }\n\n\t\t\t\t\tmanaTideTotem: events(fightIDs: [${urlData.fightID}], dataType:Resources, filterExpression: \"ability.id = 39609\", limit: 100) { data }\n\t\t\t\t}\n\t\t\t}\n\t\t}`;\n\t\tconst reportData = await this.queryWCL(reportDataQuery);\n\n\t\t// Process the report data.\n\t\tconst wclData = reportData.data.reportData.report; // TODO: Typings?\n\t\tconst playerData: wclPlayer[] = wclData.playerDetails.data.entries;\n\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tconst wclPlayers = playerData.map(wclPlayer => new WCLSimPlayer(wclPlayer, this.simUI, eventID));\n\t\t\tthis.inferRace(eventID, wclData, wclPlayers);\n\t\t\tthis.inferProfessions(eventID, wclData, wclPlayers);\n\t\t\tthis.inferAssignments(eventID, wclData, wclPlayers);\n\t\t\tthis.inferPartyComposition(eventID, wclData, wclPlayers);\n\t\t\tconst numPaladins = wclPlayers.filter(player => player.player.getClass() == Class.ClassPaladin).length;\n\t\t\tconst settings = RaidSimSettings.create({\n\t\t\t\tencounter: this.getEncounterProto(wclData),\n\t\t\t\traid: this.getRaidProto(wclPlayers),\n\t\t\t\tblessings: makeDefaultBlessings(numPaladins),\n\t\t\t});\n\n\t\t\t// Clear the raid out to avoid any taint issues.\n\t\t\tthis.simUI.clearRaid(eventID);\n\t\t\tthis.simUI.fromProto(eventID, settings);\n\t\t});\n\n\t\tthis.close();\n\t}\n\n\tprivate inferRace(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\twclPlayers.forEach(p => p.player.setRace(eventID, Race.RaceUnknown));\n\n\t\t// If defined in log, use that faction. Otherwise default to UI setting.\n\t\tlet faction = (wclData.guild?.faction?.id || this.simUI.raidPicker?.getCurrentFaction() || Faction.Horde) as Faction;\n\n\t\twclData.combatantInfoEvents.data.forEach((combatantInfo: wclCombatantInfoEvent) => {\n\t\t\tcombatantInfo.auras\n\t\t\t\t.filter(aura => aura.ability == 28878)\n\t\t\t\t.forEach(aura => {\n\t\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == aura.source);\n\t\t\t\t\tif (sourcePlayer && sourcePlayer.player.getRace() != Race.RaceDraenei) {\n\t\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has race ${raceNames.get(Race.RaceDraenei)} from Heroic Presence aura event`);\n\t\t\t\t\t\tsourcePlayer.player.setRace(eventID, Race.RaceDraenei);\n\t\t\t\t\t\tfaction = Faction.Alliance;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\n\t\tconst castEventsBySpellId = bucket(wclData.reportCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\tracialSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tif (sourcePlayer) {\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has race ${raceNames.get(spell.race)} from ${spell.name} event`);\n\t\t\t\t\tsourcePlayer.player.setRace(eventID, spell.race);\n\t\t\t\t\tfaction = raceToFaction[spell.race];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\twclPlayers.forEach(p => {\n\t\t\tif (p.player.getRace() == Race.RaceUnknown) {\n\t\t\t\tp.player.setRace(eventID, p.preset.defaultFactionRaces[faction]);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate inferProfessions(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst castEventsBySpellId = bucket(wclData.reportCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\tprofessionSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tif (sourcePlayer && !sourcePlayer.inferredProfessions.includes(spell.profession)) {\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has profession ${professionNames.get(spell.profession)} from ${spell.name} event`);\n\t\t\t\t\tsourcePlayer.inferredProfessions.push(spell.profession);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\twclPlayers.forEach(player => {\n\t\t\tlet professions = distinct(player.inferredProfessions.concat(player.player.getGear().getProfessionRequirements()));\n\t\t\tif (professions.length == 0) {\n\t\t\t\tprofessions = [Profession.Engineering, Profession.Jewelcrafting];\n\t\t\t} else if (professions.length == 1) {\n\t\t\t\tif (professions[0] != Profession.Engineering) {\n\t\t\t\t\tprofessions.push(Profession.Engineering);\n\t\t\t\t} else {\n\t\t\t\t\tprofessions.push(Profession.Jewelcrafting);\n\t\t\t\t}\n\t\t\t}\n\t\t\tplayer.player.setProfessions(eventID, professions);\n\t\t});\n\t}\n\n\tprivate inferAssignments(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst castEventsBySpellId = bucket(wclData.fightCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\texternalCDSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == event.targetID);\n\t\t\t\tif (sourcePlayer && targetPlayer && sourcePlayer.player.getClass() == spell.class) {\n\t\t\t\t\tconst specOptions = spell.applyFunc(sourcePlayer.player, targetPlayer.toUnitReference());\n\t\t\t\t\tsourcePlayer.player.setSpecOptions(eventID, specOptions);\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} is targeting ${targetPlayer.name} with ${spell.name} from cast event`);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t// Assigns the raidIndex field for all players.\n\tprivate inferPartyComposition(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst setPlayersInParty = (player1: WCLSimPlayer, player2: WCLSimPlayer, reason: string) => {\n\t\t\tif (player1.addPlayerInParty(player2) || player2.addPlayerInParty(player1)) {\n\t\t\t\tconsole.log(`Inferring players ${player1.name} and ${player2.name} in same party from ${reason} event`);\n\t\t\t}\n\t\t};\n\n\t\tconst healEventsBySpellId = bucket(wclData.fightHealEvents.data as Array<wclHealEvent>, event => String(event.abilityGameID));\n\n\t\t// These spells only affect players in the same party as the caster.\n\t\tsamePartyHealingSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclHealEvent> = healEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == event.targetID);\n\t\t\t\tif (sourcePlayer && targetPlayer) {\n\t\t\t\t\tsetPlayersInParty(sourcePlayer, targetPlayer, spell.name);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Prayer of Healing is a bit different, we can infer that players who are targeted at the same time are in a group.\n\t\totherPartyHealingSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclHealEvent> = healEventsBySpellId[spell.id] || [];\n\t\t\tconst spellEventsByTimestamp = bucket(spellEvents, event => String(event.timestamp) + String(event.sourceID));\n\t\t\tfor (const [_timestamp, eventsAtTime] of Object.entries(spellEventsByTimestamp)) {\n\t\t\t\tconst spellTargets = eventsAtTime.map(event => wclPlayers.find(player => player.id == event.targetID));\n\t\t\t\tfor (let i = 0; i < spellTargets.length; i++) {\n\t\t\t\t\tfor (let j = 0; j < spellTargets.length; j++) {\n\t\t\t\t\t\tif (i != j && spellTargets[i] && spellTargets[j]) {\n\t\t\t\t\t\t\tsetPlayersInParty(spellTargets[i]!, spellTargets[j]!, spell.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\twclData.combatantInfoEvents.data.forEach((combatantInfo: wclCombatantInfoEvent) => {\n\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == combatantInfo.sourceID);\n\t\t\tcombatantInfo.auras\n\t\t\t\t.filter(aura => aura.ability == 28878)\n\t\t\t\t.forEach(aura => {\n\t\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == aura.source);\n\t\t\t\t\tif (sourcePlayer && targetPlayer) {\n\t\t\t\t\t\tsetPlayersInParty(sourcePlayer, targetPlayer, 'Heroic Presence');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\n\t\t// Assign players with same-group inferences.\n\t\tlet inferredPlayers = wclPlayers.filter(player => player.playersInParty.length > 0);\n\t\tlet nextEmptyPartyIdx = 0;\n\t\twhile (inferredPlayers.length > 0) {\n\t\t\t// Find all the players in the same party as the first player.\n\t\t\tlet partyMembers = [inferredPlayers[0]].concat(inferredPlayers[0].playersInParty);\n\t\t\tlet numMembers = 0;\n\t\t\twhile (partyMembers.length != numMembers) {\n\t\t\t\tnumMembers = partyMembers.length;\n\t\t\t\tpartyMembers = distinct(partyMembers.map(member => [member].concat(member.playersInParty)).flat());\n\t\t\t}\n\n\t\t\t// Assign these members to an empty party.\n\t\t\tconst partyIdx = nextEmptyPartyIdx;\n\t\t\tnextEmptyPartyIdx++;\n\t\t\tpartyMembers.forEach((member, i) => {\n\t\t\t\tmember.raidIndex = partyIdx * 5 + i;\n\t\t\t});\n\n\t\t\tinferredPlayers = inferredPlayers.filter(player => !partyMembers.includes(player));\n\t\t}\n\n\t\t// Assign remaining players into open slots.\n\t\tconst allRaidIndexes = [...Array(40).keys()];\n\t\tconst nextFreeIndex = () => allRaidIndexes.find(idx => !wclPlayers.some(p => p.raidIndex == idx)) ?? -1;\n\t\twclPlayers\n\t\t\t.filter(player => player.raidIndex == -1)\n\t\t\t.forEach(player => {\n\t\t\t\tconst nextIdx = nextFreeIndex();\n\t\t\t\tif (nextIdx == -1) {\n\t\t\t\t\tthrow new Error('Invalid next idx');\n\t\t\t\t}\n\t\t\t\tplayer.raidIndex = nextIdx;\n\t\t\t});\n\t}\n\n\tprivate getEncounterProto(wclData: any): EncounterProto {\n\t\tconst fight: { startTime: number; endTime: number; id: number; name: string } = wclData.fights[0];\n\n\t\tconst encounter = EncounterProto.create({\n\t\t\tduration: (fight.endTime - fight.startTime) / 1000,\n\t\t\ttargets: [],\n\t\t});\n\n\t\t// Use the preset encounter if it exists.\n\t\tconst closestEncounterPreset = this.simUI.sim.db.getAllPresetEncounters().find(enc => enc.path.includes(fight.name));\n\t\tif (closestEncounterPreset && closestEncounterPreset.targets.length) {\n\t\t\tclosestEncounterPreset.targets\n\t\t\t\t.map(mob => mob.target as TargetProto)\n\t\t\t\t.filter(target => target !== undefined)\n\t\t\t\t.forEach(target => encounter.targets.push(target));\n\t\t}\n\n\t\t// Build a manual target list if no preset encounter exists.\n\t\tif (encounter.targets.length === 0) {\n\t\t\tencounter.targets.push(Encounter.defaultTargetProto());\n\t\t}\n\n\t\treturn encounter;\n\t}\n\n\tprivate getRaidProto(wclPlayers: WCLSimPlayer[]): RaidProto {\n\t\tconst raid = RaidProto.create({\n\t\t\tparties: [...new Array(MAX_NUM_PARTIES).keys()].map(_party =>\n\t\t\t\tPartyProto.create({\n\t\t\t\t\tplayers: [...new Array(5).keys()].map(_player => PlayerProto.create()),\n\t\t\t\t}),\n\t\t\t),\n\t\t});\n\n\t\twclPlayers.forEach(player => {\n\t\t\tconst positionInParty = player.raidIndex % 5;\n\t\t\tconst partyIdx = (player.raidIndex - positionInParty) / 5;\n\t\t\tconst playerProto = player.player.toProto();\n\t\t\traid.parties[partyIdx].players[positionInParty] = playerProto;\n\n\t\t\tif (getPlayerSpecFromPlayer(playerProto).isTankSpec) {\n\t\t\t\traid.tanks.push(player.toUnitReference());\n\t\t\t}\n\t\t});\n\n\t\treturn raid;\n\t}\n}\n\nclass WCLSimPlayer {\n\tpublic readonly data: wclPlayer;\n\tpublic readonly id: number;\n\tpublic readonly name: string;\n\tpublic readonly type: string;\n\tpublic raidIndex = -1;\n\n\tprivate readonly simUI: RaidSimUI;\n\tprivate readonly fullType: string;\n\tprivate readonly spec: Spec | null;\n\n\treadonly player: Player<any>;\n\treadonly preset: RaidSimPreset<any>;\n\n\tinferredProfessions: Array<Profession> = [];\n\n\treadonly playersInParty: Array<WCLSimPlayer> = [];\n\n\tconstructor(data: wclPlayer, simUI: RaidSimUI, eventID: EventID) {\n\t\tthis.simUI = simUI;\n\t\tthis.data = data;\n\n\t\tthis.name = data.name;\n\t\tthis.id = data.id;\n\t\tthis.type = data.type;\n\n\t\tconst wclSpec = data.icon.split('-')[1];\n\t\tthis.fullType = this.type + wclSpec;\n\t\tconsole.log(`WCL spec: ${this.fullType}`);\n\n\t\tconst foundSpec = fullTypeToSpec[this.fullType] ?? null;\n\t\tif (foundSpec == null) {\n\t\t\tthrow new Error('Player type not implemented: ' + this.fullType);\n\t\t}\n\t\tthis.spec = foundSpec;\n\t\tthis.player = new Player(PlayerSpecs.fromProto(this.spec), simUI.sim);\n\n\t\tthis.preset = WCLSimPlayer.getMatchingPreset(foundSpec, data.talents);\n\t\tif (this.preset === undefined) {\n\t\t\tthrow new Error(\n\t\t\t\t'Could not find matching preset: ' +\n\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\tname: this.name,\n\t\t\t\t\t\ttype: this.fullType,\n\t\t\t\t\t\ttalents: data.talents,\n\t\t\t\t\t}).toString(),\n\t\t\t);\n\t\t}\n\n\t\t// Apply preset defaults.\n\t\tthis.player.applySharedDefaults(eventID);\n\t\tthis.player.setTalentsString(eventID, this.preset.talents.talentsString);\n\t\tthis.player.setGlyphs(eventID, this.preset.talents.glyphs!);\n\t\tthis.player.setConsumes(eventID, this.preset.consumes);\n\t\tthis.player.setSpecOptions(eventID, this.preset.specOptions);\n\t\tthis.player.setProfessions(eventID, [Profession.Engineering, Profession.Jewelcrafting]);\n\n\t\t// Apply settings from report data.\n\t\tthis.player.setName(eventID, data.name);\n\t\tthis.player.setGear(\n\t\t\teventID,\n\t\t\tsimUI.sim.db.lookupEquipmentSpec(\n\t\t\t\tEquipmentSpec.create({\n\t\t\t\t\titems: data.gear.map(gear =>\n\t\t\t\t\t\tItemSpec.create({\n\t\t\t\t\t\t\tid: gear.id,\n\t\t\t\t\t\t\tenchant: gear.permanentEnchant,\n\t\t\t\t\t\t\tgems: gear.gems ? gear.gems.map(gemInfo => gemInfo.id) : [],\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t}),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate static getMatchingPreset<SpecType extends Spec>(spec: SpecType, talents: wclTalents[]): RaidSimPreset<SpecType> {\n\t\tconst matchingPresets = playerPresets.filter(preset => preset.spec == spec);\n\t\tlet presetIdx = 0;\n\n\t\tif (matchingPresets && matchingPresets.length > 1) {\n\t\t\tlet distance = 999;\n\t\t\t// Search talents and find the preset that the players talents most closely match.\n\t\t\tmatchingPresets.forEach((preset, i) => {\n\t\t\t\tconst presetTalents = getTalentTreePoints(preset.talents.talentsString);\n\t\t\t\t// Diff the distance to the preset.\n\t\t\t\tconst newDistance = presetTalents.reduce((acc, v, i) => (acc += Math.abs(talents[i]?.guid - presetTalents[i])), 0);\n\n\t\t\t\t// If this is the best distance, assign this preset.\n\t\t\t\tif (newDistance < distance) {\n\t\t\t\t\tpresetIdx = i;\n\t\t\t\t\tdistance = newDistance;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn matchingPresets[presetIdx];\n\t}\n\n\tpublic toUnitReference(): UnitReference {\n\t\treturn UnitReference.create({\n\t\t\ttype: UnitReference_Type.Player,\n\t\t\tindex: this.raidIndex,\n\t\t});\n\t}\n\n\tpublic addPlayerInParty(other: WCLSimPlayer): boolean {\n\t\tif (other != this && !this.playersInParty.includes(other)) {\n\t\t\tthis.playersInParty.push(other);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nconst fullTypeToSpec: Record<string, Spec> = {\n\tDeathKnightBlood: Spec.SpecBloodDeathKnight,\n\tDeathKnightFrost: Spec.SpecFrostDeathKnight,\n\tDeathKnightUnholy: Spec.SpecUnholyDeathKnight,\n\tDruidBalance: Spec.SpecBalanceDruid,\n\tDruidFeral: Spec.SpecFeralDruid,\n\t// TOCO: Cata - Verify tank druid\n\t// 'DruidWarden': Spec.SpecFeralDruid,\n\t// 'DruidGuardian': Spec.SpecFeralDruid,\n\tDruidRestoration: Spec.SpecRestorationDruid,\n\tHunterBeastMastery: Spec.SpecBeastMasteryHunter,\n\tHunterMarksmanship: Spec.SpecMarksmanshipHunter,\n\tHunterSurvival: Spec.SpecSurvivalHunter,\n\tMageArcane: Spec.SpecArcaneMage,\n\tMageFire: Spec.SpecFireMage,\n\tMageFrost: Spec.SpecFrostMage,\n\tPaladinHoly: Spec.SpecHolyPaladin,\n\tPaladinJusticar: Spec.SpecProtectionPaladin,\n\tPaladinProtection: Spec.SpecProtectionPaladin,\n\tPaladinRetribution: Spec.SpecRetributionPaladin,\n\tPriestHoly: Spec.SpecHolyPriest,\n\tPriestDiscipline: Spec.SpecDisciplinePriest,\n\tPriestShadow: Spec.SpecShadowPriest,\n\t// 'PriestSmite': Spec.SpecSmitePriest,\n\tRogueAssassination: Spec.SpecAssassinationRogue,\n\tRogueCombat: Spec.SpecCombatRogue,\n\tRogueSubtlety: Spec.SpecSubtletyRogue,\n\tShamanElemental: Spec.SpecElementalShaman,\n\tShamanEnhancement: Spec.SpecEnhancementShaman,\n\tShamanRestoration: Spec.SpecRestorationShaman,\n\tWarlockDestruction: Spec.SpecDestructionWarlock,\n\tWarlockAffliction: Spec.SpecAfflictionWarlock,\n\tWarlockDemonology: Spec.SpecDemonologyWarlock,\n\tWarriorArms: Spec.SpecArmsWarrior,\n\tWarriorFury: Spec.SpecFuryWarrior,\n\t// 'WarriorChampion': Spec.SpecWarrior,\n\t// 'WarriorWarrior': Spec.SpecWarrior,\n\t// 'WarriorGladiator': Spec.SpecWarrior,\n\tWarriorProtection: Spec.SpecProtectionWarrior,\n};\n\n// Spells which imply a specific Race.\nconst racialSpells: Array<{ id: number; name: string; race: Race }> = [\n\t{ id: 25046, name: 'Arcane Torrent (Energy)', race: Race.RaceBloodElf },\n\t{ id: 28730, name: 'Arcane Torrent (Mana)', race: Race.RaceBloodElf },\n\t{ id: 50613, name: 'Arcane Torrent (Runic Power)', race: Race.RaceBloodElf },\n\t{ id: 26297, name: 'Berserking', race: Race.RaceTroll },\n\t{ id: 20572, name: 'Blood Fury (AP)', race: Race.RaceOrc },\n\t{ id: 33697, name: 'Blood Fury (AP+SP)', race: Race.RaceOrc },\n\t{ id: 33702, name: 'Blood Fury (SP)', race: Race.RaceOrc },\n\t{ id: 20589, name: 'Escape Artist', race: Race.RaceGnome },\n\t{ id: 20594, name: 'Stoneform', race: Race.RaceDwarf },\n\t{ id: 20549, name: 'War Stomp', race: Race.RaceTauren },\n\t{ id: 7744, name: 'Will of the Forsaken', race: Race.RaceUndead },\n\t{ id: 59752, name: 'Will to Survive', race: Race.RaceHuman },\n];\n\n// Spells which imply a specific Profession.\nconst professionSpells: Array<{ id: number; name: string; profession: Profession }> = [\n\t{ id: 55503, name: 'Lifeblood', profession: Profession.Herbalism },\n\t{ id: 50305, name: 'Skinning', profession: Profession.Skinning },\n];\n\nconst externalCDSpells: Array<{ id: number; name: string; class: Class; applyFunc: (player: Player<any>, raidTarget: UnitReference) => SpecOptions<any> }> = [\n\t{\n\t\tid: 29166,\n\t\tname: 'Innervate',\n\t\tclass: Class.ClassDruid,\n\t\tapplyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<DruidSpecs>;\n\t\t\toptions.classOptions!.innervateTarget = raidTarget;\n\t\t\treturn options;\n\t\t},\n\t},\n\t{\n\t\tid: 10060,\n\t\tname: 'Power Infusion',\n\t\tclass: Class.ClassPriest,\n\t\tapplyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<Spec.SpecDisciplinePriest>;\n\t\t\toptions.powerInfusionTarget = raidTarget;\n\t\t\treturn options;\n\t\t},\n\t},\n\t{\n\t\tid: 57933,\n\t\tname: 'Tricks of the Trade',\n\t\tclass: Class.ClassRogue,\n\t\tapplyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<RogueSpecs>;\n\t\t\toptions.classOptions!.tricksOfTheTradeTarget = raidTarget;\n\t\t\treturn options;\n\t\t},\n\t},\n\t{\n\t\tid: 49016,\n\t\tname: 'Unholy Frenzy',\n\t\tclass: Class.ClassDeathKnight,\n\t\tapplyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<Spec.SpecUnholyDeathKnight>;\n\t\t\toptions.unholyFrenzyTarget = raidTarget;\n\t\t\treturn options;\n\t\t},\n\t},\n];\n\n// Healing spells which only affect the caster's party.\nconst samePartyHealingSpells: Array<{ id: number; name: string }> = [\n\t{ id: 52042, name: 'Healing Stream Totem' },\n\t{ id: 48076, name: 'Holy Nova' },\n\t{ id: 48445, name: 'Tranquility' },\n\t{ id: 15290, name: 'Vampiric Embrace' },\n];\n\n// Healing spells which only affect a single party, but not necessarily the caster's party.\nconst otherPartyHealingSpells: Array<{ id: number; name: string }> = [{ id: 48072, name: 'Prayer of Healing' }];\n\ninterface wclUrlData {\n\treportID: string;\n\tfightID: string;\n}\n\ninterface wclCastEvent {\n\ttype: 'cast';\n\ttimestamp: number;\n\tsourceID: number;\n\ttargetID: number;\n\tabilityGameID: number;\n\tfight: number;\n}\n\ninterface wclHealEvent {\n\ttype: 'heal';\n\ttimestamp: number;\n\tsourceID: number;\n\ttargetID: number;\n\tabilityGameID: number;\n\tfight: number;\n\tamount: number;\n}\n\ninterface wclCombatantInfoEvent {\n\ttype: 'combatantinfo';\n\tsourceID: number;\n\tauras: {\n\t\tsource: number;\n\t\tability: number;\n\t\tname: string;\n\t}[];\n}\n\ninterface wclRateLimitData {\n\tlimitPerHour: number;\n\tpointsSpentThisHour: number;\n\tpointsResetIn: number;\n}\n\n// Typed interface for WCL talents\ninterface wclTalents {\n\tname: string;\n\tguid: number;\n\ttype: number;\n\tabilityIcon: string;\n}\n\n// Typed interface for WCL Gems\ninterface wclGems {\n\tid: number;\n\titemLevel: number;\n\ticon: string;\n}\n\n// Typed interface for WCL Gear\ninterface wclGear {\n\tid: number;\n\tslot: number;\n\tquality: number;\n\ticon: string;\n\tname: string;\n\titemLevel: number;\n\tpermanentEnchant: number;\n\tpermanentEnchantName: string;\n\ttemporaryEnchant: number;\n\tgems?: wclGems[];\n}\n\n// Typed interface for WCL Player Data\ninterface wclPlayer {\n\tname: string;\n\tid: number;\n\tguid?: number;\n\ttype: string; // Paladin, Mage, etc.\n\ticon: string; // Paladin-Justicar, Mage-Fire, etc.\n\titemLevel?: number;\n\ttotal?: number;\n\tactiveTime?: number;\n\tactiveTimeReduced?: number;\n\tabilities?: unknown[]; // Don't care about abilities.\n\tdamageAbilities?: unknown[];\n\ttargets?: unknown[];\n\ttalents: wclTalents[];\n\tgear: wclGear[];\n}\n\ninterface _wclAura {\n\tname: string;\n\tid: number;\n\tguid: number;\n\ttype: string;\n\ticon: string;\n\ttotalUptime: number;\n\ttotalUses: number;\n\tbands: {\n\t\tstartTime: number;\n\t\tendTime: number;\n\t}[];\n}\n","import { Tooltip } from 'bootstrap';\n\nimport { BaseModal } from '../core/components/base_modal.js';\nimport { Component } from '../core/components/component.js';\nimport { EnumPicker } from '../core/components/enum_picker.js';\nimport { MAX_PARTY_SIZE, Party } from '../core/party.js';\nimport { Player } from '../core/player.js';\nimport { PlayerClasses } from '../core/player_classes';\nimport { PlayerSpecs } from '../core/player_specs';\nimport { Player as PlayerProto } from '../core/proto/api.js';\nimport { Class, Faction, Glyphs, Profession, Spec } from '../core/proto/common.js';\nimport { BalanceDruid_Options as BalanceDruidOptions } from '../core/proto/druid.js';\nimport { ArcaneMage_Options } from '../core/proto/mage';\nimport { getPlayerSpecFromPlayer, newUnitReference } from '../core/proto_utils/utils.js';\nimport { Raid } from '../core/raid.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { formatDeltaTextElem, getEnumValues } from '../core/utils.js';\nimport { playerPresets, specSimFactories } from './presets.js';\nimport { RaidSimUI } from './raid_sim_ui.js';\n\nconst NEW_PLAYER = -1;\n\nconst LATEST_PHASE_WITH_ALL_PRESETS = Math.min(\n\t...playerPresets.map(preset => Math.max(...Object.keys(preset.defaultGear[Faction.Alliance]).map(k => parseInt(k)))),\n);\n\nenum DragType {\n\tNone,\n\tNew,\n\tMove,\n\tSwap,\n\tCopy,\n}\n\nexport class RaidPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly raid: Raid;\n\treadonly partyPickers: Array<PartyPicker>;\n\treadonly newPlayerPicker: NewPlayerPicker;\n\n\t// Hold data about the player being dragged while the drag is happening.\n\tcurrentDragPlayer: Player<any> | null = null;\n\tcurrentDragPlayerFromIndex: number = NEW_PLAYER;\n\tcurrentDragType: DragType = DragType.New;\n\n\t// Hold data about the party being dragged while the drag is happening.\n\tcurrentDragParty: PartyPicker | null = null;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parent, 'raid-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.raid = raidSimUI.sim.raid;\n\n\t\tconst raidControls = document.createElement('div');\n\t\traidControls.classList.add('raid-controls');\n\t\tthis.rootElem.appendChild(raidControls);\n\n\t\tthis.newPlayerPicker = new NewPlayerPicker(this.rootElem, this);\n\n\t\tconst _activePartiesSelector = new EnumPicker<Raid>(raidControls, this.raidSimUI.sim.raid, {\n\t\t\tlabel: 'Raid Size',\n\t\t\tlabelTooltip: 'Number of players participating in the sim.',\n\t\t\tvalues: [\n\t\t\t\t{ name: '5', value: 1 },\n\t\t\t\t{ name: '10', value: 2 },\n\t\t\t\t{ name: '25', value: 5 },\n\t\t\t\t{ name: '40', value: 8 },\n\t\t\t],\n\t\t\tchangedEvent: (raid: Raid) => raid.numActivePartiesChangeEmitter,\n\t\t\tgetValue: (raid: Raid) => raid.getNumActiveParties(),\n\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: number) => {\n\t\t\t\traid.setNumActiveParties(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst _factionSelector = new EnumPicker<NewPlayerPicker>(raidControls, this.newPlayerPicker, {\n\t\t\tlabel: 'Default Faction',\n\t\t\tlabelTooltip: 'Default faction for newly-created players.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Alliance', value: Faction.Alliance },\n\t\t\t\t{ name: 'Horde', value: Faction.Horde },\n\t\t\t],\n\t\t\tchangedEvent: (_picker: NewPlayerPicker) => this.raid.sim.factionChangeEmitter,\n\t\t\tgetValue: (_picker: NewPlayerPicker) => this.raid.sim.getFaction(),\n\t\t\tsetValue: (eventID: EventID, picker: NewPlayerPicker, newValue: Faction) => {\n\t\t\t\tthis.raid.sim.setFaction(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst _phaseSelector = new EnumPicker<NewPlayerPicker>(raidControls, this.newPlayerPicker, {\n\t\t\tlabel: 'Default Gear',\n\t\t\tlabelTooltip: 'Newly-created players will start with approximate BIS gear from this phase.',\n\t\t\tvalues: [...Array(LATEST_PHASE_WITH_ALL_PRESETS).keys()].map(val => {\n\t\t\t\tconst phase = val + 1;\n\t\t\t\treturn { name: 'Phase ' + phase, value: phase };\n\t\t\t}),\n\t\t\tchangedEvent: (_picker: NewPlayerPicker) => this.raid.sim.phaseChangeEmitter,\n\t\t\tgetValue: (_picker: NewPlayerPicker) => this.raid.sim.getPhase(),\n\t\t\tsetValue: (eventID: EventID, picker: NewPlayerPicker, newValue: number) => {\n\t\t\t\tthis.raid.sim.setPhase(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst partiesContainer = document.createElement('div');\n\t\tpartiesContainer.classList.add('parties-container');\n\t\tthis.rootElem.appendChild(partiesContainer);\n\n\t\tthis.partyPickers = this.raid.getParties().map((party, i) => new PartyPicker(partiesContainer, party, i, this));\n\n\t\tconst updateActiveParties = () => {\n\t\t\tthis.partyPickers.forEach(partyPicker => {\n\t\t\t\tif (partyPicker.index < this.raidSimUI.sim.raid.getNumActiveParties()) {\n\t\t\t\t\tpartyPicker.rootElem.classList.add('active');\n\t\t\t\t} else {\n\t\t\t\t\tpartyPicker.rootElem.classList.remove('active');\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tthis.raidSimUI.sim.raid.numActivePartiesChangeEmitter.on(updateActiveParties);\n\t\tupdateActiveParties();\n\n\t\tthis.rootElem.ondragend = _event => {\n\t\t\t// Uncomment to remove player when dropped 'off' the raid.\n\t\t\t//if (this.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\t//\tconst playerPicker = this.getPlayerPicker(this.currentDragPlayerFromIndex);\n\t\t\t//\tplayerPicker.setPlayer(null, null, DragType.None);\n\t\t\t//}\n\n\t\t\tthis.clearDragPlayer();\n\t\t\tthis.clearDragParty();\n\t\t};\n\t}\n\n\tgetCurrentFaction(): Faction {\n\t\treturn this.raid.sim.getFaction();\n\t}\n\n\tgetCurrentPhase(): number {\n\t\treturn this.raid.sim.getPhase();\n\t}\n\n\tgetPlayerPicker(raidIndex: number): PlayerPicker {\n\t\treturn this.partyPickers[Math.floor(raidIndex / MAX_PARTY_SIZE)].playerPickers[raidIndex % MAX_PARTY_SIZE];\n\t}\n\n\tgetPlayerPickers(): Array<PlayerPicker> {\n\t\treturn [...new Array(25).keys()].map(i => this.getPlayerPicker(i));\n\t}\n\n\tsetDragPlayer(player: Player<any>, fromIndex: number, type: DragType) {\n\t\tthis.clearDragPlayer();\n\n\t\tthis.currentDragPlayer = player;\n\t\tthis.currentDragPlayerFromIndex = fromIndex;\n\t\tthis.currentDragType = type;\n\n\t\tif (fromIndex != NEW_PLAYER) {\n\t\t\tconst playerPicker = this.getPlayerPicker(fromIndex);\n\t\t\tplayerPicker.rootElem.classList.add('dragfrom');\n\t\t}\n\t}\n\n\tclearDragPlayer() {\n\t\tif (this.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\tconst playerPicker = this.getPlayerPicker(this.currentDragPlayerFromIndex);\n\t\t\tplayerPicker.rootElem.classList.remove('dragfrom');\n\t\t}\n\n\t\tthis.currentDragPlayer = null;\n\t\tthis.currentDragPlayerFromIndex = NEW_PLAYER;\n\t\tthis.currentDragType = DragType.New;\n\t}\n\n\tsetDragParty(party: PartyPicker) {\n\t\tthis.currentDragParty = party;\n\t\tparty.rootElem.classList.add('dragfrom');\n\t}\n\tclearDragParty() {\n\t\tif (this.currentDragParty) {\n\t\t\tthis.currentDragParty.rootElem.classList.remove('dragfrom');\n\t\t\tthis.currentDragParty = null;\n\t\t}\n\t}\n}\n\nexport class PartyPicker extends Component {\n\treadonly party: Party;\n\treadonly index: number;\n\treadonly raidPicker: RaidPicker;\n\treadonly playerPickers: Array<PlayerPicker>;\n\n\tconstructor(parent: HTMLElement, party: Party, index: number, raidPicker: RaidPicker) {\n\t\tsuper(parent, 'party-picker-root');\n\t\tthis.party = party;\n\t\tthis.index = index;\n\t\tthis.raidPicker = raidPicker;\n\n\t\tthis.rootElem.setAttribute('draggable', 'true');\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<div class=\"party-header\">\n\t\t\t\t<label class=\"party-label form-label\">Group ${index + 1}</label>\n\t\t\t\t<div class=\"party-results\">\n\t\t\t\t\t<span class=\"party-results-dps\"></span>\n\t\t\t\t\t<span class=\"party-results-reference-delta\"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"players-container\">\n\t\t\t</div>\n\t\t`;\n\n\t\tconst playersContainer = this.rootElem.getElementsByClassName('players-container')[0] as HTMLDivElement;\n\t\tthis.playerPickers = [...Array(MAX_PARTY_SIZE).keys()].map(i => new PlayerPicker(playersContainer, this, i));\n\n\t\tconst dpsResultElem = this.rootElem.getElementsByClassName('party-results-dps')[0] as HTMLElement;\n\t\tconst referenceDeltaElem = this.rootElem.getElementsByClassName('party-results-reference-delta')[0] as HTMLElement;\n\n\t\tthis.raidPicker.raidSimUI.referenceChangeEmitter.on(() => {\n\t\t\tconst currentData = this.raidPicker.raidSimUI.getCurrentData();\n\t\t\tconst referenceData = this.raidPicker.raidSimUI.getReferenceData();\n\n\t\t\tconst partyDps = currentData?.simResult.raidMetrics.parties[this.index]?.dps.avg || 0;\n\t\t\tconst referenceDps = referenceData?.simResult.raidMetrics.parties[this.index]?.dps.avg || 0;\n\n\t\t\tif (partyDps == 0 && referenceDps == 0) {\n\t\t\t\tdpsResultElem.textContent = '';\n\t\t\t\treferenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdpsResultElem.textContent = `${partyDps.toFixed(1)} DPS`;\n\n\t\t\tif (!referenceData) {\n\t\t\t\treferenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tformatDeltaTextElem(referenceDeltaElem, referenceDps, partyDps, 1);\n\t\t});\n\n\t\tthis.rootElem.ondragstart = event => {\n\t\t\tif (event.target == this.rootElem) {\n\t\t\t\tevent.dataTransfer!.dropEffect = 'move';\n\t\t\t\tevent.dataTransfer!.effectAllowed = 'all';\n\t\t\t\tthis.raidPicker.setDragParty(this);\n\t\t\t}\n\t\t};\n\n\t\tlet dragEnterCounter = 0;\n\t\tthis.rootElem.ondragenter = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter++;\n\t\t\tthis.rootElem.classList.add('dragto');\n\t\t};\n\t\tthis.rootElem.ondragleave = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter--;\n\t\t\tif (dragEnterCounter <= 0) {\n\t\t\t\tthis.rootElem.classList.remove('dragto');\n\t\t\t}\n\t\t};\n\t\tthis.rootElem.ondragover = event => {\n\t\t\tevent.preventDefault();\n\t\t};\n\t\tthis.rootElem.ondrop = event => {\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\t\t\tdragEnterCounter = 0;\n\t\t\tthis.rootElem.classList.remove('dragto');\n\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tconst srcPartyPicker = this.raidPicker.currentDragParty!;\n\n\t\t\t\tfor (let i = 0; i < MAX_PARTY_SIZE; i++) {\n\t\t\t\t\tconst srcPlayerPicker = srcPartyPicker.playerPickers[i]!;\n\t\t\t\t\tconst dstPlayerPicker = this.playerPickers[i]!;\n\n\t\t\t\t\tconst srcPlayer = srcPlayerPicker.player;\n\t\t\t\t\tconst dstPlayer = dstPlayerPicker.player;\n\n\t\t\t\t\tsrcPlayerPicker.setPlayer(eventID, dstPlayer, DragType.Swap);\n\t\t\t\t\tdstPlayerPicker.setPlayer(eventID, srcPlayer, DragType.Swap);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.raidPicker.clearDragParty();\n\t\t};\n\t}\n}\n\nexport class PlayerPicker extends Component {\n\t// Index of this player within its party (0-4).\n\treadonly index: number;\n\n\t// Index of this player within the whole raid (0-24).\n\treadonly raidIndex: number;\n\n\tplayer: Player<any> | null;\n\n\treadonly partyPicker: PartyPicker;\n\treadonly raidPicker: RaidPicker;\n\n\tprivate labelElem: HTMLElement | null;\n\tprivate iconElem: HTMLImageElement | null;\n\tprivate nameElem: HTMLInputElement | null;\n\tprivate resultsElem: HTMLElement | null;\n\tprivate dpsResultElem: HTMLElement | null;\n\tprivate referenceDeltaElem: HTMLElement | null;\n\n\tconstructor(parent: HTMLElement, partyPicker: PartyPicker, index: number) {\n\t\tsuper(parent, 'player-picker-root');\n\t\tthis.index = index;\n\t\tthis.raidIndex = partyPicker.index * MAX_PARTY_SIZE + index;\n\t\tthis.player = null;\n\t\tthis.partyPicker = partyPicker;\n\t\tthis.raidPicker = partyPicker.raidPicker;\n\n\t\tthis.labelElem = null;\n\t\tthis.iconElem = null;\n\t\tthis.nameElem = null;\n\t\tthis.resultsElem = null;\n\t\tthis.dpsResultElem = null;\n\t\tthis.referenceDeltaElem = null;\n\n\t\tthis.rootElem.classList.add('player');\n\n\t\tthis.partyPicker.party.compChangeEmitter.on(eventID => {\n\t\t\tconst newPlayer = this.partyPicker.party.getPlayer(this.index);\n\t\t\tif (newPlayer != this.player) this.setPlayer(eventID, newPlayer, DragType.None);\n\t\t});\n\n\t\tthis.raidPicker.raidSimUI.referenceChangeEmitter.on(() => {\n\t\t\tconst currentData = this.raidPicker.raidSimUI.getCurrentData();\n\t\t\tconst referenceData = this.raidPicker.raidSimUI.getReferenceData();\n\n\t\t\tconst playerDps = currentData?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg || 0;\n\t\t\tconst referenceDps = referenceData?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg || 0;\n\n\t\t\tif (this.player) {\n\t\t\t\tthis.resultsElem?.classList.remove('hide');\n\t\t\t\t(this.dpsResultElem as HTMLElement).textContent = `${playerDps.toFixed(1)} DPS`;\n\n\t\t\t\tif (referenceData) formatDeltaTextElem(this.referenceDeltaElem as HTMLElement, referenceDps, playerDps, 1);\n\t\t\t}\n\t\t});\n\n\t\tlet dragEnterCounter = 0;\n\t\tthis.rootElem.ondragenter = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter++;\n\t\t\tthis.rootElem.classList.add('dragto');\n\t\t};\n\t\tthis.rootElem.ondragleave = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter--;\n\t\t\tif (dragEnterCounter <= 0) {\n\t\t\t\tthis.rootElem.classList.remove('dragto');\n\t\t\t}\n\t\t};\n\t\tthis.rootElem.ondragover = event => event.preventDefault();\n\t\tthis.rootElem.ondrop = event => {\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst dropData = event.dataTransfer!.getData('text/plain');\n\n\t\t\tevent.preventDefault();\n\t\t\tdragEnterCounter = 0;\n\t\t\tthis.rootElem.classList.remove('dragto');\n\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tif (this.raidPicker.currentDragPlayer == null && dropData.length == 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this.raidPicker.currentDragPlayerFromIndex == this.raidIndex) {\n\t\t\t\t\tthis.raidPicker.clearDragPlayer();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst dragType = this.raidPicker.currentDragType;\n\n\t\t\t\tif (this.raidPicker.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\t\t\tconst fromPlayerPicker = this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);\n\t\t\t\t\tif (dragType == DragType.Swap) {\n\t\t\t\t\t\tfromPlayerPicker.setPlayer(eventID, this.player, dragType);\n\t\t\t\t\t} else if (dragType == DragType.Move) {\n\t\t\t\t\t\tfromPlayerPicker.setPlayer(eventID, null, dragType);\n\t\t\t\t\t}\n\t\t\t\t} else if (this.raidPicker.currentDragPlayer == null) {\n\t\t\t\t\t// This would be a copy from another window.\n\t\t\t\t\tconst binary = atob(dropData);\n\t\t\t\t\tconst bytes = new Uint8Array(binary.length);\n\t\t\t\t\tfor (let i = 0; i < bytes.length; i++) {\n\t\t\t\t\t\tbytes[i] = binary.charCodeAt(i);\n\t\t\t\t\t}\n\t\t\t\t\tconst playerProto = PlayerProto.fromBinary(bytes);\n\n\t\t\t\t\tconst localPlayer = new Player(getPlayerSpecFromPlayer(playerProto), this.raidPicker.raidSimUI.sim);\n\t\t\t\t\tlocalPlayer.fromProto(eventID, playerProto);\n\t\t\t\t\tthis.raidPicker.currentDragPlayer = localPlayer;\n\t\t\t\t}\n\n\t\t\t\tif (dragType == DragType.Copy) {\n\t\t\t\t\tthis.setPlayer(eventID, this.raidPicker.currentDragPlayer!.clone(eventID), dragType);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setPlayer(eventID, this.raidPicker.currentDragPlayer, dragType);\n\t\t\t\t}\n\n\t\t\t\tthis.raidPicker.clearDragPlayer();\n\t\t\t});\n\t\t};\n\n\t\tthis.update();\n\t}\n\n\tsetPlayer(eventID: EventID, newPlayer: Player<any> | null, dragType: DragType) {\n\t\tif (newPlayer == this.player) {\n\t\t\treturn;\n\t\t}\n\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.player = newPlayer;\n\t\t\tif (newPlayer) {\n\t\t\t\tthis.partyPicker.party.setPlayer(eventID, this.index, newPlayer);\n\n\t\t\t\tif (dragType == DragType.New) {\n\t\t\t\t\tapplyNewPlayerAssignments(eventID, newPlayer, this.raidPicker.raid);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.partyPicker.party.setPlayer(eventID, this.index, newPlayer);\n\t\t\t\tthis.partyPicker.party.compChangeEmitter.emit(eventID);\n\t\t\t}\n\t\t});\n\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tif (this.player == null) {\n\t\t\tthis.rootElem.className = 'player-picker-root player';\n\t\t\tthis.rootElem.innerHTML = '';\n\n\t\t\tthis.labelElem = null;\n\t\t\tthis.iconElem = null;\n\t\t\tthis.nameElem = null;\n\t\t\tthis.resultsElem = null;\n\t\t\tthis.dpsResultElem = null;\n\t\t\tthis.referenceDeltaElem = null;\n\t\t} else {\n\t\t\tconst classCssClass = PlayerClasses.getCssClass(this.player.getPlayerClass());\n\n\t\t\tthis.rootElem.className = `player-picker-root player bg-${classCssClass}-dampened`;\n\t\t\tthis.rootElem.innerHTML = `\n\t\t\t\t<div class=\"player-label\">\n\t\t\t\t\t<img class=\"player-icon\" src=\"${this.player.getSpecIcon()}\" draggable=\"true\" />\n\t\t\t\t\t<div class=\"player-details\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclass=\"player-name text-${classCssClass}\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue=\"${this.player.getName()}\"\n\t\t\t\t\t\t\tspellcheck=\"false\"\n\t\t\t\t\t\t\tmaxlength=\"15\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div class=\"player-results hide\">\n\t\t\t\t\t\t\t<span class=\"player-results-dps\"></span>\n\t\t\t\t\t\t\t<span class=\"player-results-reference-delta\"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"player-options\">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-edit\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Click to Edit\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-edit fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-copy link-warning\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"true\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Drag to Copy\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-copy fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-delete link-danger\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Click to Delete\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-times fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t`;\n\n\t\t\tthis.labelElem = this.rootElem.querySelector('.player-label') as HTMLElement;\n\t\t\tthis.iconElem = this.rootElem.querySelector('.player-icon') as HTMLImageElement;\n\t\t\tthis.nameElem = this.rootElem.querySelector('.player-name') as HTMLInputElement;\n\t\t\tthis.resultsElem = this.rootElem.querySelector('.player-results') as HTMLElement;\n\t\t\tthis.dpsResultElem = this.rootElem.querySelector('.player-results-dps') as HTMLElement;\n\t\t\tthis.referenceDeltaElem = this.rootElem.querySelector('.player-results-reference-delta') as HTMLElement;\n\n\t\t\tthis.bindPlayerEvents();\n\t\t}\n\t}\n\n\tprivate bindPlayerEvents() {\n\t\tthis.nameElem?.addEventListener('input', _event => {\n\t\t\tthis.player?.setName(TypedEvent.nextEventID(), this.nameElem?.value || '');\n\t\t});\n\n\t\tthis.nameElem?.addEventListener('mousedown', _event => {\n\t\t\tthis.partyPicker.rootElem.setAttribute('draggable', 'false');\n\t\t});\n\n\t\tthis.nameElem?.addEventListener('mouseup', _event => {\n\t\t\tthis.partyPicker.rootElem.setAttribute('draggable', 'true');\n\t\t});\n\n\t\tconst emptyName = 'Unnamed';\n\t\tthis.nameElem?.addEventListener('focusout', _event => {\n\t\t\tif (this.nameElem && !this.nameElem.value) {\n\t\t\t\tthis.nameElem.value = emptyName;\n\t\t\t\tthis.player?.setName(TypedEvent.nextEventID(), emptyName);\n\t\t\t}\n\t\t});\n\n\t\tconst dragStart = (event: DragEvent, type: DragType) => {\n\t\t\tif (this.player == null) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.dataTransfer!.dropEffect = 'move';\n\t\t\tevent.dataTransfer!.effectAllowed = 'all';\n\n\t\t\tif (this.player) {\n\t\t\t\tconst playerDataProto = this.player.toProto(true);\n\t\t\t\tevent.dataTransfer!.setData('text/plain', btoa(String.fromCharCode(...PlayerProto.toBinary(playerDataProto))));\n\t\t\t}\n\n\t\t\tthis.raidPicker.setDragPlayer(this.player, this.raidIndex, type);\n\t\t};\n\n\t\tconst editElem = this.rootElem.querySelector('.player-edit') as HTMLElement;\n\t\tconst copyElem = this.rootElem.querySelector('.player-copy') as HTMLElement;\n\t\tconst deleteElem = this.rootElem.querySelector('.player-delete') as HTMLElement;\n\n\t\tconst _editTooltip = Tooltip.getOrCreateInstance(editElem);\n\t\tconst _copyTooltip = Tooltip.getOrCreateInstance(copyElem);\n\t\tconst deleteTooltip = Tooltip.getOrCreateInstance(deleteElem);\n\n\t\t(this.iconElem as HTMLElement).ondragstart = event => {\n\t\t\tevent.dataTransfer!.setDragImage(this.rootElem, 20, 20);\n\t\t\tdragStart(event, DragType.Swap);\n\t\t};\n\t\teditElem.onclick = _event => {\n\t\t\tnew PlayerEditorModal(this.player as Player<any>);\n\t\t};\n\t\tcopyElem.ondragstart = event => {\n\t\t\tevent.dataTransfer!.setDragImage(this.rootElem, 20, 20);\n\t\t\tdragStart(event, DragType.Copy);\n\t\t};\n\t\tdeleteElem.onclick = _event => {\n\t\t\tdeleteTooltip.hide();\n\t\t\tthis.setPlayer(TypedEvent.nextEventID(), null, DragType.None);\n\t\t};\n\t}\n}\n\nclass PlayerEditorModal<SpecType extends Spec> extends BaseModal {\n\tconstructor(player: Player<SpecType>) {\n\t\tsuper(document.body, 'player-editor-modal', {\n\t\t\tcloseButton: { fixed: true },\n\t\t\theader: false,\n\t\t});\n\n\t\tthis.rootElem.id = 'playerEditorModal';\n\t\tthis.body.insertAdjacentHTML(\n\t\t\t'beforeend',\n\t\t\t`\n\t\t\t<div class=\"player-editor within-raid-sim\"></div>\n\t\t`,\n\t\t);\n\n\t\tconst editorRoot = this.rootElem.getElementsByClassName('player-editor')[0] as HTMLElement;\n\t\tconst _individualSim = specSimFactories[player.getSpec()]!(editorRoot, player);\n\t}\n}\n\nclass NewPlayerPicker extends Component {\n\treadonly raidPicker: RaidPicker;\n\n\tconstructor(parent: HTMLElement, raidPicker: RaidPicker) {\n\t\tsuper(parent, 'new-player-picker-root');\n\t\tthis.raidPicker = raidPicker;\n\n\t\tgetEnumValues(Class).forEach(wowClass => {\n\t\t\tif (wowClass == Class.ClassUnknown) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchingPresets = playerPresets.filter(preset => PlayerSpecs.fromProto(preset.spec).classID == wowClass);\n\t\t\tif (matchingPresets.length == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst classPresetsContainer = document.createElement('div');\n\t\t\tclassPresetsContainer.classList.add(\n\t\t\t\t'class-presets-container',\n\t\t\t\t`bg-${PlayerClasses.getCssClass(PlayerClasses.fromProto(wowClass as Class))}-dampened`,\n\t\t\t);\n\t\t\tthis.rootElem.appendChild(classPresetsContainer);\n\n\t\t\tmatchingPresets.forEach(matchingPreset => {\n\t\t\t\tconst playerSpec = PlayerSpecs.fromProto(matchingPreset.spec);\n\t\t\t\tconst presetElemFragment = document.createElement('fragment');\n\t\t\t\tpresetElemFragment.innerHTML = `\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"true\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"${matchingPreset.tooltip ?? PlayerSpecs.getFullSpecName(playerSpec)}\"\n\t\t\t\t\t\tdata-bs-html=\"true\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<img class=\"preset-picker-icon player-icon\" src=\"${matchingPreset ?? playerSpec.getIcon('medium')}\"/>\n\t\t\t\t\t</a>\n\t\t\t\t`;\n\t\t\t\tconst presetElem = presetElemFragment.children[0] as HTMLElement;\n\t\t\t\tclassPresetsContainer.appendChild(presetElem);\n\n\t\t\t\tTooltip.getOrCreateInstance(presetElem);\n\n\t\t\t\tpresetElem.ondragstart = event => {\n\t\t\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\t\tconst dragImage = new Image();\n\t\t\t\t\t\tdragImage.src = matchingPreset.iconUrl ?? playerSpec.getIcon('medium');\n\t\t\t\t\t\tevent.dataTransfer!.setDragImage(dragImage, 30, 30);\n\t\t\t\t\t\tevent.dataTransfer!.setData('text/plain', '');\n\t\t\t\t\t\tevent.dataTransfer!.dropEffect = 'copy';\n\n\t\t\t\t\t\tconst newPlayer = new Player(playerSpec, this.raidPicker.raid.sim);\n\n\t\t\t\t\t\tnewPlayer.applySharedDefaults(eventID);\n\t\t\t\t\t\tnewPlayer.setRace(eventID, matchingPreset.defaultFactionRaces[this.raidPicker.getCurrentFaction()]);\n\t\t\t\t\t\tnewPlayer.setTalentsString(eventID, matchingPreset.talents.talentsString);\n\t\t\t\t\t\tnewPlayer.setGlyphs(eventID, matchingPreset.talents.glyphs || Glyphs.create());\n\t\t\t\t\t\tnewPlayer.setSpecOptions(eventID, matchingPreset.specOptions);\n\t\t\t\t\t\tnewPlayer.setConsumes(eventID, matchingPreset.consumes);\n\t\t\t\t\t\tnewPlayer.setName(eventID, matchingPreset.defaultName ?? playerSpec.friendlyName);\n\t\t\t\t\t\tnewPlayer.setProfession1(eventID, matchingPreset.otherDefaults?.profession1 || Profession.Engineering);\n\t\t\t\t\t\tnewPlayer.setProfession2(eventID, matchingPreset.otherDefaults?.profession2 || Profession.Jewelcrafting);\n\t\t\t\t\t\tnewPlayer.setDistanceFromTarget(eventID, matchingPreset.otherDefaults?.distanceFromTarget || 0);\n\n\t\t\t\t\t\t// Need to wait because the gear might not be loaded yet.\n\t\t\t\t\t\tthis.raidPicker.raid.sim.waitForInit().then(() => {\n\t\t\t\t\t\t\tconst phase = Math.min(this.raidPicker.getCurrentPhase(), LATEST_PHASE_WITH_ALL_PRESETS);\n\t\t\t\t\t\t\tconst gearSet = matchingPreset.defaultGear[this.raidPicker.getCurrentFaction()][phase];\n\t\t\t\t\t\t\tnewPlayer.setGear(eventID, this.raidPicker.raid.sim.db.lookupEquipmentSpec(gearSet));\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.raidPicker.setDragPlayer(newPlayer, NEW_PLAYER, DragType.New);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n}\n\nfunction applyNewPlayerAssignments(eventID: EventID, newPlayer: Player<any>, raid: Raid) {\n\tif (newPlayer.getPlayerSpec().isTankSpec) {\n\t\tconst tanks = raid.getTanks();\n\t\tconst emptyIdx = tanks.findIndex(tank => raid.getPlayerFromUnitReference(tank) == null);\n\t\tif (emptyIdx == -1) {\n\t\t\tif (tanks.length < 3) {\n\t\t\t\traid.setTanks(eventID, tanks.concat([newPlayer.makeUnitReference()]));\n\t\t\t}\n\t\t} else {\n\t\t\ttanks[emptyIdx] = newPlayer.makeUnitReference();\n\t\t\traid.setTanks(eventID, tanks);\n\t\t}\n\t}\n\n\t// Spec-specific assignments. For most cases, default to buffing self.\n\tif (newPlayer.getSpec() == Spec.SpecBalanceDruid) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as BalanceDruidOptions;\n\t\tnewOptions.classOptions!.innervateTarget = newUnitReference(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t} else if (newPlayer.getSpec() == Spec.SpecArcaneMage) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as ArcaneMage_Options;\n\t\tnewOptions.focusMagicTarget = newUnitReference(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n","import { SavedDataManager } from \"../core/components/saved_data_manager\";\nimport { SimTab } from \"../core/components/sim_tab\";\nimport { Raid as RaidProto } from \"../core/proto/api\";\nimport { BlessingsAssignments, SavedRaid } from \"../core/proto/ui\";\nimport { EventID, TypedEvent } from \"../core/typed_event\";\n//import { RaidStats } from \"./_raid_stats\";\nimport { RaidPicker } from \"./raid_picker\";\nimport { RaidSimUI } from \"./raid_sim_ui\";\n\nexport class RaidTab extends SimTab {\n\tprotected simUI: RaidSimUI;\n\n\treadonly leftPanel: HTMLElement;\n\treadonly rightPanel: HTMLElement;\n\n\tconstructor(parentElem: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parentElem, simUI, { identifier: 'raid-tab', title: 'Raid' });\n\t\tthis.simUI = simUI;\n\n\t\tthis.rootElem.classList.add('active', 'show')\n\n\t\tthis.leftPanel = document.createElement('div');\n\t\tthis.leftPanel.classList.add('raid-tab-left', 'tab-panel-left');\n\n\t\tthis.rightPanel = document.createElement('div');\n\t\tthis.rightPanel.classList.add('raid-tab-right', 'tab-panel-right');\n\n\t\tthis.contentContainer.appendChild(this.leftPanel);\n\t\tthis.contentContainer.appendChild(this.rightPanel);\n\n\t\tthis.buildTabContent();\n\t}\n\n\tprotected buildTabContent() {\n\t\tthis.simUI.raidPicker = new RaidPicker(this.leftPanel, this.simUI);\n\t\t//new RaidStats(this.leftPanel, this.simUI);\n\n\t\tconst savedRaidManager = new SavedDataManager<RaidSimUI, SavedRaid>(this.rightPanel, this.simUI, {\n\t\t\tlabel: 'Raid',\n\t\t\theader: { title: 'Saved Raid Groups' },\n\t\t\tstorageKey: this.simUI.getSavedRaidStorageKey(),\n\t\t\tgetData: (raidSimUI: RaidSimUI) => SavedRaid.create({\n\t\t\t\traid: this.simUI.sim.raid.toProto(),\n\t\t\t\tblessings: this.simUI.blessingsPicker!.getAssignments(),\n\t\t\t\tfaction: this.simUI.sim.getFaction(),\n\t\t\t\tphase: this.simUI.sim.getPhase(),\n\t\t\t}),\n\t\t\tsetData: (eventID: EventID, raidSimUI: RaidSimUI, newRaid: SavedRaid) => {\n\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\tthis.simUI.sim.raid.fromProto(eventID, newRaid.raid || RaidProto.create());\n\t\t\t\t\tthis.simUI.blessingsPicker!.setAssignments(eventID, newRaid.blessings || BlessingsAssignments.create());\n\t\t\t\t\tif (newRaid.faction) this.simUI.sim.setFaction(eventID, newRaid.faction);\n\t\t\t\t\tif (newRaid.phase) this.simUI.sim.setPhase(eventID, newRaid.phase);\n\t\t\t\t});\n\t\t\t},\n\t\t\tchangeEmitters: [this.simUI.changeEmitter, this.simUI.sim.changeEmitter],\n\t\t\tequals: (a: SavedRaid, b: SavedRaid) => {\n\t\t\t\treturn SavedRaid.equals(a, b);\n\t\t\t},\n\t\t\ttoJson: (a: SavedRaid) => SavedRaid.toJson(a),\n\t\t\tfromJson: (obj: any) => SavedRaid.fromJson(obj),\n\t\t}\n\t\t);\n\t\tthis.simUI.sim.waitForInit().then(() => {\n\t\t\tsavedRaidManager.loadUserData();\n\t\t});\n\t}\n}\n","import { Input, InputConfig } from '../components/input.js';\nimport { Player } from '../player.js';\nimport { PlayerClasses } from '../player_classes';\nimport { UnitReference } from '../proto/common.js';\nimport { emptyUnitReference } from '../proto_utils/utils.js';\nimport { Raid } from '../raid.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\n\nexport interface UnitReferencePickerConfig<ModObject> extends InputConfig<ModObject, UnitReference> {\n\tnoTargetLabel: string;\n\tcompChangeEmitter: TypedEvent<void>;\n}\n\ninterface OptionElemOptions {\n\tisDropdown?: boolean;\n\tplayer: Player<any> | null;\n}\n\n// Dropdown menu for selecting a player.\nexport class UnitReferencePicker<ModObject> extends Input<ModObject, UnitReference> {\n\tprivate readonly config: UnitReferencePickerConfig<ModObject>;\n\tprivate readonly raid: Raid;\n\n\tprivate curPlayer: Player<any> | null;\n\tprivate curUnitReference: UnitReference;\n\n\tprivate currentOptions: Array<OptionElemOptions>;\n\n\tprivate readonly buttonElem: HTMLElement;\n\tprivate readonly dropdownElem: HTMLElement;\n\n\tconstructor(parent: HTMLElement, raid: Raid, modObj: ModObject, config: UnitReferencePickerConfig<ModObject>) {\n\t\tsuper(parent, 'raid-target-picker-root', modObj, config);\n\t\tthis.rootElem.classList.add('dropdown');\n\t\tthis.config = config;\n\t\tthis.raid = raid;\n\t\tthis.curPlayer = this.raid.getPlayerFromUnitReference(config.getValue(modObj));\n\t\tthis.curUnitReference = this.getInputValue();\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<a\n\t\t\t\tclass=\"raid-target-picker-button\"\n\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\trole=\"button\"\n\t\t\t\tdata-bs-toggle=\"dropdown\"\n\t\t\t></a>\n\t\t\t<div class=\"dropdown-menu\"></div>\n    `;\n\n\t\tthis.buttonElem = this.rootElem.querySelector('.raid-target-picker-button') as HTMLElement;\n\t\tthis.dropdownElem = this.rootElem.querySelector('.dropdown-menu') as HTMLElement;\n\n\t\tthis.buttonElem.addEventListener('click', event => event.preventDefault());\n\n\t\tthis.currentOptions = [];\n\t\tthis.updateOptions(TypedEvent.nextEventID());\n\t\tconfig.compChangeEmitter.on(eventID => this.updateOptions(eventID));\n\n\t\tthis.init();\n\t}\n\n\tprivate makeTargetOptions(): Array<OptionElemOptions> {\n\t\tconst unassignedOption = { player: null, isDropdown: true };\n\t\tconst playerOptions = this.raid\n\t\t\t.getPlayers()\n\t\t\t.filter(player => player != null)\n\t\t\t.map(player => {\n\t\t\t\treturn { player: player, isDropdown: true };\n\t\t\t});\n\n\t\treturn [unassignedOption, ...playerOptions];\n\t}\n\n\tprivate updateOptions(eventID: EventID) {\n\t\tthis.currentOptions = this.makeTargetOptions();\n\n\t\tthis.dropdownElem.innerHTML = '';\n\t\tthis.currentOptions.forEach(option => this.dropdownElem.appendChild(this.makeOption(option)));\n\n\t\tconst prevUnitReference = this.curUnitReference;\n\t\tthis.curUnitReference = this.getInputValue();\n\t\tif (!UnitReference.equals(prevUnitReference, this.curUnitReference)) {\n\t\t\tthis.inputChanged(eventID);\n\t\t} else {\n\t\t\tthis.setInputValue(this.curUnitReference);\n\t\t}\n\t}\n\n\tprivate makeOption(data: OptionElemOptions): HTMLElement {\n\t\tconst option = UnitReferencePicker.makeOptionElem(data);\n\n\t\toption.addEventListener('click', event => {\n\t\t\tevent.preventDefault();\n\t\t\tthis.curPlayer = data.player;\n\t\t\tthis.curUnitReference = this.getInputValue();\n\t\t\tthis.inputChanged(TypedEvent.nextEventID());\n\t\t});\n\n\t\treturn option;\n\t}\n\n\tgetInputElem(): HTMLElement {\n\t\treturn this.buttonElem;\n\t}\n\n\tgetInputValue(): UnitReference {\n\t\tif (this.curPlayer) {\n\t\t\treturn this.curPlayer.makeUnitReference();\n\t\t} else {\n\t\t\treturn emptyUnitReference();\n\t\t}\n\t}\n\n\tsetInputValue(newValue: UnitReference) {\n\t\tthis.curUnitReference = UnitReference.clone(newValue);\n\t\tthis.curPlayer = this.raid.getPlayerFromUnitReference(this.curUnitReference);\n\n\t\tconst optionData = this.currentOptions.find(optionData => optionData.player == this.curPlayer);\n\n\t\tif (optionData) this.buttonElem.innerHTML = UnitReferencePicker.makeOptionElem({ player: optionData.player }).outerHTML;\n\t}\n\n\tstatic makeOptionElem(data: OptionElemOptions): HTMLElement {\n\t\tconst classCssClass = data.player ? PlayerClasses.getCssClass(data.player.getPlayerClass()) : '';\n\t\tconst playerFragment = document.createElement('fragment');\n\n\t\tplayerFragment.innerHTML = `\n\t\t\t<div class=\"player ${classCssClass ? `bg-${classCssClass}-dampened` : ''}\">\n\t\t\t\t<div class=\"player-label\">\n\t\t\t\t\t${data.player ? `<img class=\"player-icon\" src=\"${data.player.getSpecIcon()}\" draggable=\"false\"/>` : ''}\n\t\t\t\t\t<div class=\"player-details\">\n\t\t\t\t\t\t<span class=\"player-name ${classCssClass ? `text-${classCssClass}` : ''}\">\n\t\t\t\t\t\t\t${data.player ? data.player.getName() : 'Unassigned'}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\n\t\tif (data.isDropdown) {\n\t\t\tplayerFragment.innerHTML = `\n\t\t\t\t<a class=\"dropdown-option\" href=\"javascript:void(0) role=\"button\">${playerFragment.innerHTML}</a>\n\t\t\t`;\n\t\t}\n\n\t\treturn playerFragment.children[0] as HTMLElement;\n\t}\n}\n","import { Component } from '../core/components/component';\nimport { UnitReferencePicker } from '../core/components/raid_target_picker';\nimport { Player } from '../core/player';\nimport { Class, Spec, UnitReference } from '../core/proto/common';\nimport { DeathKnightTalents } from '../core/proto/death_knight';\nimport { PriestTalents } from '../core/proto/priest';\nimport { emptyUnitReference, RogueSpecs } from '../core/proto_utils/utils';\nimport { EventID, TypedEvent } from '../core/typed_event';\nimport { RaidSimUI } from './raid_sim_ui';\n\nexport class AssignmentsPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly innervatesPicker: InnervatesPicker;\n\tprivate readonly powerInfusionsPicker: PowerInfusionsPicker;\n\tprivate readonly tricksOfTheTradesPicker: TricksOfTheTradesPicker;\n\t//private readonly unholyFrenzyPicker: UnholyFrenzyPicker;\n\tprivate readonly focusMagicsPicker: FocusMagicsPicker;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'assignments-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\n\t\tthis.innervatesPicker = new InnervatesPicker(this.rootElem, raidSimUI);\n\t\tthis.powerInfusionsPicker = new PowerInfusionsPicker(this.rootElem, raidSimUI);\n\t\tthis.tricksOfTheTradesPicker = new TricksOfTheTradesPicker(this.rootElem, raidSimUI);\n\t\t//this.unholyFrenzyPicker = new UnholyFrenzyPicker(this.rootElem, raidSimUI);\n\t\tthis.focusMagicsPicker = new FocusMagicsPicker(this.rootElem, raidSimUI);\n\t}\n}\n\ninterface AssignmentTargetPicker {\n\tplayer: Player<any>;\n\ttargetPicker: UnitReferencePicker<Player<any>>;\n\ttargetPlayer: Player<any> | null;\n}\n\nabstract class AssignedBuffPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly playersContainer: HTMLElement;\n\n\tprivate targetPickers: Array<AssignmentTargetPicker>;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'assigned-buff-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.targetPickers = [];\n\n\t\tthis.playersContainer = document.createElement('div');\n\t\tthis.playersContainer.classList.add('assigned-buff-container');\n\t\tthis.rootElem.appendChild(this.playersContainer);\n\n\t\tthis.raidSimUI.changeEmitter.on(_eventID => this.update());\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tthis.playersContainer.innerHTML = `\n\t\t\t<label class=\"assignmented-buff-label form-label\">${this.getTitle()}</label>\n\t\t`;\n\n\t\tconst sourcePlayers = this.getSourcePlayers();\n\t\tif (sourcePlayers.length == 0) this.rootElem.classList.add('hide');\n\t\telse this.rootElem.classList.remove('hide');\n\n\t\tthis.targetPickers = sourcePlayers.map((sourcePlayer, _sourcePlayerIndex) => {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('assigned-buff-player', 'input-inline');\n\t\t\tthis.playersContainer.appendChild(row);\n\n\t\t\tconst sourceElem = document.createElement('div');\n\t\t\tsourceElem.classList.add('raid-target-picker-root');\n\t\t\tsourceElem.appendChild(UnitReferencePicker.makeOptionElem({ player: sourcePlayer, isDropdown: false }));\n\t\t\trow.appendChild(sourceElem);\n\n\t\t\tconst arrow = document.createElement('i');\n\t\t\tarrow.classList.add('assigned-buff-arrow', 'fa', 'fa-arrow-right');\n\t\t\trow.appendChild(arrow);\n\n\t\t\tconst raidTargetPicker: UnitReferencePicker<Player<any>> | null = new UnitReferencePicker<Player<any>>(row, this.raidSimUI.sim.raid, sourcePlayer, {\n\t\t\t\textraCssClasses: ['assigned-buff-target-picker'],\n\t\t\t\tnoTargetLabel: 'Unassigned',\n\t\t\t\tcompChangeEmitter: this.raidSimUI.sim.raid.compChangeEmitter,\n\n\t\t\t\tchangedEvent: (player: Player<any>) => player.specOptionsChangeEmitter,\n\t\t\t\tgetValue: (player: Player<any>) => this.getPlayerValue(player),\n\t\t\t\tsetValue: (eventID: EventID, player: Player<any>, newValue: UnitReference) => this.setPlayerValue(eventID, player, newValue),\n\t\t\t});\n\n\t\t\tconst targetPickerData = {\n\t\t\t\tplayer: sourcePlayer,\n\t\t\t\ttargetPicker: raidTargetPicker!,\n\t\t\t\ttargetPlayer: this.raidSimUI.sim.raid.getPlayerFromUnitReference(raidTargetPicker!.getInputValue()),\n\t\t\t};\n\n\t\t\traidTargetPicker!.changeEmitter.on(_eventID => {\n\t\t\t\ttargetPickerData.targetPlayer = this.raidSimUI.sim.raid.getPlayerFromUnitReference(raidTargetPicker!.getInputValue());\n\t\t\t});\n\n\t\t\treturn targetPickerData;\n\t\t});\n\t}\n\n\tabstract getTitle(): string;\n\tabstract getSourcePlayers(): Array<Player<any>>;\n\n\tabstract getPlayerValue(player: Player<any>): UnitReference;\n\tabstract setPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference): void;\n}\n\nclass InnervatesPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Innervate';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassDruid));\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecBalanceDruid>).getSpecOptions().classOptions?.innervateTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecBalanceDruid>).getSpecOptions();\n\t\tnewOptions.classOptions!.innervateTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass PowerInfusionsPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Power Infusion';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI\n\t\t\t.getActivePlayers()\n\t\t\t.filter(player => player.isSpec(Spec.SpecDisciplinePriest) && (player.getTalents() as PriestTalents).powerInfusion);\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecDisciplinePriest>).getSpecOptions().powerInfusionTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecDisciplinePriest>).getSpecOptions();\n\t\tnewOptions.powerInfusionTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass TricksOfTheTradesPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Tricks of the Trade';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassRogue));\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<RogueSpecs>).getSpecOptions().classOptions!.tricksOfTheTradeTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<RogueSpecs>).getSpecOptions();\n\t\tnewOptions.classOptions!.tricksOfTheTradeTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\n// class UnholyFrenzyPicker extends AssignedBuffPicker {\n// \tgetTitle(): string {\n// \t\treturn 'Unholy Frenzy';\n// \t}\n\n// \tgetSourcePlayers(): Array<Player<any>> {\n// \t\treturn this.raidSimUI\n// \t\t\t.getActivePlayers()\n// \t\t\t.filter(player => player.isSpec(Spec.SpecUnholyDeathKnight) && (player.getTalents() as DeathKnightTalents).hysteria);\n// \t}\n\n// \tgetPlayerValue(player: Player<any>): UnitReference {\n// \t\treturn (player as Player<Spec.SpecUnholyDeathKnight>).getSpecOptions().unholyFrenzyTarget || emptyUnitReference();\n// \t}\n\n// \tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n// \t\tconst newOptions = (player as Player<Spec.SpecUnholyDeathKnight>).getSpecOptions();\n// \t\tnewOptions.unholyFrenzyTarget = newValue;\n// \t\tplayer.setSpecOptions(eventID, newOptions);\n// \t}\n// }\n\nclass FocusMagicsPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Focus Magic';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isSpec(Spec.SpecArcaneMage));\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecArcaneMage>).getSpecOptions().focusMagicTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecArcaneMage>).getSpecOptions();\n\t\tnewOptions.focusMagicTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n","import { Tooltip } from 'bootstrap';\n\nimport { Component } from '../core/components/component';\nimport { IconEnumPicker } from '../core/components/icon_enum_picker';\nimport { PlayerClasses } from '../core/player_classes';\nimport { Paladin } from '../core/player_classes/paladin';\nimport { PlayerSpec } from '../core/player_spec';\nimport { Class as ClassProto } from '../core/proto/common';\nimport { Blessings } from '../core/proto/paladin';\nimport { BlessingsAssignments } from '../core/proto/ui';\nimport { ActionId } from '../core/proto_utils/action_id';\nimport { makeDefaultBlessings } from '../core/proto_utils/utils';\nimport { EventID, TypedEvent } from '../core/typed_event';\nimport { implementedSpecs } from './presets';\nimport { RaidSimUI } from './raid_sim_ui';\n\nconst MAX_PALADINS = 4;\n\nexport class BlessingsPicker extends Component {\n\treadonly simUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly pickers: Array<Array<IconEnumPicker<this, Blessings>>> = [];\n\n\tprivate assignments: BlessingsAssignments;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'blessings-picker-root');\n\t\tthis.simUI = raidSimUI;\n\t\tthis.assignments = BlessingsAssignments.clone(makeDefaultBlessings(4));\n\n\t\tconst playerSpecs = PlayerClasses.naturalOrder\n\t\t\t.map(playerClass => Object.values(playerClass.specs))\n\t\t\t.flat()\n\t\t\t.filter(spec => implementedSpecs.includes(spec.specID));\n\t\tconst paladinIndexes = [...Array(MAX_PALADINS).keys()];\n\n\t\tplayerSpecs.map(playerSpec => {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('blessings-picker-row');\n\t\t\tthis.rootElem.appendChild(row);\n\n\t\t\trow.append(this.buildSpecIcon(playerSpec));\n\n\t\t\tconst container = document.createElement('div');\n\t\t\tcontainer.classList.add('blessings-picker-container');\n\t\t\trow.appendChild(container);\n\n\t\t\tpaladinIndexes.forEach(paladinIdx => {\n\t\t\t\tif (!this.pickers[paladinIdx]) this.pickers.push([]);\n\n\t\t\t\tconst blessingPicker = new IconEnumPicker(container, this, {\n\t\t\t\t\textraCssClasses: ['blessing-picker'],\n\t\t\t\t\tnumColumns: 1,\n\t\t\t\t\tvalues: [\n\t\t\t\t\t\t{ color: Paladin.hexColor, value: Blessings.BlessingUnknown },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(20217), value: Blessings.BlessingOfKings },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(19740), value: Blessings.BlessingOfMight },\n\t\t\t\t\t],\n\t\t\t\t\tequals: (a: Blessings, b: Blessings) => a == b,\n\t\t\t\t\tzeroValue: Blessings.BlessingUnknown,\n\t\t\t\t\tenableWhen: (_picker: BlessingsPicker) => {\n\t\t\t\t\t\tconst numPaladins = Math.min(this.simUI.getClassCount(ClassProto.ClassPaladin), MAX_PALADINS);\n\t\t\t\t\t\treturn paladinIdx < numPaladins;\n\t\t\t\t\t},\n\t\t\t\t\tchangedEvent: (picker: BlessingsPicker) => picker.changeEmitter,\n\t\t\t\t\tgetValue: (picker: BlessingsPicker) => picker.assignments.paladins[paladinIdx]?.blessings[playerSpec.specID] || Blessings.BlessingUnknown,\n\t\t\t\t\tsetValue: (eventID: EventID, picker: BlessingsPicker, newValue: number) => {\n\t\t\t\t\t\tconst currentValue = picker.assignments.paladins[paladinIdx].blessings[playerSpec.specID];\n\t\t\t\t\t\tif (currentValue != newValue) {\n\t\t\t\t\t\t\tpicker.assignments.paladins[paladinIdx].blessings[playerSpec.specID] = newValue;\n\t\t\t\t\t\t\tthis.changeEmitter.emit(eventID);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tthis.pickers[paladinIdx].push(blessingPicker);\n\t\t\t});\n\n\t\t\treturn row;\n\t\t});\n\n\t\tthis.updatePickers();\n\t\tthis.simUI.compChangeEmitter.on(_eventID => this.updatePickers());\n\t}\n\n\tprivate updatePickers() {\n\t\tfor (let i = 0; i < MAX_PALADINS; i++) {\n\t\t\tthis.pickers[i].forEach(picker => picker.update());\n\t\t}\n\t}\n\n\tprivate buildSpecIcon(spec: PlayerSpec<any>): HTMLElement {\n\t\tconst fragment = document.createElement('fragment');\n\t\tfragment.innerHTML = `\n\t\t\t<div class=\"blessings-picker-spec\">\n\t\t\t\t<img\n\t\t\t\t\tsrc=\"${spec.getIcon('medium')}\"\n\t\t\t\t\tclass=\"blessings-spec-icon\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t`;\n\n\t\tconst icon = fragment.querySelector('.blessings-spec-icon') as HTMLElement;\n\t\tTooltip.getOrCreateInstance(icon, { title: spec.friendlyName });\n\n\t\treturn fragment.children[0] as HTMLElement;\n\t}\n\n\tgetAssignments(): BlessingsAssignments {\n\t\t// Defensive copy.\n\t\treturn BlessingsAssignments.clone(this.assignments);\n\t}\n\n\tsetAssignments(eventID: EventID, newAssignments: BlessingsAssignments) {\n\t\tthis.assignments = BlessingsAssignments.clone(newAssignments);\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n}\n","import { Component } from '../core/components/component';\nimport { UnitReferencePicker } from '../core/components/raid_target_picker';\n\nimport { Raid } from '../core/raid';\nimport { EventID } from '../core/typed_event';\n\nimport { UnitReference } from '../core/proto/common';\nimport { emptyUnitReference } from '../core/proto_utils/utils';\n\nimport { RaidSimUI } from './raid_sim_ui';\n\nconst MAX_TANKS = 4;\n\nexport class TanksPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'tanks-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\n\t\tconst raid = this.raidSimUI.sim.raid;\n\n\t\tfor (let i = 0; i < MAX_TANKS; i++) {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('tank-picker-row', 'input-inline');\n\t\t\tthis.rootElem.appendChild(row);\n\n\t\t\tconst labelElem = document.createElement('label');\n\t\t\tlabelElem.textContent = i == 0 ? 'Main Tank' : `Tank ${i + 1}`;\n\t\t\tlabelElem.classList.add('tank-picker-label', 'form-label');\n\t\t\trow.appendChild(labelElem);\n\n\t\t\tnew UnitReferencePicker<Raid>(row, raid, raid, {\n\t\t\t\textraCssClasses: ['tank-picker'],\n\t\t\t\tnoTargetLabel: 'Unassigned',\n\t\t\t\tcompChangeEmitter: raid.compChangeEmitter,\n\n\t\t\t\tchangedEvent: (raid: Raid) => raid.tanksChangeEmitter,\n\t\t\t\tgetValue: (raid: Raid) => raid.getTanks()[i] || emptyUnitReference(),\n\t\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: UnitReference) => {\n\t\t\t\t\tconst tanks = raid.getTanks();\n\t\t\t\t\tfor (let j = 0; j < i; j++) {\n\t\t\t\t\t\tif (!tanks[j]) {\n\t\t\t\t\t\t\ttanks.push(emptyUnitReference());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttanks[i] = newValue;\n\t\t\t\t\traid.setTanks(eventID, tanks);\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n}\n","import { ContentBlock } from '../core/components/content_block';\nimport { EncounterPicker } from '../core/components/encounter_picker';\nimport { IconPicker } from '../core/components/icon_picker';\nimport { SavedDataManager } from '../core/components/saved_data_manager';\nimport { SimTab } from '../core/components/sim_tab';\nimport * as Tooltips from '../core/constants/tooltips.js';\nimport { Encounter } from '../core/encounter';\nimport { RaidBuffs } from '../core/proto/common';\nimport { SavedEncounter } from '../core/proto/ui';\nimport { ActionId } from '../core/proto_utils/action_id';\nimport { Raid } from '../core/raid';\nimport { EventID } from '../core/typed_event';\nimport { AssignmentsPicker } from './assignments_picker';\nimport { BlessingsPicker } from './blessings_picker';\nimport { RaidSimUI } from './raid_sim_ui';\nimport { TanksPicker } from './tanks_picker';\n\nexport class SettingsTab extends SimTab {\n\tprotected simUI: RaidSimUI;\n\n\treadonly leftPanel: HTMLElement;\n\treadonly rightPanel: HTMLElement;\n\n\treadonly column1: HTMLElement = this.buildColumn(1, 'raid-settings-col');\n\treadonly column2: HTMLElement = this.buildColumn(2, 'raid-settings-col');\n\treadonly column3: HTMLElement = this.buildColumn(3, 'raid-settings-col');\n\n\tconstructor(parentElem: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parentElem, simUI, { identifier: 'raid-settings-tab', title: 'Settings' });\n\t\tthis.simUI = simUI;\n\n\t\tthis.leftPanel = document.createElement('div');\n\t\tthis.leftPanel.classList.add('raid-settings-tab-left', 'tab-panel-left');\n\n\t\tthis.leftPanel.appendChild(this.column1);\n\t\tthis.leftPanel.appendChild(this.column2);\n\t\tthis.leftPanel.appendChild(this.column3);\n\n\t\tthis.rightPanel = document.createElement('div');\n\t\tthis.rightPanel.classList.add('raid-settings-tab-right', 'tab-panel-right', 'within-raid-sim-hide');\n\n\t\tthis.contentContainer.appendChild(this.leftPanel);\n\t\tthis.contentContainer.appendChild(this.rightPanel);\n\n\t\tthis.buildTabContent();\n\t}\n\n\tprotected buildTabContent() {\n\t\tthis.buildEncounterSettings();\n\t\tthis.buildConsumesSettings();\n\n\t\tthis.buildTankSettings();\n\t\tthis.buildAssignmentSettings();\n\t\tthis.buildOtherSettings();\n\n\t\tthis.buildBlessingsPicker();\n\t\tthis.buildSavedDataPickers();\n\t}\n\n\tprivate buildEncounterSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column1, 'encounter-settings', {\n\t\t\theader: { title: 'Encounter' },\n\t\t});\n\n\t\tnew EncounterPicker(contentBlock.bodyElement, this.simUI.sim.encounter, { showExecuteProportion: true }, this.simUI);\n\t}\n\n\tprivate buildConsumesSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column1, 'consumes-settings', {\n\t\t\theader: { title: 'Consumables' },\n\t\t});\n\n\t\tconst container = document.createElement('div');\n\t\tcontainer.classList.add('consumes-container');\n\n\t\tcontentBlock.bodyElement.appendChild(container);\n\n\t\t// this.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37094), 'scrollOfStamina'),\n\t\t// \tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43466), 'scrollOfStrength'),\n\t\t// \tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43464), 'scrollOfAgility'),\n\t\t// \tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37092), 'scrollOfIntellect'),\n\t\t// \tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37098), 'scrollOfSpirit'),\n\t\t// \tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43468), 'scrollOfProtection'),\n\t\t// \tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(49633), 'drumsOfForgottenKings'),\n\t\t// \tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(49634), 'drumsOfTheWild');\n\t}\n\n\tprivate buildOtherSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column2, 'other-settings', {\n\t\t\theader: { title: 'Other' },\n\t\t});\n\n\t\t// new BooleanPicker(contentBlock.bodyElement, this.simUI.sim.raid, {\n\t\t// \tlabel: 'Stagger Stormstrikes',\n\t\t// \tlabelTooltip: 'When there are multiple Enhancement Shaman in the raid, causes them to coordinate their Stormstrike casts for optimal SS charge usage.',\n\t\t// \tchangedEvent: (raid: Raid) => raid.staggerStormstrikesChangeEmitter,\n\t\t// \tgetValue: (raid: Raid) => raid.getStaggerStormstrikes(),\n\t\t// \tsetValue: (eventID: EventID, raid: Raid, newValue: boolean) => {\n\t\t// \t\traid.setStaggerStormstrikes(eventID, newValue);\n\t\t// \t},\n\t\t// });\n\t}\n\n\tprivate buildTankSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column2, 'tanks-settings', {\n\t\t\theader: { title: 'Tanks' },\n\t\t});\n\n\t\tnew TanksPicker(contentBlock.bodyElement, this.simUI);\n\t}\n\n\tprivate buildAssignmentSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column2, 'assignments-settings', {\n\t\t\theader: { title: 'External Buffs' },\n\t\t});\n\n\t\tnew AssignmentsPicker(contentBlock.bodyElement, this.simUI);\n\t}\n\n\tprivate buildBlessingsPicker() {\n\t\tconst contentBlock = new ContentBlock(this.column3, 'blessings-settings', {\n\t\t\theader: { title: 'Blessings', tooltip: Tooltips.BLESSINGS_SECTION },\n\t\t});\n\n\t\tthis.simUI.blessingsPicker = new BlessingsPicker(contentBlock.bodyElement, this.simUI);\n\t\tthis.simUI.blessingsPicker.changeEmitter.on(eventID => this.simUI.changeEmitter.emit(eventID));\n\t}\n\n\tprivate buildSavedDataPickers() {\n\t\tconst savedEncounterManager = new SavedDataManager<Encounter, SavedEncounter>(this.rightPanel, this.simUI.sim.encounter, {\n\t\t\tlabel: 'Encounter',\n\t\t\theader: { title: 'Saved Encounters' },\n\t\t\tstorageKey: this.simUI.getSavedEncounterStorageKey(),\n\t\t\tgetData: (encounter: Encounter) => SavedEncounter.create({ encounter: encounter.toProto() }),\n\t\t\tsetData: (eventID: EventID, encounter: Encounter, newEncounter: SavedEncounter) => encounter.fromProto(eventID, newEncounter.encounter!),\n\t\t\tchangeEmitters: [this.simUI.sim.encounter.changeEmitter],\n\t\t\tequals: (a: SavedEncounter, b: SavedEncounter) => SavedEncounter.equals(a, b),\n\t\t\ttoJson: (a: SavedEncounter) => SavedEncounter.toJson(a),\n\t\t\tfromJson: (obj: any) => SavedEncounter.fromJson(obj),\n\t\t});\n\n\t\tthis.simUI.sim.waitForInit().then(() => {\n\t\t\tsavedEncounterManager.loadUserData();\n\t\t});\n\t}\n\n\tprivate makeBooleanRaidIconBuffInput(parent: HTMLElement, actionId: ActionId, field: keyof RaidBuffs): IconPicker<Raid, boolean> {\n\t\tconst raid = this.simUI.sim.raid;\n\n\t\treturn new IconPicker<Raid, boolean>(parent, raid, {\n\t\t\tactionId: actionId,\n\t\t\tstates: 2,\n\t\t\tchangedEvent: (raid: Raid) => raid.buffsChangeEmitter,\n\t\t\tgetValue: (raid: Raid) => raid.getBuffs()[field] as unknown as boolean,\n\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: boolean) => {\n\t\t\t\tconst newBuffs = raid.getBuffs();\n\t\t\t\t(newBuffs[field] as unknown as boolean) = newValue;\n\t\t\t\traid.setBuffs(eventID, newBuffs);\n\t\t\t},\n\t\t});\n\t}\n}\n","import { EmbeddedDetailedResults } from '../core/components/detailed_results.js';\nimport { addRaidSimAction, RaidSimResultsManager, ReferenceData } from '../core/components/raid_sim_action.js';\nimport { raidSimStatus } from '../core/launched_sims.js';\nimport { Player } from '../core/player.js';\nimport { Raid as RaidProto } from '../core/proto/api.js';\nimport { Class, Encounter as EncounterProto, TristateEffect } from '../core/proto/common.js';\nimport { Blessings } from '../core/proto/paladin.js';\nimport { BlessingsAssignments, RaidSimSettings } from '../core/proto/ui.js';\nimport { getPlayerSpecFromPlayer } from '../core/proto_utils/utils';\nimport { Sim } from '../core/sim.js';\nimport { SimUI } from '../core/sim_ui.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { BlessingsPicker } from './blessings_picker.js';\nimport * as ImportExport from './import_export.js';\nimport { implementedSpecs } from './presets.js';\nimport { RaidPicker } from './raid_picker.js';\nimport { RaidTab } from './raid_tab.js';\nimport { SettingsTab } from './settings_tab.js';\n\ndeclare let pako: any;\n\nexport interface RaidSimConfig {\n\tknownIssues?: Array<string>;\n}\n\nconst extraKnownIssues: Array<string> = [\n\t//'We\\'re still missing implementations for many specs. If you\\'d like to help us out, check out our <a href=\"https://github.com/wowsims/cata\">Github project</a> or <a href=\"https://discord.gg/jJMPr9JWwx\">join our discord</a>!',\n];\n\nexport class RaidSimUI extends SimUI {\n\tprivate readonly config: RaidSimConfig;\n\tprivate raidSimResultsManager: RaidSimResultsManager | null = null;\n\tpublic raidPicker: RaidPicker | null = null;\n\tpublic blessingsPicker: BlessingsPicker | null = null;\n\n\t// Emits when the raid comp changes. Includes changes to buff bots.\n\treadonly compChangeEmitter = new TypedEvent<void>();\n\treadonly changeEmitter = new TypedEvent<void>();\n\n\treadonly referenceChangeEmitter = new TypedEvent<void>();\n\n\tconstructor(parentElem: HTMLElement, config: RaidSimConfig) {\n\t\tsuper(parentElem, new Sim(), {\n\t\t\tcssClass: 'raid-sim-ui',\n\t\t\tcssScheme: 'raid',\n\t\t\tspec: null,\n\t\t\tsimStatus: raidSimStatus,\n\t\t\tknownIssues: (config.knownIssues || []).concat(extraKnownIssues),\n\t\t});\n\n\t\tthis.config = config;\n\n\t\tthis.sim.raid.compChangeEmitter.on(eventID => this.compChangeEmitter.emit(eventID));\n\t\t[this.compChangeEmitter, this.sim.changeEmitter].forEach(emitter => emitter.on(eventID => this.changeEmitter.emit(eventID)));\n\t\tthis.changeEmitter.on(() => this.recomputeSettingsLayout());\n\n\t\tthis.sim.setModifyRaidProto(raidProto => this.modifyRaidProto(raidProto));\n\t\tthis.sim.waitForInit().then(() => this.loadSettings());\n\n\t\tthis.addSidebarComponents();\n\t\tthis.addTopbarComponents();\n\t\tthis.addRaidTab();\n\t\tthis.addSettingsTab();\n\t\tthis.addDetailedResultsTab();\n\t}\n\n\tprivate loadSettings() {\n\t\tconst initEventID = TypedEvent.nextEventID();\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tlet loadedSettings = false;\n\n\t\t\tconst savedSettings = window.localStorage.getItem(this.getSettingsStorageKey());\n\t\t\tif (savedSettings != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconst settings = RaidSimSettings.fromJsonString(savedSettings);\n\t\t\t\t\tthis.fromProto(initEventID, settings);\n\t\t\t\t\tloadedSettings = true;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('Failed to parse saved settings: ' + e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!loadedSettings) {\n\t\t\t\tthis.applyDefaults(initEventID);\n\t\t\t}\n\n\t\t\t// This needs to go last so it doesn't re-store things as they are initialized.\n\t\t\tthis.changeEmitter.on(_eventID => {\n\t\t\t\tconst jsonStr = RaidSimSettings.toJsonString(this.toProto());\n\t\t\t\twindow.localStorage.setItem(this.getSettingsStorageKey(), jsonStr);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate addSidebarComponents() {\n\t\tthis.raidSimResultsManager = addRaidSimAction(this);\n\t\tthis.raidSimResultsManager.changeEmitter.on(eventID => this.referenceChangeEmitter.emit(eventID));\n\t}\n\n\tprivate addTopbarComponents() {\n\t\tthis.simHeader.addImportLink('JSON', _parent => new ImportExport.RaidJsonImporter(this.rootElem, this));\n\t\tthis.simHeader.addImportLink('WCL', _parent => new ImportExport.RaidWCLImporter(this.rootElem, this));\n\n\t\tthis.simHeader.addExportLink('JSON', _parent => new ImportExport.RaidJsonExporter(this.rootElem, this));\n\t}\n\n\tprivate addRaidTab() {\n\t\tnew RaidTab(this.simTabContentsContainer, this);\n\t}\n\n\tprivate addSettingsTab() {\n\t\tnew SettingsTab(this.simTabContentsContainer, this);\n\t}\n\n\tprivate addDetailedResultsTab() {\n\t\tthis.addTab(\n\t\t\t'Results',\n\t\t\t'detailed-results-tab',\n\t\t\t`\n\t\t\t<div class=\"detailed-results\">\n\t\t\t</div>\n\t\t`,\n\t\t);\n\n\t\tnew EmbeddedDetailedResults(this.rootElem.getElementsByClassName('detailed-results')[0] as HTMLElement, this, this.raidSimResultsManager!);\n\t}\n\n\tprivate recomputeSettingsLayout() {\n\t\twindow.dispatchEvent(new Event('resize'));\n\t}\n\n\tprivate modifyRaidProto(raidProto: RaidProto) {\n\t\t// Apply blessings.\n\t\tconst numPaladins = this.getClassCount(Class.ClassPaladin);\n\t\tconst blessingsAssignments = this.blessingsPicker!.getAssignments();\n\t\timplementedSpecs.forEach(spec => {\n\t\t\tconst playerProtos = raidProto.parties\n\t\t\t\t.map(party => party.players.filter(player => player.class != Class.ClassUnknown && getPlayerSpecFromPlayer(player) == spec))\n\t\t\t\t.flat();\n\n\t\t\tblessingsAssignments.paladins.forEach((paladin, i) => {\n\t\t\t\tif (i >= numPaladins) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// TODO: No longer needed per-player\n\t\t\t\tif (paladin.blessings[spec] == Blessings.BlessingOfKings) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => (raidProto.buffs!.blessingOfKings = true));\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfMight) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => (raidProto.buffs!.blessingOfMight = true));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tgetCurrentData(): ReferenceData | null {\n\t\tif (this.raidSimResultsManager) {\n\t\t\treturn this.raidSimResultsManager.getCurrentData();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetReferenceData(): ReferenceData | null {\n\t\tif (this.raidSimResultsManager) {\n\t\t\treturn this.raidSimResultsManager.getReferenceData();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetActivePlayers(): Array<Player<any>> {\n\t\treturn this.sim.raid.getActivePlayers();\n\t}\n\n\tgetClassCount(playerClass: Class): number {\n\t\treturn this.getActivePlayers().filter(player => player.isClass(playerClass)).length;\n\t}\n\n\tapplyDefaults(eventID: EventID) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.sim.raid.fromProto(\n\t\t\t\teventID,\n\t\t\t\tRaidProto.create({\n\t\t\t\t\tnumActiveParties: 5,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tthis.sim.setPhase(eventID, 1);\n\t\t\tthis.sim.encounter.applyDefaults(eventID);\n\t\t\tthis.sim.applyDefaults(eventID, true, true);\n\t\t\tthis.sim.setShowDamageMetrics(eventID, true);\n\t\t});\n\t}\n\n\ttoProto(): RaidSimSettings {\n\t\treturn RaidSimSettings.create({\n\t\t\tsettings: this.sim.toProto(),\n\t\t\traid: this.sim.raid.toProto(true),\n\t\t\tblessings: this.blessingsPicker!.getAssignments(),\n\t\t\tencounter: this.sim.encounter.toProto(),\n\t\t});\n\t}\n\n\ttoLink(): string {\n\t\tconst proto = this.toProto();\n\t\t// When sharing links, people generally don't intend to share settings.\n\t\tproto.settings = undefined;\n\n\t\tconst protoBytes = RaidSimSettings.toBinary(proto);\n\t\tconst deflated = pako.deflate(protoBytes, { to: 'string' });\n\t\tconst encoded = btoa(String.fromCharCode(...deflated));\n\n\t\tconst linkUrl = new URL(window.location.href);\n\t\tlinkUrl.hash = encoded;\n\t\treturn linkUrl.toString();\n\t}\n\n\tfromProto(eventID: EventID, settings: RaidSimSettings) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tif (settings.settings) {\n\t\t\t\tthis.sim.fromProto(eventID, settings.settings);\n\t\t\t}\n\t\t\tthis.sim.raid.fromProto(eventID, settings.raid || RaidProto.create());\n\t\t\tthis.sim.encounter.fromProto(eventID, settings.encounter || EncounterProto.create());\n\t\t\tthis.blessingsPicker!.setAssignments(eventID, settings.blessings || BlessingsAssignments.create());\n\t\t});\n\t}\n\n\tclearRaid(eventID: EventID) {\n\t\tthis.sim.raid.clear(eventID);\n\t}\n\n\t// Returns the actual key to use for local storage, based on the given key part and the site context.\n\tgetStorageKey(keyPart: string): string {\n\t\treturn '__cata_raid__' + keyPart;\n\t}\n\n\tgetSavedRaidStorageKey(): string {\n\t\treturn this.getStorageKey('__savedRaid__');\n\t}\n}\n","import { RaidSimUI } from '../raid_sim_ui.js';\n\nnew RaidSimUI(document.body, {});\n"],"names":["specSimFactories","Spec","SpecBloodDeathKnight","parentElem","player","BloodDeathKnightSimUI","SpecFrostDeathKnight","FrostDeathKnightSimUI","SpecUnholyDeathKnight","UnholyDeathKnightSimUI","SpecBalanceDruid","BalanceDruidSimUI","SpecFeralDruid","FeralDruidSimUI","SpecRestorationDruid","RestorationDruidSimUI","SpecBeastMasteryHunter","BeastMasteryHunterSimUI","SpecMarksmanshipHunter","MarksmanshipHunterSimUI","SpecSurvivalHunter","SurvivalHunterSimUI","SpecArcaneMage","ArcaneMageSimUI","SpecFireMage","FireMageSimUI","SpecFrostMage","FrostMageSimUI","SpecHolyPaladin","HolyPaladinSimUI","SpecProtectionPaladin","ProtectionPaladinSimUI","SpecRetributionPaladin","RetributionPaladinSimUI","SpecDisciplinePriest","DisciplinePriestSimUI","SpecHolyPriest","HolyPriestSimUI","SpecShadowPriest","ShadowPriestSimUI","SpecAssassinationRogue","AssassinationRogueSimUI","SpecCombatRogue","CombatRogueSimUI","SpecSubtletyRogue","SubtletyRogueSimUI","SpecElementalShaman","ElementalShamanSimUI","SpecEnhancementShaman","EnhancementShamanSimUI","SpecRestorationShaman","RestorationShamanSimUI","SpecAfflictionWarlock","AfflictionWarlockSimUI","SpecDemonologyWarlock","DemonologyWarlockSimUI","SpecDestructionWarlock","DestructionWarlockSimUI","SpecArmsWarrior","ArmsWarriorSimUI","SpecFuryWarrior","FuryWarriorSimUI","SpecProtectionWarrior","ProtectionWarriorSimUI","playerPresets","PlayerClasses","naturalOrder","map","Object","values","playerClass","specs","flat","playerSpec","getSpecConfig","specID","config","raidSimPresets","implementedSpecs","Set","preset","spec","RaidJsonImporter","Importer","constructor","parent","simUI","super","this","descriptionElem","innerHTML","onImport","data","settings","RaidSimSettings","fromJsonString","ignoreUnknownFields","fromProto","TypedEvent","nextEventID","close","RaidJsonExporter","Exporter","title","allowDownload","init","getData","JSON","stringify","toJson","toProto","RaidWCLImporter","queryCounter","token","textElem","classList","add","getWCLBearerToken","response","fetch","method","headers","Authorization","btoa","body","URLSearchParams","grant_type","json","access_token","queryWCL","query","Accept","queryURL","res","encodeURI","result","errors","length","errorStr","e","message","join","Error","console","debug","parseURL","url","match","urlData","reportID","fightID","fightDataQuery","fights","reportData","report","String","id","getRateLimit","importLink","importButton","disabled","rootElem","style","cursor","doImport","error","alert","removeProperty","reportDataQuery","racialSpells","professionSpells","spell","externalCDSpells","samePartyHealingSpells","otherPartyHealingSpells","wclData","playerData","playerDetails","entries","freezeAllAndDo","eventID","wclPlayers","wclPlayer","WCLSimPlayer","inferRace","inferProfessions","inferAssignments","inferPartyComposition","numPaladins","filter","getClass","Class","ClassPaladin","create","encounter","getEncounterProto","raid","getRaidProto","blessings","makeDefaultBlessings","clearRaid","forEach","p","setRace","Race","RaceUnknown","faction","guild","raidPicker","getCurrentFaction","Faction","Horde","combatantInfoEvents","combatantInfo","auras","aura","ability","sourcePlayer","find","source","getRace","RaceDraenei","log","name","raceNames","get","Alliance","castEventsBySpellId","bucket","reportCastEvents","event","abilityGameID","sourceID","race","raceToFaction","defaultFactionRaces","inferredProfessions","includes","profession","professionNames","push","professions","distinct","concat","getGear","getProfessionRequirements","Profession","Engineering","Jewelcrafting","setProfessions","fightCastEvents","targetPlayer","targetID","class","specOptions","applyFunc","toUnitReference","setSpecOptions","setPlayersInParty","player1","player2","reason","addPlayerInParty","healEventsBySpellId","fightHealEvents","spellEvents","spellEventsByTimestamp","timestamp","_timestamp","eventsAtTime","spellTargets","i","j","inferredPlayers","playersInParty","nextEmptyPartyIdx","partyMembers","numMembers","member","partyIdx","raidIndex","allRaidIndexes","Array","keys","nextIdx","idx","some","fight","EncounterProto","duration","endTime","startTime","targets","closestEncounterPreset","sim","db","getAllPresetEncounters","enc","path","mob","target","Encounter","defaultTargetProto","RaidProto","parties","MAX_NUM_PARTIES","_party","PartyProto","players","_player","PlayerProto","positionInParty","playerProto","getPlayerSpecFromPlayer","isTankSpec","tanks","type","wclSpec","icon","split","fullType","foundSpec","fullTypeToSpec","Player","PlayerSpecs","getMatchingPreset","talents","toString","applySharedDefaults","setTalentsString","talentsString","setGlyphs","glyphs","setConsumes","consumes","setName","setGear","lookupEquipmentSpec","EquipmentSpec","items","gear","ItemSpec","enchant","permanentEnchant","gems","gemInfo","matchingPresets","presetIdx","distance","presetTalents","getTalentTreePoints","newDistance","reduce","acc","v","Math","abs","guid","UnitReference","UnitReference_Type","index","other","DeathKnightBlood","DeathKnightFrost","DeathKnightUnholy","DruidBalance","DruidFeral","DruidRestoration","HunterBeastMastery","HunterMarksmanship","HunterSurvival","MageArcane","MageFire","MageFrost","PaladinHoly","PaladinJusticar","PaladinProtection","PaladinRetribution","PriestHoly","PriestDiscipline","PriestShadow","RogueAssassination","RogueCombat","RogueSubtlety","ShamanElemental","ShamanEnhancement","ShamanRestoration","WarlockDestruction","WarlockAffliction","WarlockDemonology","WarriorArms","WarriorFury","WarriorProtection","RaceBloodElf","RaceTroll","RaceOrc","RaceGnome","RaceDwarf","RaceTauren","RaceUndead","RaceHuman","Herbalism","Skinning","ClassDruid","raidTarget","options","getSpecOptions","classOptions","innervateTarget","ClassPriest","powerInfusionTarget","ClassRogue","tricksOfTheTradeTarget","ClassDeathKnight","unholyFrenzyTarget","NEW_PLAYER","LATEST_PHASE_WITH_ALL_PRESETS","min","max","defaultGear","parseInt","k","RaidPicker","Component","raidSimUI","currentDragPlayer","currentDragPlayerFromIndex","currentDragType","currentDragParty","raidControls","document","createElement","appendChild","newPlayerPicker","NewPlayerPicker","EnumPicker","label","labelTooltip","value","changedEvent","numActivePartiesChangeEmitter","getValue","getNumActiveParties","setValue","newValue","setNumActiveParties","_picker","factionChangeEmitter","getFaction","picker","setFaction","val","phase","phaseChangeEmitter","getPhase","setPhase","partiesContainer","partyPickers","getParties","party","PartyPicker","updateActiveParties","partyPicker","remove","on","ondragend","_event","clearDragPlayer","clearDragParty","getCurrentPhase","getPlayerPicker","floor","MAX_PARTY_SIZE","playerPickers","getPlayerPickers","setDragPlayer","fromIndex","setDragParty","setAttribute","playersContainer","getElementsByClassName","PlayerPicker","dpsResultElem","referenceDeltaElem","referenceChangeEmitter","currentData","getCurrentData","referenceData","getReferenceData","partyDps","simResult","raidMetrics","dps","avg","referenceDps","textContent","toFixed","formatDeltaTextElem","ondragstart","dataTransfer","dropEffect","effectAllowed","dragEnterCounter","ondragenter","preventDefault","ondragleave","ondragover","ondrop","srcPartyPicker","srcPlayerPicker","dstPlayerPicker","srcPlayer","dstPlayer","setPlayer","labelElem","iconElem","nameElem","resultsElem","compChangeEmitter","newPlayer","getPlayer","playerDps","getPlayerWithRaidIndex","dropData","dragType","fromPlayerPicker","binary","atob","bytes","Uint8Array","charCodeAt","fromBinary","localPlayer","clone","update","getPlayerSpec","getTanks","emptyIdx","findIndex","tank","getPlayerFromUnitReference","setTanks","makeUnitReference","getSpec","newOptions","newUnitReference","getRaidIndex","focusMagicTarget","applyNewPlayerAssignments","emit","className","classCssClass","getCssClass","getPlayerClass","getSpecIcon","getName","querySelector","bindPlayerEvents","addEventListener","emptyName","dragStart","playerDataProto","setData","fromCharCode","toBinary","editElem","copyElem","deleteElem","Tooltip","getOrCreateInstance","deleteTooltip","setDragImage","onclick","PlayerEditorModal","hide","BaseModal","closeButton","fixed","header","insertAdjacentHTML","editorRoot","getEnumValues","wowClass","ClassUnknown","classID","classPresetsContainer","matchingPreset","presetElemFragment","tooltip","getFullSpecName","getIcon","presetElem","children","dragImage","Image","src","iconUrl","Glyphs","defaultName","friendlyName","setProfession1","otherDefaults","profession1","setProfession2","profession2","setDistanceFromTarget","distanceFromTarget","waitForInit","then","gearSet","RaidTab","SimTab","identifier","leftPanel","rightPanel","contentContainer","buildTabContent","savedRaidManager","SavedDataManager","storageKey","getSavedRaidStorageKey","SavedRaid","blessingsPicker","getAssignments","newRaid","setAssignments","BlessingsAssignments","changeEmitters","changeEmitter","equals","a","b","fromJson","obj","loadUserData","UnitReferencePicker","Input","modObj","curPlayer","curUnitReference","getInputValue","buttonElem","dropdownElem","currentOptions","updateOptions","makeTargetOptions","isDropdown","getPlayers","option","makeOption","prevUnitReference","setInputValue","inputChanged","makeOptionElem","getInputElem","emptyUnitReference","optionData","outerHTML","playerFragment","AssignmentsPicker","innervatesPicker","InnervatesPicker","powerInfusionsPicker","PowerInfusionsPicker","tricksOfTheTradesPicker","TricksOfTheTradesPicker","focusMagicsPicker","FocusMagicsPicker","AssignedBuffPicker","targetPickers","_eventID","getTitle","sourcePlayers","getSourcePlayers","_sourcePlayerIndex","row","sourceElem","arrow","raidTargetPicker","extraCssClasses","noTargetLabel","specOptionsChangeEmitter","getPlayerValue","setPlayerValue","targetPickerData","targetPicker","getActivePlayers","isClass","isSpec","getTalents","powerInfusion","BlessingsPicker","pickers","assignments","playerSpecs","paladinIndexes","append","buildSpecIcon","container","paladinIdx","blessingPicker","IconEnumPicker","numColumns","color","Paladin","hexColor","Blessings","BlessingUnknown","actionId","ActionId","fromSpellId","BlessingOfKings","BlessingOfMight","zeroValue","enableWhen","getClassCount","ClassProto","paladins","updatePickers","fragment","newAssignments","TanksPicker","tanksChangeEmitter","raid2","SettingsTab","column1","buildColumn","column2","column3","buildEncounterSettings","buildConsumesSettings","buildTankSettings","buildAssignmentSettings","buildOtherSettings","buildBlessingsPicker","buildSavedDataPickers","contentBlock","ContentBlock","EncounterPicker","bodyElement","showExecuteProportion","Tooltips.BLESSINGS_SECTION","savedEncounterManager","getSavedEncounterStorageKey","SavedEncounter","newEncounter","makeBooleanRaidIconBuffInput","field","IconPicker","states","buffsChangeEmitter","getBuffs","newBuffs","setBuffs","extraKnownIssues","SimUI","Sim","cssClass","cssScheme","simStatus","raidSimStatus","knownIssues","raidSimResultsManager","emitter","recomputeSettingsLayout","setModifyRaidProto","raidProto","modifyRaidProto","loadSettings","addSidebarComponents","addTopbarComponents","addRaidTab","addSettingsTab","addDetailedResultsTab","initEventID","loadedSettings","savedSettings","window","localStorage","getItem","getSettingsStorageKey","warn","applyDefaults","jsonStr","toJsonString","setItem","addRaidSimAction","simHeader","addImportLink","_parent","ImportExport.RaidJsonImporter","ImportExport.RaidWCLImporter","addExportLink","ImportExport.RaidJsonExporter","simTabContentsContainer","addTab","EmbeddedDetailedResults","dispatchEvent","Event","blessingsAssignments","playerProtos","paladin","buffs","blessingOfKings","blessingOfMight","numActiveParties","setShowDamageMetrics","toLink","proto","protoBytes","deflated","pako","deflate","to","encoded","linkUrl","URL","location","href","hash","clear","getStorageKey","keyPart"],"mappings":"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"}