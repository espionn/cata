{"version":3,"file":"inputs-B99wk-HU.chunk.js","sources":["../../../ui/rogue/inputs.ts"],"sourcesContent":["import * as InputHelpers from '../core/components/input_helpers.js';\nimport { RogueOptions_PoisonImbue as Poison } from '../core/proto/rogue.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { RogueSpecs } from '../core/proto_utils/utils';\n\n// Configuration for class-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const MainHandImbue = <SpecType extends RogueSpecs>() =>\n\tInputHelpers.makeClassOptionsEnumIconInput<SpecType, Poison>({\n\t\tfieldName: 'mhImbue',\n\t\tnumColumns: 1,\n\t\tvalues: [\n\t\t\t{ value: Poison.NoPoison, tooltip: 'No Main Hand Poison' },\n\t\t\t{ actionId: ActionId.fromItemId(2892), value: Poison.DeadlyPoison },\n\t\t\t{ actionId: ActionId.fromItemId(6947), value: Poison.InstantPoison },\n\t\t\t{ actionId: ActionId.fromItemId(10918), value: Poison.WoundPoison },\n\t\t],\n\t});\n\nexport const OffHandImbue = <SpecType extends RogueSpecs>() =>\n\tInputHelpers.makeClassOptionsEnumIconInput<SpecType, Poison>({\n\t\tfieldName: 'ohImbue',\n\t\tnumColumns: 1,\n\t\tvalues: [\n\t\t\t{ value: Poison.NoPoison, tooltip: 'No Off Hand Poison' },\n\t\t\t{ actionId: ActionId.fromItemId(2892), value: Poison.DeadlyPoison },\n\t\t\t{ actionId: ActionId.fromItemId(6947), value: Poison.InstantPoison },\n\t\t\t{ actionId: ActionId.fromItemId(10918), value: Poison.WoundPoison },\n\t\t],\n\t});\n\nexport const ThrownImbue = <SpecType extends RogueSpecs>() =>\n\tInputHelpers.makeClassOptionsEnumIconInput<SpecType, Poison>({\n\t\tfieldName: 'thImbue',\n\t\tnumColumns: 1,\n\t\tvalues: [\n\t\t\t{ value: Poison.NoPoison, tooltip: 'No Thrown Poison' },\n\t\t\t{ actionId: ActionId.fromItemId(2892), value: Poison.DeadlyPoison },\n\t\t\t{ actionId: ActionId.fromItemId(6947), value: Poison.InstantPoison },\n\t\t\t{ actionId: ActionId.fromItemId(10918), value: Poison.WoundPoison },\n\t\t],\n\t});\n\n// export const StartingOverkillDuration = <SpecType extends RogueSpecs>() =>\n// \tInputHelpers.makeClassOptionsNumberInput<SpecType>({\n// \t\tfieldName: 'startingOverkillDuration',\n// \t\tlabel: 'Starting Overkill duration',\n// \t\tlabelTooltip: 'Initial Overkill buff duration at the start of each iteration.',\n// \t\tshowWhen: (player: Player<SpecType>) => player.getTalents().overkill || player.getTalents().masterOfSubtlety > 0,\n// \t});\n\n// export const VanishBreakTime = <SpecType extends RogueSpecs>() =>\n// \tInputHelpers.makeClassOptionsNumberInput<SpecType>({\n// \t\tfieldName: 'vanishBreakTime',\n// \t\tlabel: 'Vanish Break Time',\n// \t\tlabelTooltip: 'Time it takes to start attacking after casting Vanish.',\n// \t\textraCssClasses: ['experimental'],\n// \t\tshowWhen: (player: Player<SpecType>) => player.getTalents().overkill || player.getTalents().masterOfSubtlety > 0,\n// \t});\n\n// export const AssumeBleedActive = <SpecType extends RogueSpecs>() =>\n// \tInputHelpers.makeClassOptionsBooleanInput<SpecType>({\n// \t\tfieldName: 'assumeBleedActive',\n// \t\tlabel: 'Assume Bleed Always Active',\n// \t\tlabelTooltip: \"Assume bleed always exists for 'Hunger for Blood' activation. Otherwise will only calculate based on own garrote/rupture.\",\n// \t\textraCssClasses: ['within-raid-sim-hide'],\n// \t\tshowWhen: (player: Player<SpecType>) => player.getTalents().hungerForBlood,\n// \t});\n\nexport const ApplyPoisonsManually = <SpecType extends RogueSpecs>() =>\n\tInputHelpers.makeClassOptionsBooleanInput<SpecType>({\n\t\tfieldName: 'applyPoisonsManually',\n\t\tlabel: 'Configure poisons manually',\n\t\tlabelTooltip: 'Prevent automatic poison configuration that is based on equipped weapons.',\n\t});\n"],"names":["MainHandImbue","InputHelpers.makeClassOptionsEnumIconInput","fieldName","numColumns","values","value","Poison","NoPoison","tooltip","actionId","ActionId","fromItemId","DeadlyPoison","InstantPoison","WoundPoison","OffHandImbue","ThrownImbue","ApplyPoisonsManually","InputHelpers.makeClassOptionsBooleanInput","label","labelTooltip"],"mappings":"+HAQa,MAAAA,EAAgB,IAC5BC,EAA6D,CAC5DC,UAAW,UACXC,WAAY,EACZC,OAAQ,CACP,CAAEC,MAAOC,EAAOC,SAAUC,QAAS,uBACnC,CAAEC,SAAUC,EAASC,WAAW,MAAON,MAAOC,EAAOM,cACrD,CAAEH,SAAUC,EAASC,WAAW,MAAON,MAAOC,EAAOO,eACrD,CAAEJ,SAAUC,EAASC,WAAW,OAAQN,MAAOC,EAAOQ,gBAI5CC,EAAe,IAC3Bd,EAA6D,CAC5DC,UAAW,UACXC,WAAY,EACZC,OAAQ,CACP,CAAEC,MAAOC,EAAOC,SAAUC,QAAS,sBACnC,CAAEC,SAAUC,EAASC,WAAW,MAAON,MAAOC,EAAOM,cACrD,CAAEH,SAAUC,EAASC,WAAW,MAAON,MAAOC,EAAOO,eACrD,CAAEJ,SAAUC,EAASC,WAAW,OAAQN,MAAOC,EAAOQ,gBAI5CE,EAAc,IAC1Bf,EAA6D,CAC5DC,UAAW,UACXC,WAAY,EACZC,OAAQ,CACP,CAAEC,MAAOC,EAAOC,SAAUC,QAAS,oBACnC,CAAEC,SAAUC,EAASC,WAAW,MAAON,MAAOC,EAAOM,cACrD,CAAEH,SAAUC,EAASC,WAAW,MAAON,MAAOC,EAAOO,eACrD,CAAEJ,SAAUC,EAASC,WAAW,OAAQN,MAAOC,EAAOQ,gBA8B5CG,EAAuB,IACnCC,EAAoD,CACnDhB,UAAW,uBACXiB,MAAO,6BACPC,aAAc"}