{"version":3,"file":"sim-G-JOA58v.chunk.js","sources":["../../../ui/hunter/marksmanship/inputs.ts","../../../ui/hunter/marksmanship/presets.ts","../../../ui/hunter/marksmanship/sim.ts"],"sourcesContent":["import * as InputHelpers from '../../core/components/input_helpers';\nimport { Player } from '../../core/player';\nimport { RotationType, Spec } from '../../core/proto/common';\nimport { HunterStingType } from '../../core/proto/hunter';\nimport { TypedEvent } from '../../core/typed_event';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const MMRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecMarksmanshipHunter, RotationType>({\n\t\t\tfieldName: 'type',\n\t\t\tlabel: 'Type',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Single Target', value: RotationType.SingleTarget },\n\t\t\t\t{ name: 'AOE', value: RotationType.Aoe },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecMarksmanshipHunter, HunterStingType>({\n\t\t\tfieldName: 'sting',\n\t\t\tlabel: 'Sting',\n\t\t\tlabelTooltip: 'Maintains the selected Sting on the primary target.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'None', value: HunterStingType.NoSting },\n\t\t\t\t{ name: 'Scorpid Sting', value: HunterStingType.ScorpidSting },\n\t\t\t\t{ name: 'Serpent Sting', value: HunterStingType.SerpentSting },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecMarksmanshipHunter>) => player.getSimpleRotation().type == RotationType.SingleTarget,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecMarksmanshipHunter>({\n\t\t\tfieldName: 'trapWeave',\n\t\t\tlabel: 'Trap Weave',\n\t\t\tlabelTooltip: 'Uses Explosive Trap at appropriate times. Note that selecting this will disable Black Arrow because they share a CD.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecMarksmanshipHunter>({\n\t\t\tfieldName: 'multiDotSerpentSting',\n\t\t\tlabel: 'Multi-Dot Serpent Sting',\n\t\t\tlabelTooltip: 'Casts Serpent Sting on multiple targets',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecMarksmanshipHunter>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t],\n};\n","import * as PresetUtils from '../../core/preset_utils';\nimport { Consumes, Flask, Food, Glyphs, PetFood, Potions, RotationType, Spec } from '../../core/proto/common';\nimport {\n\tBeastMasteryHunter_Options as HunterOptions,\n\tBeastMasteryHunter_Rotation as HunterRotation,\n\tHunterMajorGlyph as MajorGlyph,\n\tHunterOptions_Ammo as Ammo,\n\tHunterOptions_PetType as PetType,\n\tHunterPrimeGlyph as PrimeGlyph,\n\tHunterStingType,\n} from '../../core/proto/hunter';\nimport { SavedTalents } from '../../core/proto/ui';\nimport { ferocityDefault } from '../../core/talents/hunter_pet';\nimport AoeApl from './apls/aoe.apl.json';\nimport MmApl from './apls/mm.apl.json';\nimport MmAdvApl from './apls/mm_advanced.apl.json';\nimport P1MMGear from './gear_sets/p1_mm.gear.json';\nimport PreraidMMGear from './gear_sets/preraid_mm.gear.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nexport const MM_PRERAID_PRESET = PresetUtils.makePresetGear('MM PreRaid Preset', PreraidMMGear);\nexport const MM_P1_PRESET = PresetUtils.makePresetGear('MM P1 Preset', P1MMGear);\n\nexport const DefaultSimpleRotation = HunterRotation.create({\n\ttype: RotationType.SingleTarget,\n\tsting: HunterStingType.SerpentSting,\n\ttrapWeave: true,\n\tmultiDotSerpentSting: true,\n\tallowExplosiveShotDownrank: true,\n});\n\nexport const ROTATION_PRESET_SIMPLE_DEFAULT = PresetUtils.makePresetSimpleRotation('Simple Default', Spec.SpecMarksmanshipHunter, DefaultSimpleRotation);\nexport const ROTATION_PRESET_MM = PresetUtils.makePresetAPLRotation('MM', MmApl);\nexport const ROTATION_PRESET_MM_ADVANCED = PresetUtils.makePresetAPLRotation('MM (Advanced)', MmAdvApl);\nexport const ROTATION_PRESET_AOE = PresetUtils.makePresetAPLRotation('AOE', AoeApl);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\n\nexport const MarksmanTalents = {\n\tname: 'Marksman',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '032002-2302320032120231221-03',\n\t\tglyphs: Glyphs.create({\n\t\t\tprime1: PrimeGlyph.GlyphOfArcaneShot,\n\t\t\tprime2: PrimeGlyph.GlyphOfRapidFire,\n\t\t\tprime3: PrimeGlyph.GlyphOfSteadyShot,\n\t\t}),\n\t}),\n};\n\nexport const MMDefaultOptions = HunterOptions.create({\n\tclassOptions: {\n\t\tuseHuntersMark: true,\n\t\tpetType: PetType.Wolf,\n\t\tpetTalents: ferocityDefault,\n\t\tpetUptime: 1,\n\t},\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.PotionOfTheTolvir,\n\tprepopPotion: Potions.PotionOfTheTolvir,\n\tflask: Flask.FlaskOfTheWinds,\n\tfood: Food.FoodFishFeast,\n});\n","import * as BuffDebuffInputs from '../../core/components/inputs/buffs_debuffs';\nimport * as OtherInputs from '../../core/components/other_inputs';\nimport * as Mechanics from '../../core/constants/mechanics';\nimport { IndividualSimUI, registerSpecConfig } from '../../core/individual_sim_ui';\nimport { Player } from '../../core/player';\nimport { APLAction, APLListItem, APLRotation } from '../../core/proto/apl';\nimport {\n\tCooldowns,\n\tDebuffs,\n\tFaction,\n\tIndividualBuffs,\n\tItemSlot,\n\tPartyBuffs,\n\tPseudoStat,\n\tRace,\n\tRaidBuffs,\n\tRangedWeaponType,\n\tRotationType,\n\tSpec,\n\tStat,\n} from '../../core/proto/common';\nimport { HunterStingType, MarksmanshipHunter_Rotation } from '../../core/proto/hunter';\nimport * as AplUtils from '../../core/proto_utils/apl_utils';\nimport { Stats } from '../../core/proto_utils/stats';\nimport * as HunterInputs from '../inputs';\nimport * as MMInputs from './inputs';\nimport * as Presets from './presets';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecMarksmanshipHunter, {\n\tcssClass: 'marksmanship-hunter-sim-ui',\n\tcssScheme: 'hunter',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [],\n\twarnings: [],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatStamina,\n\t\tStat.StatIntellect,\n\t\tStat.StatAgility,\n\t\tStat.StatRangedAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatMP5,\n\t],\n\tepPseudoStats: [PseudoStat.PseudoStatRangedDps],\n\t// Reference stat against which to calculate EP.\n\tepReferenceStat: Stat.StatRangedAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatAgility,\n\t\tStat.StatIntellect,\n\t\tStat.StatRangedAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatMP5,\n\t],\n\tmodifyDisplayStats: (player: Player<Spec.SpecMarksmanshipHunter>) => {\n\t\tlet stats = new Stats();\n\t\t//stats = stats.addStat(Stat.StatMeleeCrit, player.getTalents().lethalShots * 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\n\t\tconst rangedWeapon = player.getEquippedItem(ItemSlot.ItemSlotRanged);\n\t\tif (rangedWeapon?.enchant?.effectId == 3608) {\n\t\t\tstats = stats.addStat(Stat.StatMeleeCrit, 40);\n\t\t}\n\t\tif (player.getRace() == Race.RaceDwarf && rangedWeapon?.item.rangedWeaponType == RangedWeaponType.RangedWeaponTypeGun) {\n\t\t\tstats = stats.addStat(Stat.StatMeleeCrit, 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\t\t}\n\t\tif (player.getRace() == Race.RaceTroll && rangedWeapon?.item.rangedWeaponType == RangedWeaponType.RangedWeaponTypeBow) {\n\t\t\tstats = stats.addStat(Stat.StatMeleeCrit, 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\t\t}\n\n\t\treturn {\n\t\t\ttalents: stats,\n\t\t};\n\t},\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.MM_P1_PRESET.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap(\n\t\t\t{\n\t\t\t\t[Stat.StatStamina]: 0.5,\n\t\t\t\t[Stat.StatAgility]: 2.65,\n\t\t\t\t[Stat.StatIntellect]: 1.1,\n\t\t\t\t[Stat.StatRangedAttackPower]: 1.0,\n\t\t\t\t[Stat.StatMeleeHit]: 2,\n\t\t\t\t[Stat.StatMeleeCrit]: 1.5,\n\t\t\t\t[Stat.StatMeleeHaste]: 1.39,\n\t\t\t\t[Stat.StatArmorPenetration]: 1.32,\n\t\t\t},\n\t\t\t{\n\t\t\t\t[PseudoStat.PseudoStatRangedDps]: 6.32,\n\t\t\t},\n\t\t),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.MarksmanTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.MMDefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: RaidBuffs.create({\n\t\t\tarcaneBrilliance: true,\n\t\t\tbloodlust: true,\n\t\t\tmarkOfTheWild: true,\n\t\t\ticyTalons: true,\n\t\t\tmoonkinForm: true,\n\t\t\tleaderOfThePack: true,\n\t\t\tpowerWordFortitude: true,\n\t\t\tstrengthOfEarthTotem: true,\n\t\t\ttrueshotAura: true,\n\t\t\twrathOfAirTotem: true,\n\t\t\tdemonicPact: true,\n\t\t\tblessingOfKings: true,\n\t\t\tblessingOfMight: true,\n\t\t\tcommunion: true,\n\t\t}),\n\t\tpartyBuffs: PartyBuffs.create({}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tvampiricTouch: true,\n\t\t}),\n\t\tdebuffs: Debuffs.create({\n\t\t\tsunderArmor: true,\n\t\t\tfaerieFire: true,\n\t\t\tcurseOfElements: true,\n\t\t\tsavageCombat: true,\n\t\t\tbloodFrenzy: true,\n\t\t}),\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [HunterInputs.PetTypeInput()],\n\t// Inputs to include in the 'Rotation' section on the settings tab.\n\trotationInputs: MMInputs.MMRotationConfig,\n\tpetConsumeInputs: [],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [BuffDebuffInputs.StaminaBuff, BuffDebuffInputs.SpellDamageDebuff],\n\texcludeBuffDebuffInputs: [],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tHunterInputs.PetUptime(),\n\t\t\tHunterInputs.TimeToTrapWeaveMs(),\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\tOtherInputs.DarkIntentUptime,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: true,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [Presets.MarksmanTalents],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [Presets.ROTATION_PRESET_SIMPLE_DEFAULT, Presets.ROTATION_PRESET_MM, Presets.ROTATION_PRESET_MM_ADVANCED],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [Presets.MM_PRERAID_PRESET, Presets.MM_P1_PRESET],\n\t},\n\n\tautoRotation: (player: Player<Spec.SpecMarksmanshipHunter>): APLRotation => {\n\t\tconst numTargets = player.sim.encounter.targets.length;\n\t\tif (numTargets >= 4) {\n\t\t\treturn Presets.ROTATION_PRESET_AOE.rotation.rotation!;\n\t\t} else {\n\t\t\treturn Presets.ROTATION_PRESET_MM.rotation.rotation!;\n\t\t}\n\t},\n\n\tsimpleRotation: (player: Player<Spec.SpecMarksmanshipHunter>, simple: MarksmanshipHunter_Rotation, cooldowns: Cooldowns): APLRotation => {\n\t\tconst [prepullActions, actions] = AplUtils.standardCooldownDefaults(cooldowns);\n\n\t\tconst combatPot = APLAction.fromJsonString(\n\t\t\t`{\"condition\":{\"not\":{\"val\":{\"auraIsActive\":{\"auraId\":{\"spellId\":12472}}}}},\"castSpell\":{\"spellId\":{\"otherId\":\"OtherActionPotion\"}}}`,\n\t\t);\n\n\t\tconst serpentSting = APLAction.fromJsonString(\n\t\t\t`{\"condition\":{\"cmp\":{\"op\":\"OpGt\",\"lhs\":{\"remainingTime\":{}},\"rhs\":{\"const\":{\"val\":\"6s\"}}}},\"multidot\":{\"spellId\":{\"spellId\":49001},\"maxDots\":${\n\t\t\t\tsimple.multiDotSerpentSting ? 3 : 1\n\t\t\t},\"maxOverlap\":{\"const\":{\"val\":\"0ms\"}}}}`,\n\t\t);\n\t\tconst scorpidSting = APLAction.fromJsonString(\n\t\t\t`{\"condition\":{\"auraShouldRefresh\":{\"auraId\":{\"spellId\":3043},\"maxOverlap\":{\"const\":{\"val\":\"0ms\"}}}},\"castSpell\":{\"spellId\":{\"spellId\":3043}}}`,\n\t\t);\n\t\tconst trapWeave = APLAction.fromJsonString(\n\t\t\t`{\"condition\":{\"not\":{\"val\":{\"dotIsActive\":{\"spellId\":{\"spellId\":49067}}}}},\"castSpell\":{\"spellId\":{\"tag\":1,\"spellId\":49067}}}`,\n\t\t);\n\t\tconst volley = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":58434}}}`);\n\t\tconst killShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":61006}}}`);\n\t\tconst aimedShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":49050}}}`);\n\t\tconst multiShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":49048}}}`);\n\t\tconst steadyShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":49052}}}`);\n\t\tconst silencingShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":34490}}}`);\n\t\tconst chimeraShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":53209}}}`);\n\t\t//const arcaneShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":49045}}}`);\n\n\t\tif (simple.type == RotationType.Aoe) {\n\t\t\tactions.push(\n\t\t\t\t...([\n\t\t\t\t\tcombatPot,\n\t\t\t\t\tsimple.sting == HunterStingType.ScorpidSting ? scorpidSting : null,\n\t\t\t\t\tsimple.sting == HunterStingType.SerpentSting ? serpentSting : null,\n\t\t\t\t\tsimple.trapWeave ? trapWeave : null,\n\t\t\t\t\tvolley,\n\t\t\t\t].filter(a => a) as Array<APLAction>),\n\t\t\t);\n\t\t} else {\n\t\t\t// MM\n\t\t\tactions.push(\n\t\t\t\t...([\n\t\t\t\t\tcombatPot,\n\t\t\t\t\tsilencingShot,\n\t\t\t\t\tkillShot,\n\t\t\t\t\tsimple.sting == HunterStingType.ScorpidSting ? scorpidSting : null,\n\t\t\t\t\tsimple.sting == HunterStingType.SerpentSting ? serpentSting : null,\n\t\t\t\t\tsimple.trapWeave ? trapWeave : null,\n\t\t\t\t\tchimeraShot,\n\t\t\t\t\taimedShot,\n\t\t\t\t\tmultiShot,\n\t\t\t\t\tsteadyShot,\n\t\t\t\t].filter(a => a) as Array<APLAction>),\n\t\t\t);\n\t\t}\n\n\t\treturn APLRotation.create({\n\t\t\tprepullActions: prepullActions,\n\t\t\tpriorityList: actions.map(action =>\n\t\t\t\tAPLListItem.create({\n\t\t\t\t\taction: action,\n\t\t\t\t}),\n\t\t\t),\n\t\t});\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecMarksmanshipHunter,\n\t\t\ttalents: Presets.MarksmanTalents.data,\n\t\t\tspecOptions: Presets.MMDefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.MM_P1_PRESET.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.MM_P1_PRESET.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class MarksmanshipHunterSimUI extends IndividualSimUI<Spec.SpecMarksmanshipHunter> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecMarksmanshipHunter>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["MMRotationConfig","inputs","InputHelpers.makeRotationEnumInput","fieldName","label","values","name","value","RotationType","SingleTarget","Aoe","labelTooltip","HunterStingType","NoSting","ScorpidSting","SerpentSting","showWhen","player","getSimpleRotation","type","InputHelpers.makeRotationBooleanInput","changeEmitter","TypedEvent","onAny","rotationChangeEmitter","talentsChangeEmitter","MM_PRERAID_PRESET","PresetUtils.makePresetGear","MM_P1_PRESET","P1MMGear","DefaultSimpleRotation","HunterRotation","create","sting","trapWeave","multiDotSerpentSting","allowExplosiveShotDownrank","ROTATION_PRESET_SIMPLE_DEFAULT","PresetUtils.makePresetSimpleRotation","Spec","SpecMarksmanshipHunter","ROTATION_PRESET_MM","PresetUtils.makePresetAPLRotation","MmApl","ROTATION_PRESET_MM_ADVANCED","MmAdvApl","ROTATION_PRESET_AOE","AoeApl","MarksmanTalents","data","SavedTalents","talentsString","glyphs","Glyphs","prime1","PrimeGlyph","GlyphOfArcaneShot","prime2","GlyphOfRapidFire","prime3","GlyphOfSteadyShot","MMDefaultOptions","HunterOptions","classOptions","useHuntersMark","petType","PetType","Wolf","petTalents","ferocityDefault","petUptime","DefaultConsumes","Consumes","defaultPotion","Potions","PotionOfTheTolvir","prepopPotion","flask","Flask","FlaskOfTheWinds","food","Food","FoodFishFeast","SPEC_CONFIG","registerSpecConfig","cssClass","cssScheme","knownIssues","warnings","epStats","Stat","StatStamina","StatIntellect","StatAgility","StatRangedAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatMP5","epPseudoStats","PseudoStat","PseudoStatRangedDps","epReferenceStat","displayStats","StatHealth","modifyDisplayStats","stats","Stats","rangedWeapon","getEquippedItem","ItemSlot","ItemSlotRanged","enchant","effectId","addStat","getRace","Race","RaceDwarf","item","rangedWeaponType","RangedWeaponType","RangedWeaponTypeGun","Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE","RaceTroll","RangedWeaponTypeBow","talents","defaults","gear","Presets.MM_P1_PRESET","epWeights","fromMap","consumes","Presets.DefaultConsumes","Presets.MarksmanTalents","specOptions","Presets.MMDefaultOptions","raidBuffs","RaidBuffs","arcaneBrilliance","bloodlust","markOfTheWild","icyTalons","moonkinForm","leaderOfThePack","powerWordFortitude","strengthOfEarthTotem","trueshotAura","wrathOfAirTotem","demonicPact","blessingOfKings","blessingOfMight","communion","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","vampiricTouch","debuffs","Debuffs","sunderArmor","faerieFire","curseOfElements","savageCombat","bloodFrenzy","playerIconInputs","HunterInputs.PetTypeInput","rotationInputs","MMInputs.MMRotationConfig","petConsumeInputs","includeBuffDebuffInputs","BuffDebuffInputs.StaminaBuff","BuffDebuffInputs.SpellDamageDebuff","excludeBuffDebuffInputs","otherInputs","HunterInputs.PetUptime","HunterInputs.TimeToTrapWeaveMs","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","OtherInputs.DarkIntentUptime","encounterPicker","showExecuteProportion","presets","rotations","Presets.ROTATION_PRESET_SIMPLE_DEFAULT","Presets.ROTATION_PRESET_MM","Presets.ROTATION_PRESET_MM_ADVANCED","Presets.MM_PRERAID_PRESET","autoRotation","sim","encounter","targets","length","Presets.ROTATION_PRESET_AOE","rotation","simpleRotation","simple","cooldowns","prepullActions","actions","AplUtils.standardCooldownDefaults","combatPot","APLAction","fromJsonString","serpentSting","scorpidSting","volley","killShot","aimedShot","multiShot","steadyShot","silencingShot","chimeraShot","push","filter","a","APLRotation","priorityList","map","action","APLListItem","raidSimPresets","spec","defaultFactionRaces","Faction","Unknown","RaceUnknown","Alliance","RaceNightElf","Horde","RaceOrc","defaultGear","MarksmanshipHunterSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}