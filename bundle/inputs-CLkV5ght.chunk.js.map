{"version":3,"file":"inputs-CLkV5ght.chunk.js","sources":["../../../ui/warrior/inputs.ts"],"sourcesContent":["import * as InputHelpers from '../core/components/input_helpers';\nimport { Spec } from '../core/proto/common';\nimport { WarriorShout } from '../core/proto/warrior';\nimport { ActionId } from '../core/proto_utils/action_id';\nimport { WarriorSpecs } from '../core/proto_utils/utils';\n\n// Configuration for class-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const StartingRage = <SpecType extends WarriorSpecs>() =>\n\tInputHelpers.makeClassOptionsNumberInput<SpecType>({\n\t\tfieldName: 'startingRage',\n\t\tlabel: 'Starting Rage',\n\t\tlabelTooltip: 'Initial rage at the start of each iteration.',\n\t});\n\nexport const ShoutPicker = <SpecType extends WarriorSpecs>() =>\n\tInputHelpers.makeClassOptionsEnumIconInput<SpecType, WarriorShout>({\n\t\tfieldName: 'shout',\n\t\tvalues: [\n\t\t\t{ color: 'c79c6e', value: WarriorShout.WarriorShoutNone },\n\t\t\t{ actionId: ActionId.fromSpellId(2048), value: WarriorShout.WarriorShoutBattle },\n\t\t\t{ actionId: ActionId.fromSpellId(469), value: WarriorShout.WarriorShoutCommanding },\n\t\t],\n\t});\n\nexport const ShatteringThrow = <SpecType extends WarriorSpecs>() =>\n\tInputHelpers.makeClassOptionsBooleanIconInput<SpecType>({\n\t\tfieldName: 'useShatteringThrow',\n\t\tid: ActionId.fromSpellId(64382),\n\t});\n\n// Arms/Fury only\n\nexport const Recklessness = <SpecType extends Spec.SpecArmsWarrior | Spec.SpecFuryWarrior>() =>\n\tInputHelpers.makeSpecOptionsBooleanIconInput<SpecType>({\n\t\tfieldName: 'useRecklessness',\n\t\tid: ActionId.fromSpellId(1719),\n\t});\n\nexport const StanceSnapshot = <SpecType extends Spec.SpecArmsWarrior | Spec.SpecFuryWarrior>() =>\n\tInputHelpers.makeSpecOptionsBooleanInput<SpecType>({\n\t\tfieldName: 'stanceSnapshot',\n\t\tlabel: 'Stance Snapshot',\n\t\tlabelTooltip: 'Ability that is cast at the same time as stance swap will benefit from the bonus of the stance before the swap.',\n\t});\n\n// Allows for auto gemming whilst ignoring expertise cap\n// (Useful for Arms)\nexport const DisableExpertiseGemming = <SpecType extends Spec.SpecArmsWarrior | Spec.SpecFuryWarrior>() =>\n\tInputHelpers.makeSpecOptionsBooleanInput<SpecType>({\n\t\tfieldName: 'disableExpertiseGemming',\n\t\tlabel: 'Disable expertise gemming',\n\t\tlabelTooltip: 'Disables auto gemming for expertise',\n\t});\n"],"names":["StartingRage","InputHelpers.makeClassOptionsNumberInput","fieldName","label","labelTooltip","ShoutPicker","InputHelpers.makeClassOptionsEnumIconInput","values","color","value","WarriorShout","WarriorShoutNone","actionId","ActionId","fromSpellId","WarriorShoutBattle","WarriorShoutCommanding","ShatteringThrow","InputHelpers.makeClassOptionsBooleanIconInput","id","Recklessness","InputHelpers.makeSpecOptionsBooleanIconInput","StanceSnapshot","InputHelpers.makeSpecOptionsBooleanInput","DisableExpertiseGemming"],"mappings":"oJASa,MAAAA,EAAe,IAC3BC,EAAmD,CAClDC,UAAW,eACXC,MAAO,gBACPC,aAAc,iDAGHC,EAAc,IAC1BC,EAAmE,CAClEJ,UAAW,QACXK,OAAQ,CACP,CAAEC,MAAO,SAAUC,MAAOC,EAAaC,kBACvC,CAAEC,SAAUC,EAASC,YAAY,MAAOL,MAAOC,EAAaK,oBAC5D,CAAEH,SAAUC,EAASC,YAAY,KAAML,MAAOC,EAAaM,2BAIjDC,EAAkB,IAC9BC,EAAwD,CACvDhB,UAAW,qBACXiB,GAAIN,EAASC,YAAY,SAKdM,EAAe,IAC3BC,EAAuD,CACtDnB,UAAW,kBACXiB,GAAIN,EAASC,YAAY,QAGdQ,EAAiB,IAC7BC,EAAmD,CAClDrB,UAAW,iBACXC,MAAO,kBACPC,aAAc,oHAKHoB,EAA0B,IACtCD,EAAmD,CAClDrB,UAAW,0BACXC,MAAO,4BACPC,aAAc"}