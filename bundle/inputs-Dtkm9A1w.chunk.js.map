{"version":3,"file":"inputs-Dtkm9A1w.chunk.js","sources":["../../../ui/warlock/inputs.ts"],"sourcesContent":["import * as InputHelpers from '../core/components/input_helpers.js';\nimport { Player } from '../core/player.js';\nimport { WarlockOptions_Armor as Armor, WarlockOptions_Summon as Summon, WarlockOptions_WeaponImbue as WeaponImbue } from '../core/proto/warlock.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { WarlockSpecs } from '../core/proto_utils/utils';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const ArmorInput = <SpecType extends WarlockSpecs>() =>\n\tInputHelpers.makeClassOptionsEnumIconInput<SpecType, Armor>({\n\t\tfieldName: 'armor',\n\t\tvalues: [\n\t\t\t{ value: Armor.NoArmor, tooltip: 'No Armor' },\n\t\t\t{ actionId: ActionId.fromSpellId(47893), value: Armor.FelArmor },\n\t\t\t{ actionId: ActionId.fromSpellId(47889), value: Armor.DemonArmor },\n\t\t],\n\t});\n\nexport const WeaponImbueInput = <SpecType extends WarlockSpecs>() =>\n\tInputHelpers.makeClassOptionsEnumIconInput<SpecType, WeaponImbue>({\n\t\tfieldName: 'weaponImbue',\n\t\tvalues: [\n\t\t\t{ value: WeaponImbue.NoWeaponImbue, tooltip: 'No Weapon Stone' },\n\t\t\t{ actionId: ActionId.fromItemId(41174), value: WeaponImbue.GrandFirestone },\n\t\t\t{ actionId: ActionId.fromItemId(41196), value: WeaponImbue.GrandSpellstone },\n\t\t],\n\t});\n\n// export const PetInput = <SpecType extends WarlockSpecs>() =>\n// \tInputHelpers.makeClassOptionsEnumIconInput<SpecType, Summon>({\n// \t\tfieldName: 'summon',\n// \t\tvalues: [\n// \t\t\t{ value: Summon.NoSummon, tooltip: 'No Pet' },\n// \t\t\t{ actionId: ActionId.fromSpellId(688), value: Summon.Imp },\n// \t\t\t{ actionId: ActionId.fromSpellId(712), value: Summon.Succubus },\n// \t\t\t{ actionId: ActionId.fromSpellId(691), value: Summon.Felhunter },\n// \t\t\t{\n// \t\t\t\tactionId: ActionId.fromSpellId(30146),\n// \t\t\t\tvalue: Summon.Felguard,\n// \t\t\t\tshowWhen: (player: Player<SpecType>) => player.getTalents().summonFelguard,\n// \t\t\t},\n// \t\t],\n// \t\tchangeEmitter: (player: Player<SpecType>) => player.changeEmitter,\n// \t});\n\nexport const DetonateSeed = <SpecType extends WarlockSpecs>() =>\n\tInputHelpers.makeClassOptionsBooleanInput<SpecType>({\n\t\tfieldName: 'detonateSeed',\n\t\tlabel: 'Detonate Seed on Cast',\n\t\tlabelTooltip: 'Simulates raid doing damage to targets such that seed detonates immediately on cast.',\n\t});\n"],"names":["DetonateSeed","InputHelpers.makeClassOptionsBooleanInput","fieldName","label","labelTooltip"],"mappings":"mGA8Ca,MAAAA,EAAe,IAC3BC,EAAoD,CACnDC,UAAW,eACXC,MAAO,wBACPC,aAAc"}