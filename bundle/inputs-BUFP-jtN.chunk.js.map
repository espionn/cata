{"version":3,"file":"inputs-BUFP-jtN.chunk.js","sources":["../../../ui/druid/inputs.ts"],"sourcesContent":["import * as InputHelpers from '../core/components/input_helpers';\nimport { Player } from '../core/player';\nimport { UnitReference, UnitReference_Type as UnitType } from '../core/proto/common';\nimport { ActionId } from '../core/proto_utils/action_id';\nimport { DruidSpecs } from '../core/proto_utils/utils';\nimport { EventID } from '../core/typed_event';\n\n// Configuration for class-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const SelfInnervate = <SpecType extends DruidSpecs>() =>\n\tInputHelpers.makeClassOptionsBooleanIconInput<SpecType>({\n\t\tfieldName: 'innervateTarget',\n\t\tid: ActionId.fromSpellId(29166),\n\t\textraCssClasses: ['within-raid-sim-hide'],\n\t\tgetValue: (player: Player<SpecType>) => player.getClassOptions().innervateTarget?.type == UnitType.Player,\n\t\tsetValue: (eventID: EventID, player: Player<SpecType>, newValue: boolean) => {\n\t\t\tconst newOptions = player.getClassOptions();\n\t\t\tnewOptions.innervateTarget = UnitReference.create({\n\t\t\t\ttype: newValue ? UnitType.Player : UnitType.Unknown,\n\t\t\t\tindex: 0,\n\t\t\t});\n\t\t\tplayer.setClassOptions(eventID, newOptions);\n\t\t},\n\t});\n"],"names":["SelfInnervate","InputHelpers.makeClassOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","extraCssClasses","getValue","player","getClassOptions","innervateTarget","type","UnitType","Player","setValue","eventID","newValue","newOptions","UnitReference","create","Unknown","index","setClassOptions"],"mappings":"4HAUa,MAAAA,EAAgB,IAC5BC,EAAwD,CACvDC,UAAW,kBACXC,GAAIC,EAASC,YAAY,OACzBC,gBAAiB,CAAC,wBAClBC,SAAWC,GAA6BA,EAAOC,kBAAkBC,iBAAiBC,MAAQC,EAASC,OACnGC,SAAU,CAACC,EAAkBP,EAA0BQ,KAChD,MAAAC,EAAaT,EAAOC,kBACfQ,EAAAP,gBAAkBQ,EAAcC,OAAO,CACjDR,KAAMK,EAAWJ,EAASC,OAASD,EAASQ,QAC5CC,MAAO,IAEDb,EAAAc,gBAAgBP,EAASE,EAAU"}